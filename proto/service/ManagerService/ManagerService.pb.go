// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: ManagerService.proto

package ManagerService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Symbols defined in public import of google/protobuf/timestamp.proto.

type Timestamp = timestamppb.Timestamp

// Symbols defined in public import of google/protobuf/any.proto.

type Any = anypb.Any

type Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumber int64 `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber"`
	PageSize   int64 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize"`
}

func (x *Page) Reset() {
	*x = Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{0}
}

func (x *Page) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *Page) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

//根据招采单号查询合同信息
type GetContractInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentPlanId int64 `protobuf:"varint,1,opt,name=shipmentPlanId,proto3" json:"shipmentPlanId"`
	ManagerId      int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *GetContractInfoReq) Reset() {
	*x = GetContractInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractInfoReq) ProtoMessage() {}

func (x *GetContractInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractInfoReq.ProtoReflect.Descriptor instead.
func (*GetContractInfoReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{1}
}

func (x *GetContractInfoReq) GetShipmentPlanId() int64 {
	if x != nil {
		return x.ShipmentPlanId
	}
	return 0
}

func (x *GetContractInfoReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type GetContractInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId int64  `protobuf:"varint,1,opt,name=contractId,proto3" json:"contractId"`
	ContractNo string `protobuf:"bytes,2,opt,name=contractNo,proto3" json:"contractNo"`
}

func (x *GetContractInfoResp) Reset() {
	*x = GetContractInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractInfoResp) ProtoMessage() {}

func (x *GetContractInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractInfoResp.ProtoReflect.Descriptor instead.
func (*GetContractInfoResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{2}
}

func (x *GetContractInfoResp) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *GetContractInfoResp) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

//查询当前合同汇总
type CountContractReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MibId     int64 `protobuf:"varint,1,opt,name=mibId,proto3" json:"mibId"`
	ManagerId int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CountContractReq) Reset() {
	*x = CountContractReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountContractReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountContractReq) ProtoMessage() {}

func (x *CountContractReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountContractReq.ProtoReflect.Descriptor instead.
func (*CountContractReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{3}
}

func (x *CountContractReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *CountContractReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CountContractResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountContract int64 `protobuf:"varint,1,opt,name=countContract,proto3" json:"countContract"`
	CountMoney    int64 `protobuf:"varint,2,opt,name=countMoney,proto3" json:"countMoney"`
}

func (x *CountContractResp) Reset() {
	*x = CountContractResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountContractResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountContractResp) ProtoMessage() {}

func (x *CountContractResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountContractResp.ProtoReflect.Descriptor instead.
func (*CountContractResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{4}
}

func (x *CountContractResp) GetCountContract() int64 {
	if x != nil {
		return x.CountContract
	}
	return 0
}

func (x *CountContractResp) GetCountMoney() int64 {
	if x != nil {
		return x.CountMoney
	}
	return 0
}

//合同详情
type ContractDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId int64 `protobuf:"varint,1,opt,name=contractId,proto3" json:"contractId"`
	ManagerId  int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *ContractDetailReq) Reset() {
	*x = ContractDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractDetailReq) ProtoMessage() {}

func (x *ContractDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractDetailReq.ProtoReflect.Descriptor instead.
func (*ContractDetailReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{5}
}

func (x *ContractDetailReq) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *ContractDetailReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ContractDetailResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ContractDetailVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *ContractDetailResp) Reset() {
	*x = ContractDetailResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractDetailResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractDetailResp) ProtoMessage() {}

func (x *ContractDetailResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractDetailResp.ProtoReflect.Descriptor instead.
func (*ContractDetailResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{6}
}

func (x *ContractDetailResp) GetList() []*ContractDetailVo {
	if x != nil {
		return x.List
	}
	return nil
}

type ContractDetailVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manufacturer    string `protobuf:"bytes,1,opt,name=manufacturer,proto3" json:"manufacturer"`
	MiName          string `protobuf:"bytes,2,opt,name=miName,proto3" json:"miName"`
	MedicineAmount  string `protobuf:"bytes,3,opt,name=medicineAmount,proto3" json:"medicineAmount"`
	AllMoney        string `protobuf:"bytes,4,opt,name=allMoney,proto3" json:"allMoney"`
	MedicineReceive string `protobuf:"bytes,5,opt,name=medicineReceive,proto3" json:"medicineReceive"`
}

func (x *ContractDetailVo) Reset() {
	*x = ContractDetailVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractDetailVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractDetailVo) ProtoMessage() {}

func (x *ContractDetailVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractDetailVo.ProtoReflect.Descriptor instead.
func (*ContractDetailVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{7}
}

func (x *ContractDetailVo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *ContractDetailVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ContractDetailVo) GetMedicineAmount() string {
	if x != nil {
		return x.MedicineAmount
	}
	return ""
}

func (x *ContractDetailVo) GetAllMoney() string {
	if x != nil {
		return x.AllMoney
	}
	return ""
}

func (x *ContractDetailVo) GetMedicineReceive() string {
	if x != nil {
		return x.MedicineReceive
	}
	return ""
}

//合同列表
type ContractListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName   string                 `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
	TenderCompany  string                 `protobuf:"bytes,2,opt,name=TenderCompany,proto3" json:"TenderCompany"`
	StartAt        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=StartAt,proto3" json:"StartAt"`
	EndAt          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=EndAt,proto3" json:"EndAt"`
	CompanyName    string                 `protobuf:"bytes,5,opt,name=companyName,proto3" json:"companyName"`
	TagId          int64                  `protobuf:"varint,6,opt,name=tagId,proto3" json:"tagId"`
	ContractNo     string                 `protobuf:"bytes,7,opt,name=contractNo,proto3" json:"contractNo"`
	ContractStatus string                 `protobuf:"bytes,8,opt,name=contractStatus,proto3" json:"contractStatus"`
	Page           *Page                  `protobuf:"bytes,9,opt,name=page,proto3" json:"page"`
	ManagerId      int64                  `protobuf:"varint,10,opt,name=managerId,proto3" json:"managerId"`
	MedicineCode   string                 `protobuf:"bytes,11,opt,name=medicineCode,proto3" json:"medicineCode"`
	//备用
	CompanyCode  string `protobuf:"bytes,12,opt,name=companyCode,proto3" json:"companyCode"`
	CompanyId    int64  `protobuf:"varint,13,opt,name=companyId,proto3" json:"companyId"`
	MiId         int64  `protobuf:"varint,14,opt,name=miId,proto3" json:"miId"`
	ActiveStatus string `protobuf:"bytes,15,opt,name=activeStatus,proto3" json:"activeStatus"`
}

func (x *ContractListReq) Reset() {
	*x = ContractListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractListReq) ProtoMessage() {}

func (x *ContractListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractListReq.ProtoReflect.Descriptor instead.
func (*ContractListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{8}
}

func (x *ContractListReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ContractListReq) GetTenderCompany() string {
	if x != nil {
		return x.TenderCompany
	}
	return ""
}

func (x *ContractListReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ContractListReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *ContractListReq) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *ContractListReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *ContractListReq) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *ContractListReq) GetContractStatus() string {
	if x != nil {
		return x.ContractStatus
	}
	return ""
}

func (x *ContractListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ContractListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ContractListReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ContractListReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *ContractListReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ContractListReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *ContractListReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

type ContractListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ContractListVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64             `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64             `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ContractListResp) Reset() {
	*x = ContractListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractListResp) ProtoMessage() {}

func (x *ContractListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractListResp.ProtoReflect.Descriptor instead.
func (*ContractListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{9}
}

func (x *ContractListResp) GetList() []*ContractListVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ContractListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ContractListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ContractListResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ContractListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId            int64                  `protobuf:"varint,1,opt,name=contractId,proto3" json:"contractId"`
	ContractNo            string                 `protobuf:"bytes,2,opt,name=contractNo,proto3" json:"contractNo"`
	MedicineName          string                 `protobuf:"bytes,3,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string                 `protobuf:"bytes,4,opt,name=medicineCode,proto3" json:"medicineCode"`
	TagName               string                 `protobuf:"bytes,5,opt,name=tagName,proto3" json:"tagName"`
	MedicineSpecification string                 `protobuf:"bytes,6,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	TenderCompany         string                 `protobuf:"bytes,7,opt,name=tenderCompany,proto3" json:"tenderCompany"`
	CompanyName           string                 `protobuf:"bytes,8,opt,name=companyName,proto3" json:"companyName"`
	MedicinePrice         int64                  `protobuf:"varint,9,opt,name=medicinePrice,proto3" json:"medicinePrice"`
	TotalAmount           int64                  `protobuf:"varint,10,opt,name=totalAmount,proto3" json:"totalAmount"`
	TotalMoney            int64                  `protobuf:"varint,11,opt,name=totalMoney,proto3" json:"totalMoney"`
	StartAt               *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=startAt,proto3" json:"startAt"`
	EndAt                 *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=endAt,proto3" json:"endAt"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=createdAt,proto3" json:"createdAt"`
	HashInfo              string                 `protobuf:"bytes,15,opt,name=hashInfo,proto3" json:"hashInfo"`
	ActiveStatus          string                 `protobuf:"bytes,16,opt,name=activeStatus,proto3" json:"activeStatus"`
	MedicineId            int64                  `protobuf:"varint,17,opt,name=medicineId,proto3" json:"medicineId"`
	CompanyId             int64                  `protobuf:"varint,18,opt,name=companyId,proto3" json:"companyId"`
	ContractMiAmount      int64                  `protobuf:"varint,19,opt,name=contractMiAmount,proto3" json:"contractMiAmount"`
	ContractMiReceive     int64                  `protobuf:"varint,20,opt,name=contractMiReceive,proto3" json:"contractMiReceive"`
	Manufacturer          string                 `protobuf:"bytes,21,opt,name=manufacturer,proto3" json:"manufacturer"`
	MedicineForm          string                 `protobuf:"bytes,22,opt,name=medicineForm,proto3" json:"medicineForm"`
	MedicinePackage       string                 `protobuf:"bytes,23,opt,name=medicinePackage,proto3" json:"medicinePackage"`
	MedicineUnit          string                 `protobuf:"bytes,24,opt,name=medicineUnit,proto3" json:"medicineUnit"`
	CalculateRate         int64                  `protobuf:"varint,25,opt,name=calculateRate,proto3" json:"calculateRate"`
	ContractMiId          int64                  `protobuf:"varint,26,opt,name=contractMiId,proto3" json:"contractMiId"`
}

func (x *ContractListVo) Reset() {
	*x = ContractListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractListVo) ProtoMessage() {}

func (x *ContractListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractListVo.ProtoReflect.Descriptor instead.
func (*ContractListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{10}
}

func (x *ContractListVo) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *ContractListVo) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *ContractListVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ContractListVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ContractListVo) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *ContractListVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *ContractListVo) GetTenderCompany() string {
	if x != nil {
		return x.TenderCompany
	}
	return ""
}

func (x *ContractListVo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *ContractListVo) GetMedicinePrice() int64 {
	if x != nil {
		return x.MedicinePrice
	}
	return 0
}

func (x *ContractListVo) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *ContractListVo) GetTotalMoney() int64 {
	if x != nil {
		return x.TotalMoney
	}
	return 0
}

func (x *ContractListVo) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ContractListVo) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *ContractListVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ContractListVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

func (x *ContractListVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ContractListVo) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *ContractListVo) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ContractListVo) GetContractMiAmount() int64 {
	if x != nil {
		return x.ContractMiAmount
	}
	return 0
}

func (x *ContractListVo) GetContractMiReceive() int64 {
	if x != nil {
		return x.ContractMiReceive
	}
	return 0
}

func (x *ContractListVo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *ContractListVo) GetMedicineForm() string {
	if x != nil {
		return x.MedicineForm
	}
	return ""
}

func (x *ContractListVo) GetMedicinePackage() string {
	if x != nil {
		return x.MedicinePackage
	}
	return ""
}

func (x *ContractListVo) GetMedicineUnit() string {
	if x != nil {
		return x.MedicineUnit
	}
	return ""
}

func (x *ContractListVo) GetCalculateRate() int64 {
	if x != nil {
		return x.CalculateRate
	}
	return 0
}

func (x *ContractListVo) GetContractMiId() int64 {
	if x != nil {
		return x.ContractMiId
	}
	return 0
}

//根据药品id 配送企业id 起始时间 查询合同列表
type UpCheckContractReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reqs      []*CheckContractParam `protobuf:"bytes,1,rep,name=reqs,proto3" json:"reqs"`
	ManagerId int64                 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpCheckContractReq) Reset() {
	*x = UpCheckContractReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpCheckContractReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpCheckContractReq) ProtoMessage() {}

func (x *UpCheckContractReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpCheckContractReq.ProtoReflect.Descriptor instead.
func (*UpCheckContractReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{11}
}

func (x *UpCheckContractReq) GetReqs() []*CheckContractParam {
	if x != nil {
		return x.Reqs
	}
	return nil
}

func (x *UpCheckContractReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CheckContractParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId int64                  `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	CompanyId  int64                  `protobuf:"varint,2,opt,name=companyId,proto3" json:"companyId"`
	StartAt    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=startAt,proto3" json:"startAt"`
	EndAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=endAt,proto3" json:"endAt"`
}

func (x *CheckContractParam) Reset() {
	*x = CheckContractParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckContractParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckContractParam) ProtoMessage() {}

func (x *CheckContractParam) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckContractParam.ProtoReflect.Descriptor instead.
func (*CheckContractParam) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{12}
}

func (x *CheckContractParam) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *CheckContractParam) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *CheckContractParam) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *CheckContractParam) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

type CheckContractListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ContractListVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *CheckContractListResp) Reset() {
	*x = CheckContractListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckContractListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckContractListResp) ProtoMessage() {}

func (x *CheckContractListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckContractListResp.ProtoReflect.Descriptor instead.
func (*CheckContractListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{13}
}

func (x *CheckContractListResp) GetList() []*ContractListVo {
	if x != nil {
		return x.List
	}
	return nil
}

//子合同列表
type ContractMiListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId   int64 `protobuf:"varint,1,opt,name=contractId,proto3" json:"contractId"`
	ContractMiId int64 `protobuf:"varint,2,opt,name=contractMiId,proto3" json:"contractMiId"`
	ManagerId    int64 `protobuf:"varint,4,opt,name=managerId,proto3" json:"managerId"`
}

func (x *ContractMiListReq) Reset() {
	*x = ContractMiListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractMiListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractMiListReq) ProtoMessage() {}

func (x *ContractMiListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractMiListReq.ProtoReflect.Descriptor instead.
func (*ContractMiListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{14}
}

func (x *ContractMiListReq) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *ContractMiListReq) GetContractMiId() int64 {
	if x != nil {
		return x.ContractMiId
	}
	return 0
}

func (x *ContractMiListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ContractMiListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ContractMiListVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *ContractMiListResp) Reset() {
	*x = ContractMiListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractMiListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractMiListResp) ProtoMessage() {}

func (x *ContractMiListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractMiListResp.ProtoReflect.Descriptor instead.
func (*ContractMiListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{15}
}

func (x *ContractMiListResp) GetList() []*ContractMiListVo {
	if x != nil {
		return x.List
	}
	return nil
}

type ContractMiListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiContractId          int64                  `protobuf:"varint,1,opt,name=miContractId,proto3" json:"miContractId"`
	MedicineName          string                 `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string                 `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
	MiName                string                 `protobuf:"bytes,4,opt,name=miName,proto3" json:"miName"`
	MedicinePrice         int64                  `protobuf:"varint,5,opt,name=medicinePrice,proto3" json:"medicinePrice"`
	MedicineAmount        int64                  `protobuf:"varint,6,opt,name=medicineAmount,proto3" json:"medicineAmount"`
	MedicineAmountMoney   int64                  `protobuf:"varint,7,opt,name=medicineAmountMoney,proto3" json:"medicineAmountMoney"`
	HashInfo              string                 `protobuf:"bytes,8,opt,name=hashInfo,proto3" json:"hashInfo"`
	InfoUploadAt          *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
	MedicineSpecification string                 `protobuf:"bytes,10,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	ContractMd5           string                 `protobuf:"bytes,11,opt,name=contractMd5,proto3" json:"contractMd5"`
	ContractUrl           string                 `protobuf:"bytes,12,opt,name=contractUrl,proto3" json:"contractUrl"`
	ActiveStatus          string                 `protobuf:"bytes,13,opt,name=activeStatus,proto3" json:"activeStatus"`
	Manufacturer          string                 `protobuf:"bytes,14,opt,name=manufacturer,proto3" json:"manufacturer"`
	MedicineReceive       int64                  `protobuf:"varint,15,opt,name=medicineReceive,proto3" json:"medicineReceive"`
	MiId                  int64                  `protobuf:"varint,16,opt,name=miId,proto3" json:"miId"`
	CreateAt              *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=createAt,proto3" json:"createAt"`
}

func (x *ContractMiListVo) Reset() {
	*x = ContractMiListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractMiListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractMiListVo) ProtoMessage() {}

func (x *ContractMiListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractMiListVo.ProtoReflect.Descriptor instead.
func (*ContractMiListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{16}
}

func (x *ContractMiListVo) GetMiContractId() int64 {
	if x != nil {
		return x.MiContractId
	}
	return 0
}

func (x *ContractMiListVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ContractMiListVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ContractMiListVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ContractMiListVo) GetMedicinePrice() int64 {
	if x != nil {
		return x.MedicinePrice
	}
	return 0
}

func (x *ContractMiListVo) GetMedicineAmount() int64 {
	if x != nil {
		return x.MedicineAmount
	}
	return 0
}

func (x *ContractMiListVo) GetMedicineAmountMoney() int64 {
	if x != nil {
		return x.MedicineAmountMoney
	}
	return 0
}

func (x *ContractMiListVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

func (x *ContractMiListVo) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

func (x *ContractMiListVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *ContractMiListVo) GetContractMd5() string {
	if x != nil {
		return x.ContractMd5
	}
	return ""
}

func (x *ContractMiListVo) GetContractUrl() string {
	if x != nil {
		return x.ContractUrl
	}
	return ""
}

func (x *ContractMiListVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ContractMiListVo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *ContractMiListVo) GetMedicineReceive() int64 {
	if x != nil {
		return x.MedicineReceive
	}
	return 0
}

func (x *ContractMiListVo) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *ContractMiListVo) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

//子合同补录
type CreateOneContractMIReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId           int64 `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	ContractId     int64 `protobuf:"varint,2,opt,name=contractId,proto3" json:"contractId"`
	MedicineAmount int64 `protobuf:"varint,3,opt,name=medicineAmount,proto3" json:"medicineAmount"`
	ManagerId      int64 `protobuf:"varint,4,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateOneContractMIReq) Reset() {
	*x = CreateOneContractMIReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneContractMIReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneContractMIReq) ProtoMessage() {}

func (x *CreateOneContractMIReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneContractMIReq.ProtoReflect.Descriptor instead.
func (*CreateOneContractMIReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{17}
}

func (x *CreateOneContractMIReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *CreateOneContractMIReq) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *CreateOneContractMIReq) GetMedicineAmount() int64 {
	if x != nil {
		return x.MedicineAmount
	}
	return 0
}

func (x *CreateOneContractMIReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateOneContractMIResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateOneContractMIResp) Reset() {
	*x = CreateOneContractMIResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneContractMIResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneContractMIResp) ProtoMessage() {}

func (x *CreateOneContractMIResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneContractMIResp.ProtoReflect.Descriptor instead.
func (*CreateOneContractMIResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{18}
}

func (x *CreateOneContractMIResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//子合同更新
type UpdateOneContractMIReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractMiId   int64 `protobuf:"varint,1,opt,name=contractMiId,proto3" json:"contractMiId"`
	MiId           int64 `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
	MedicineAmount int64 `protobuf:"varint,3,opt,name=medicineAmount,proto3" json:"medicineAmount"`
	ManagerId      int64 `protobuf:"varint,4,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpdateOneContractMIReq) Reset() {
	*x = UpdateOneContractMIReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOneContractMIReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneContractMIReq) ProtoMessage() {}

func (x *UpdateOneContractMIReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneContractMIReq.ProtoReflect.Descriptor instead.
func (*UpdateOneContractMIReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateOneContractMIReq) GetContractMiId() int64 {
	if x != nil {
		return x.ContractMiId
	}
	return 0
}

func (x *UpdateOneContractMIReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *UpdateOneContractMIReq) GetMedicineAmount() int64 {
	if x != nil {
		return x.MedicineAmount
	}
	return 0
}

func (x *UpdateOneContractMIReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UpdateOneContractMIResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateOneContractMIResp) Reset() {
	*x = UpdateOneContractMIResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOneContractMIResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneContractMIResp) ProtoMessage() {}

func (x *UpdateOneContractMIResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneContractMIResp.ProtoReflect.Descriptor instead.
func (*UpdateOneContractMIResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateOneContractMIResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//主合同更新
type UpdateOneContractReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId    int64                  `protobuf:"varint,1,opt,name=contractId,proto3" json:"contractId"`
	MedicineId    int64                  `protobuf:"varint,2,opt,name=medicineId,proto3" json:"medicineId"`
	MedicinePrice int64                  `protobuf:"varint,3,opt,name=medicinePrice,proto3" json:"medicinePrice"`
	StartAt       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=startAt,proto3" json:"startAt"`
	EndAt         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=endAt,proto3" json:"endAt"`
	ManagerId     int64                  `protobuf:"varint,6,opt,name=managerId,proto3" json:"managerId"`
	CompanyId     int64                  `protobuf:"varint,7,opt,name=companyId,proto3" json:"companyId"`
	TenderCompany string                 `protobuf:"bytes,8,opt,name=tenderCompany,proto3" json:"tenderCompany"`
}

func (x *UpdateOneContractReq) Reset() {
	*x = UpdateOneContractReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOneContractReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneContractReq) ProtoMessage() {}

func (x *UpdateOneContractReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneContractReq.ProtoReflect.Descriptor instead.
func (*UpdateOneContractReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateOneContractReq) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *UpdateOneContractReq) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *UpdateOneContractReq) GetMedicinePrice() int64 {
	if x != nil {
		return x.MedicinePrice
	}
	return 0
}

func (x *UpdateOneContractReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *UpdateOneContractReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *UpdateOneContractReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateOneContractReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *UpdateOneContractReq) GetTenderCompany() string {
	if x != nil {
		return x.TenderCompany
	}
	return ""
}

type UpdateOneContractResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateOneContractResp) Reset() {
	*x = UpdateOneContractResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOneContractResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneContractResp) ProtoMessage() {}

func (x *UpdateOneContractResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneContractResp.ProtoReflect.Descriptor instead.
func (*UpdateOneContractResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateOneContractResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//主合同批量更新和新增
type BatchOperateContractReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateParam []*BatchOperateContract `protobuf:"bytes,1,rep,name=updateParam,proto3" json:"updateParam"`
	CreateParam []*BatchOperateContract `protobuf:"bytes,2,rep,name=createParam,proto3" json:"createParam"`
	ManagerId   int64                   `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *BatchOperateContractReq) Reset() {
	*x = BatchOperateContractReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchOperateContractReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperateContractReq) ProtoMessage() {}

func (x *BatchOperateContractReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperateContractReq.ProtoReflect.Descriptor instead.
func (*BatchOperateContractReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{23}
}

func (x *BatchOperateContractReq) GetUpdateParam() []*BatchOperateContract {
	if x != nil {
		return x.UpdateParam
	}
	return nil
}

func (x *BatchOperateContractReq) GetCreateParam() []*BatchOperateContract {
	if x != nil {
		return x.CreateParam
	}
	return nil
}

func (x *BatchOperateContractReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type BatchOperateContractResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *BatchOperateContractResp) Reset() {
	*x = BatchOperateContractResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchOperateContractResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperateContractResp) ProtoMessage() {}

func (x *BatchOperateContractResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperateContractResp.ProtoReflect.Descriptor instead.
func (*BatchOperateContractResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{24}
}

func (x *BatchOperateContractResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type BatchOperateContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId    int64                  `protobuf:"varint,1,opt,name=contractId,proto3" json:"contractId"`
	MedicineId    int64                  `protobuf:"varint,2,opt,name=medicineId,proto3" json:"medicineId"`
	MedicinePrice int64                  `protobuf:"varint,3,opt,name=medicinePrice,proto3" json:"medicinePrice"`
	StartAt       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=startAt,proto3" json:"startAt"`
	EndAt         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=endAt,proto3" json:"endAt"`
	ManagerId     int64                  `protobuf:"varint,6,opt,name=managerId,proto3" json:"managerId"`
	CompanyId     int64                  `protobuf:"varint,7,opt,name=companyId,proto3" json:"companyId"`
	TenderCompany string                 `protobuf:"bytes,8,opt,name=tenderCompany,proto3" json:"tenderCompany"`
}

func (x *BatchOperateContract) Reset() {
	*x = BatchOperateContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchOperateContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperateContract) ProtoMessage() {}

func (x *BatchOperateContract) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperateContract.ProtoReflect.Descriptor instead.
func (*BatchOperateContract) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{25}
}

func (x *BatchOperateContract) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *BatchOperateContract) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *BatchOperateContract) GetMedicinePrice() int64 {
	if x != nil {
		return x.MedicinePrice
	}
	return 0
}

func (x *BatchOperateContract) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *BatchOperateContract) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *BatchOperateContract) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *BatchOperateContract) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *BatchOperateContract) GetTenderCompany() string {
	if x != nil {
		return x.TenderCompany
	}
	return ""
}

//主合同更新状态
type UpdateContractActiveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId   int64  `protobuf:"varint,1,opt,name=contractId,proto3" json:"contractId"`
	ActiveStatus string `protobuf:"bytes,2,opt,name=activeStatus,proto3" json:"activeStatus"`
	ManagerId    int64  `protobuf:"varint,6,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpdateContractActiveReq) Reset() {
	*x = UpdateContractActiveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContractActiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContractActiveReq) ProtoMessage() {}

func (x *UpdateContractActiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContractActiveReq.ProtoReflect.Descriptor instead.
func (*UpdateContractActiveReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateContractActiveReq) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *UpdateContractActiveReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *UpdateContractActiveReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UpdateContractActiveResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateContractActiveResp) Reset() {
	*x = UpdateContractActiveResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContractActiveResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContractActiveResp) ProtoMessage() {}

func (x *UpdateContractActiveResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContractActiveResp.ProtoReflect.Descriptor instead.
func (*UpdateContractActiveResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateContractActiveResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//刷新合同
type RefreshContractReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId int64  `protobuf:"varint,1,opt,name=contractId,proto3" json:"contractId"`
	ContractNo string `protobuf:"bytes,2,opt,name=contractNo,proto3" json:"contractNo"`
	ManagerId  int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *RefreshContractReq) Reset() {
	*x = RefreshContractReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshContractReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshContractReq) ProtoMessage() {}

func (x *RefreshContractReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshContractReq.ProtoReflect.Descriptor instead.
func (*RefreshContractReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{28}
}

func (x *RefreshContractReq) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *RefreshContractReq) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *RefreshContractReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type RefreshContractResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *RefreshContractResp) Reset() {
	*x = RefreshContractResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshContractResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshContractResp) ProtoMessage() {}

func (x *RefreshContractResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshContractResp.ProtoReflect.Descriptor instead.
func (*RefreshContractResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{29}
}

func (x *RefreshContractResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//删除主合同
type DeleteOneContractReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId int64 `protobuf:"varint,1,opt,name=contractId,proto3" json:"contractId"`
	ManagerId  int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *DeleteOneContractReq) Reset() {
	*x = DeleteOneContractReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOneContractReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOneContractReq) ProtoMessage() {}

func (x *DeleteOneContractReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOneContractReq.ProtoReflect.Descriptor instead.
func (*DeleteOneContractReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteOneContractReq) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *DeleteOneContractReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type DeleteOneContractResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *DeleteOneContractResp) Reset() {
	*x = DeleteOneContractResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOneContractResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOneContractResp) ProtoMessage() {}

func (x *DeleteOneContractResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOneContractResp.ProtoReflect.Descriptor instead.
func (*DeleteOneContractResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteOneContractResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//删除子合同
type DeleteOneContractMiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractMiId int64 `protobuf:"varint,1,opt,name=contractMiId,proto3" json:"contractMiId"`
	ManagerId    int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *DeleteOneContractMiReq) Reset() {
	*x = DeleteOneContractMiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOneContractMiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOneContractMiReq) ProtoMessage() {}

func (x *DeleteOneContractMiReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOneContractMiReq.ProtoReflect.Descriptor instead.
func (*DeleteOneContractMiReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteOneContractMiReq) GetContractMiId() int64 {
	if x != nil {
		return x.ContractMiId
	}
	return 0
}

func (x *DeleteOneContractMiReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type DeleteOneContractMiResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *DeleteOneContractMiResp) Reset() {
	*x = DeleteOneContractMiResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOneContractMiResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOneContractMiResp) ProtoMessage() {}

func (x *DeleteOneContractMiResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOneContractMiResp.ProtoReflect.Descriptor instead.
func (*DeleteOneContractMiResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteOneContractMiResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//药品列表
type MedicineListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName string `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode string `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	TagId        int64  `protobuf:"varint,3,opt,name=tagId,proto3" json:"tagId"`
	Manufacturer string `protobuf:"bytes,4,opt,name=manufacturer,proto3" json:"manufacturer"`
	Page         *Page  `protobuf:"bytes,5,opt,name=page,proto3" json:"page"`
	ManagerId    int64  `protobuf:"varint,6,opt,name=managerId,proto3" json:"managerId"`
}

func (x *MedicineListReq) Reset() {
	*x = MedicineListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineListReq) ProtoMessage() {}

func (x *MedicineListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineListReq.ProtoReflect.Descriptor instead.
func (*MedicineListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{34}
}

func (x *MedicineListReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *MedicineListReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *MedicineListReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *MedicineListReq) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *MedicineListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *MedicineListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type MedicineListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*MedicineListVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64             `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64             `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *MedicineListResp) Reset() {
	*x = MedicineListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineListResp) ProtoMessage() {}

func (x *MedicineListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineListResp.ProtoReflect.Descriptor instead.
func (*MedicineListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{35}
}

func (x *MedicineListResp) GetList() []*MedicineListVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *MedicineListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MedicineListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *MedicineListResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type MedicineListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId            int64                  `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	MedicineName          string                 `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string                 `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineSpecification string                 `protobuf:"bytes,4,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	MedicineForm          string                 `protobuf:"bytes,5,opt,name=medicineForm,proto3" json:"medicineForm"`
	MedicinePackage       string                 `protobuf:"bytes,6,opt,name=medicinePackage,proto3" json:"medicinePackage"`
	CalculateRate         int64                  `protobuf:"varint,7,opt,name=calculateRate,proto3" json:"calculateRate"`
	Manufacturer          string                 `protobuf:"bytes,8,opt,name=manufacturer,proto3" json:"manufacturer"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=createdAt,proto3" json:"createdAt"`
	MedicineUnit          string                 `protobuf:"bytes,10,opt,name=medicineUnit,proto3" json:"medicineUnit"`
	HashInfo              string                 `protobuf:"bytes,11,opt,name=hashInfo,proto3" json:"hashInfo"`
	TagName               string                 `protobuf:"bytes,12,opt,name=tagName,proto3" json:"tagName"`
	ActiveStatus          string                 `protobuf:"bytes,13,opt,name=activeStatus,proto3" json:"activeStatus"`
}

func (x *MedicineListVo) Reset() {
	*x = MedicineListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineListVo) ProtoMessage() {}

func (x *MedicineListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineListVo.ProtoReflect.Descriptor instead.
func (*MedicineListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{36}
}

func (x *MedicineListVo) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *MedicineListVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *MedicineListVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *MedicineListVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *MedicineListVo) GetMedicineForm() string {
	if x != nil {
		return x.MedicineForm
	}
	return ""
}

func (x *MedicineListVo) GetMedicinePackage() string {
	if x != nil {
		return x.MedicinePackage
	}
	return ""
}

func (x *MedicineListVo) GetCalculateRate() int64 {
	if x != nil {
		return x.CalculateRate
	}
	return 0
}

func (x *MedicineListVo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *MedicineListVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MedicineListVo) GetMedicineUnit() string {
	if x != nil {
		return x.MedicineUnit
	}
	return ""
}

func (x *MedicineListVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

func (x *MedicineListVo) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *MedicineListVo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

//药品列表用于查询 通用接口
type MedicineListForQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName string `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode string `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	ManagerId    int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
	Page         *Page  `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
	ActiveStatus string `protobuf:"bytes,5,opt,name=activeStatus,proto3" json:"activeStatus"`
}

func (x *MedicineListForQueryReq) Reset() {
	*x = MedicineListForQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineListForQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineListForQueryReq) ProtoMessage() {}

func (x *MedicineListForQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineListForQueryReq.ProtoReflect.Descriptor instead.
func (*MedicineListForQueryReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{37}
}

func (x *MedicineListForQueryReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *MedicineListForQueryReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *MedicineListForQueryReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *MedicineListForQueryReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *MedicineListForQueryReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

type MedicineListForQueryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*MedicineListVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64             `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64             `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *MedicineListForQueryResp) Reset() {
	*x = MedicineListForQueryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineListForQueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineListForQueryResp) ProtoMessage() {}

func (x *MedicineListForQueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineListForQueryResp.ProtoReflect.Descriptor instead.
func (*MedicineListForQueryResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{38}
}

func (x *MedicineListForQueryResp) GetList() []*MedicineListVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *MedicineListForQueryResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MedicineListForQueryResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *MedicineListForQueryResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type MedicineListForQueryVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId   int64  `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	MedicineName string `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode string `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
}

func (x *MedicineListForQueryVo) Reset() {
	*x = MedicineListForQueryVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineListForQueryVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineListForQueryVo) ProtoMessage() {}

func (x *MedicineListForQueryVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineListForQueryVo.ProtoReflect.Descriptor instead.
func (*MedicineListForQueryVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{39}
}

func (x *MedicineListForQueryVo) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *MedicineListForQueryVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *MedicineListForQueryVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

//创建药品
type CreateMedicineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName          string `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineSpecification string `protobuf:"bytes,3,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	MedicineForm          string `protobuf:"bytes,4,opt,name=medicineForm,proto3" json:"medicineForm"`
	MedicinePackage       string `protobuf:"bytes,5,opt,name=medicinePackage,proto3" json:"medicinePackage"`
	CalculateRate         int64  `protobuf:"varint,6,opt,name=calculateRate,proto3" json:"calculateRate"`
	Manufacturer          string `protobuf:"bytes,7,opt,name=manufacturer,proto3" json:"manufacturer"`
	MedicineUnit          string `protobuf:"bytes,8,opt,name=medicineUnit,proto3" json:"medicineUnit"`
	ManagerId             int64  `protobuf:"varint,9,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateMedicineReq) Reset() {
	*x = CreateMedicineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMedicineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMedicineReq) ProtoMessage() {}

func (x *CreateMedicineReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMedicineReq.ProtoReflect.Descriptor instead.
func (*CreateMedicineReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{40}
}

func (x *CreateMedicineReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *CreateMedicineReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *CreateMedicineReq) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *CreateMedicineReq) GetMedicineForm() string {
	if x != nil {
		return x.MedicineForm
	}
	return ""
}

func (x *CreateMedicineReq) GetMedicinePackage() string {
	if x != nil {
		return x.MedicinePackage
	}
	return ""
}

func (x *CreateMedicineReq) GetCalculateRate() int64 {
	if x != nil {
		return x.CalculateRate
	}
	return 0
}

func (x *CreateMedicineReq) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *CreateMedicineReq) GetMedicineUnit() string {
	if x != nil {
		return x.MedicineUnit
	}
	return ""
}

func (x *CreateMedicineReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateMedicineResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateMedicineResp) Reset() {
	*x = CreateMedicineResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMedicineResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMedicineResp) ProtoMessage() {}

func (x *CreateMedicineResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMedicineResp.ProtoReflect.Descriptor instead.
func (*CreateMedicineResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{41}
}

func (x *CreateMedicineResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//批量创建药品
type CreateBatchMedicineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List      []*CreateMedicineReq `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	ManagerId int64                `protobuf:"varint,9,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateBatchMedicineReq) Reset() {
	*x = CreateBatchMedicineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBatchMedicineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBatchMedicineReq) ProtoMessage() {}

func (x *CreateBatchMedicineReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBatchMedicineReq.ProtoReflect.Descriptor instead.
func (*CreateBatchMedicineReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{42}
}

func (x *CreateBatchMedicineReq) GetList() []*CreateMedicineReq {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CreateBatchMedicineReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateBatchMedicineResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateBatchMedicineResp) Reset() {
	*x = CreateBatchMedicineResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBatchMedicineResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBatchMedicineResp) ProtoMessage() {}

func (x *CreateBatchMedicineResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBatchMedicineResp.ProtoReflect.Descriptor instead.
func (*CreateBatchMedicineResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{43}
}

func (x *CreateBatchMedicineResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//编辑药品
type UpdateMedicineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId            int64  `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	MedicineName          string `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineSpecification string `protobuf:"bytes,4,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	MedicineForm          string `protobuf:"bytes,5,opt,name=medicineForm,proto3" json:"medicineForm"`
	MedicinePackage       string `protobuf:"bytes,6,opt,name=medicinePackage,proto3" json:"medicinePackage"`
	CalculateRate         int64  `protobuf:"varint,7,opt,name=calculateRate,proto3" json:"calculateRate"`
	Manufacturer          string `protobuf:"bytes,8,opt,name=manufacturer,proto3" json:"manufacturer"`
	MedicineUnit          string `protobuf:"bytes,9,opt,name=medicineUnit,proto3" json:"medicineUnit"`
	ManagerId             int64  `protobuf:"varint,10,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpdateMedicineReq) Reset() {
	*x = UpdateMedicineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMedicineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMedicineReq) ProtoMessage() {}

func (x *UpdateMedicineReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMedicineReq.ProtoReflect.Descriptor instead.
func (*UpdateMedicineReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{44}
}

func (x *UpdateMedicineReq) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *UpdateMedicineReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *UpdateMedicineReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *UpdateMedicineReq) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *UpdateMedicineReq) GetMedicineForm() string {
	if x != nil {
		return x.MedicineForm
	}
	return ""
}

func (x *UpdateMedicineReq) GetMedicinePackage() string {
	if x != nil {
		return x.MedicinePackage
	}
	return ""
}

func (x *UpdateMedicineReq) GetCalculateRate() int64 {
	if x != nil {
		return x.CalculateRate
	}
	return 0
}

func (x *UpdateMedicineReq) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *UpdateMedicineReq) GetMedicineUnit() string {
	if x != nil {
		return x.MedicineUnit
	}
	return ""
}

func (x *UpdateMedicineReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UpdateMedicineResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateMedicineResp) Reset() {
	*x = UpdateMedicineResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMedicineResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMedicineResp) ProtoMessage() {}

func (x *UpdateMedicineResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMedicineResp.ProtoReflect.Descriptor instead.
func (*UpdateMedicineResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{45}
}

func (x *UpdateMedicineResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//编辑药品生效状态
type UpdateMedicineActiveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId   int64  `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	ActiveStatus string `protobuf:"bytes,2,opt,name=activeStatus,proto3" json:"activeStatus"`
	ManagerId    int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpdateMedicineActiveReq) Reset() {
	*x = UpdateMedicineActiveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMedicineActiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMedicineActiveReq) ProtoMessage() {}

func (x *UpdateMedicineActiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMedicineActiveReq.ProtoReflect.Descriptor instead.
func (*UpdateMedicineActiveReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{46}
}

func (x *UpdateMedicineActiveReq) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *UpdateMedicineActiveReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *UpdateMedicineActiveReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UpdateMedicineActiveResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=Result,proto3" json:"Result"`
}

func (x *UpdateMedicineActiveResp) Reset() {
	*x = UpdateMedicineActiveResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMedicineActiveResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMedicineActiveResp) ProtoMessage() {}

func (x *UpdateMedicineActiveResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMedicineActiveResp.ProtoReflect.Descriptor instead.
func (*UpdateMedicineActiveResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{47}
}

func (x *UpdateMedicineActiveResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//删除药品
type DeleteMedicineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineCode string `protobuf:"bytes,1,opt,name=medicineCode,proto3" json:"medicineCode"`
	ManagerId    int64  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *DeleteMedicineReq) Reset() {
	*x = DeleteMedicineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMedicineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMedicineReq) ProtoMessage() {}

func (x *DeleteMedicineReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMedicineReq.ProtoReflect.Descriptor instead.
func (*DeleteMedicineReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{48}
}

func (x *DeleteMedicineReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *DeleteMedicineReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type DeleteMedicineResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=Result,proto3" json:"Result"`
}

func (x *DeleteMedicineResp) Reset() {
	*x = DeleteMedicineResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMedicineResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMedicineResp) ProtoMessage() {}

func (x *DeleteMedicineResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMedicineResp.ProtoReflect.Descriptor instead.
func (*DeleteMedicineResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{49}
}

func (x *DeleteMedicineResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//根据药品id查询tagName字符串组
type SelectTagByMedicineIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId int64 `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	ManagerId  int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *SelectTagByMedicineIdReq) Reset() {
	*x = SelectTagByMedicineIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectTagByMedicineIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectTagByMedicineIdReq) ProtoMessage() {}

func (x *SelectTagByMedicineIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectTagByMedicineIdReq.ProtoReflect.Descriptor instead.
func (*SelectTagByMedicineIdReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{50}
}

func (x *SelectTagByMedicineIdReq) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *SelectTagByMedicineIdReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type SelectTagByMedicineIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagNames string `protobuf:"bytes,1,opt,name=tagNames,proto3" json:"tagNames"`
}

func (x *SelectTagByMedicineIdResp) Reset() {
	*x = SelectTagByMedicineIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectTagByMedicineIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectTagByMedicineIdResp) ProtoMessage() {}

func (x *SelectTagByMedicineIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectTagByMedicineIdResp.ProtoReflect.Descriptor instead.
func (*SelectTagByMedicineIdResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{51}
}

func (x *SelectTagByMedicineIdResp) GetTagNames() string {
	if x != nil {
		return x.TagNames
	}
	return ""
}

//根据药品names查询药品列表信息
type SelectInfoByMedicineNamesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineNames []string `protobuf:"bytes,1,rep,name=medicineNames,proto3" json:"medicineNames"`
	ManagerId     int64    `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *SelectInfoByMedicineNamesReq) Reset() {
	*x = SelectInfoByMedicineNamesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectInfoByMedicineNamesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectInfoByMedicineNamesReq) ProtoMessage() {}

func (x *SelectInfoByMedicineNamesReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectInfoByMedicineNamesReq.ProtoReflect.Descriptor instead.
func (*SelectInfoByMedicineNamesReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{52}
}

func (x *SelectInfoByMedicineNamesReq) GetMedicineNames() []string {
	if x != nil {
		return x.MedicineNames
	}
	return nil
}

func (x *SelectInfoByMedicineNamesReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type SelectInfoByMedicineNamesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MedicineListForQueryVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *SelectInfoByMedicineNamesResp) Reset() {
	*x = SelectInfoByMedicineNamesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectInfoByMedicineNamesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectInfoByMedicineNamesResp) ProtoMessage() {}

func (x *SelectInfoByMedicineNamesResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectInfoByMedicineNamesResp.ProtoReflect.Descriptor instead.
func (*SelectInfoByMedicineNamesResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{53}
}

func (x *SelectInfoByMedicineNamesResp) GetList() []*MedicineListForQueryVo {
	if x != nil {
		return x.List
	}
	return nil
}

//查询标签列表
type TagListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagType   string `protobuf:"bytes,1,opt,name=tagType,proto3" json:"tagType"`
	ManagerId int64  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	TagName   string `protobuf:"bytes,3,opt,name=tagName,proto3" json:"tagName"`
	Page      *Page  `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
}

func (x *TagListReq) Reset() {
	*x = TagListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagListReq) ProtoMessage() {}

func (x *TagListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagListReq.ProtoReflect.Descriptor instead.
func (*TagListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{54}
}

func (x *TagListReq) GetTagType() string {
	if x != nil {
		return x.TagType
	}
	return ""
}

func (x *TagListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *TagListReq) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *TagListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type TagListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*TagListVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64        `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64        `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64        `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *TagListResp) Reset() {
	*x = TagListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagListResp) ProtoMessage() {}

func (x *TagListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagListResp.ProtoReflect.Descriptor instead.
func (*TagListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{55}
}

func (x *TagListResp) GetList() []*TagListVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *TagListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TagListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TagListResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type TagListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId   int64  `protobuf:"varint,1,opt,name=tagId,proto3" json:"tagId"`
	TagName string `protobuf:"bytes,2,opt,name=tagName,proto3" json:"tagName"`
	TagType string `protobuf:"bytes,3,opt,name=tagType,proto3" json:"tagType"`
}

func (x *TagListVo) Reset() {
	*x = TagListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagListVo) ProtoMessage() {}

func (x *TagListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagListVo.ProtoReflect.Descriptor instead.
func (*TagListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{56}
}

func (x *TagListVo) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *TagListVo) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *TagListVo) GetTagType() string {
	if x != nil {
		return x.TagType
	}
	return ""
}

//创建标签
type CreateTagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagType   string `protobuf:"bytes,1,opt,name=tagType,proto3" json:"tagType"`
	TagName   string `protobuf:"bytes,2,opt,name=tagName,proto3" json:"tagName"`
	ManagerId int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateTagReq) Reset() {
	*x = CreateTagReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagReq) ProtoMessage() {}

func (x *CreateTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagReq.ProtoReflect.Descriptor instead.
func (*CreateTagReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{57}
}

func (x *CreateTagReq) GetTagType() string {
	if x != nil {
		return x.TagType
	}
	return ""
}

func (x *CreateTagReq) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *CreateTagReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateTagResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateTagResp) Reset() {
	*x = CreateTagResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTagResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagResp) ProtoMessage() {}

func (x *CreateTagResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagResp.ProtoReflect.Descriptor instead.
func (*CreateTagResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{58}
}

func (x *CreateTagResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//编辑标签
type UpdateTagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId     int64  `protobuf:"varint,1,opt,name=tagId,proto3" json:"tagId"`
	TagName   string `protobuf:"bytes,2,opt,name=tagName,proto3" json:"tagName"`
	ManagerId int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpdateTagReq) Reset() {
	*x = UpdateTagReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTagReq) ProtoMessage() {}

func (x *UpdateTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTagReq.ProtoReflect.Descriptor instead.
func (*UpdateTagReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{59}
}

func (x *UpdateTagReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *UpdateTagReq) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *UpdateTagReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UpdateTagResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateTagResp) Reset() {
	*x = UpdateTagResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTagResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTagResp) ProtoMessage() {}

func (x *UpdateTagResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTagResp.ProtoReflect.Descriptor instead.
func (*UpdateTagResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{60}
}

func (x *UpdateTagResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//删除标签
type DeleteTagReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId     int64 `protobuf:"varint,1,opt,name=tagId,proto3" json:"tagId"`
	ManagerId int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *DeleteTagReq) Reset() {
	*x = DeleteTagReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagReq) ProtoMessage() {}

func (x *DeleteTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagReq.ProtoReflect.Descriptor instead.
func (*DeleteTagReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{61}
}

func (x *DeleteTagReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *DeleteTagReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type DeleteTagResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTagResp) Reset() {
	*x = DeleteTagResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagResp) ProtoMessage() {}

func (x *DeleteTagResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagResp.ProtoReflect.Descriptor instead.
func (*DeleteTagResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{62}
}

//查询标签详情列表
type TagDetailListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId     int64 `protobuf:"varint,1,opt,name=tagId,proto3" json:"tagId"`
	ManagerId int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	Page      *Page `protobuf:"bytes,3,opt,name=page,proto3" json:"page"`
}

func (x *TagDetailListReq) Reset() {
	*x = TagDetailListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagDetailListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagDetailListReq) ProtoMessage() {}

func (x *TagDetailListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagDetailListReq.ProtoReflect.Descriptor instead.
func (*TagDetailListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{63}
}

func (x *TagDetailListReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *TagDetailListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *TagDetailListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type TagDetailListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*TagDetailVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64          `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64          `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *TagDetailListResp) Reset() {
	*x = TagDetailListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagDetailListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagDetailListResp) ProtoMessage() {}

func (x *TagDetailListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagDetailListResp.ProtoReflect.Descriptor instead.
func (*TagDetailListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{64}
}

func (x *TagDetailListResp) GetList() []*TagDetailVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *TagDetailListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TagDetailListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TagDetailListResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type TagDetailVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId            int64  `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	MedicineName          string `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineUnit          string `protobuf:"bytes,4,opt,name=medicineUnit,proto3" json:"medicineUnit"`
	MedicineForm          string `protobuf:"bytes,5,opt,name=medicineForm,proto3" json:"medicineForm"`
	MedicineSpecification string `protobuf:"bytes,6,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	Manufacturer          string `protobuf:"bytes,7,opt,name=manufacturer,proto3" json:"manufacturer"`
}

func (x *TagDetailVo) Reset() {
	*x = TagDetailVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagDetailVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagDetailVo) ProtoMessage() {}

func (x *TagDetailVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagDetailVo.ProtoReflect.Descriptor instead.
func (*TagDetailVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{65}
}

func (x *TagDetailVo) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *TagDetailVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *TagDetailVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *TagDetailVo) GetMedicineUnit() string {
	if x != nil {
		return x.MedicineUnit
	}
	return ""
}

func (x *TagDetailVo) GetMedicineForm() string {
	if x != nil {
		return x.MedicineForm
	}
	return ""
}

func (x *TagDetailVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *TagDetailVo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

// 删除标签药品信息
type DeleteTagMedicineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId      int64 `protobuf:"varint,1,opt,name=tagId,proto3" json:"tagId"`
	MedicineId int64 `protobuf:"varint,2,opt,name=medicineId,proto3" json:"medicineId"`
	ManagerId  int64 `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *DeleteTagMedicineReq) Reset() {
	*x = DeleteTagMedicineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagMedicineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagMedicineReq) ProtoMessage() {}

func (x *DeleteTagMedicineReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagMedicineReq.ProtoReflect.Descriptor instead.
func (*DeleteTagMedicineReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{66}
}

func (x *DeleteTagMedicineReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *DeleteTagMedicineReq) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *DeleteTagMedicineReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type DeleteTagMedicineResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *DeleteTagMedicineResp) Reset() {
	*x = DeleteTagMedicineResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagMedicineResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagMedicineResp) ProtoMessage() {}

func (x *DeleteTagMedicineResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagMedicineResp.ProtoReflect.Descriptor instead.
func (*DeleteTagMedicineResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{67}
}

func (x *DeleteTagMedicineResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//创建药品标签信息
type CreateTagMedicineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId      int64 `protobuf:"varint,1,opt,name=tagId,proto3" json:"tagId"`
	MedicineId int64 `protobuf:"varint,2,opt,name=medicineId,proto3" json:"medicineId"`
	ManagerId  int64 `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateTagMedicineReq) Reset() {
	*x = CreateTagMedicineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTagMedicineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagMedicineReq) ProtoMessage() {}

func (x *CreateTagMedicineReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagMedicineReq.ProtoReflect.Descriptor instead.
func (*CreateTagMedicineReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{68}
}

func (x *CreateTagMedicineReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *CreateTagMedicineReq) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *CreateTagMedicineReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateTagMedicineResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateTagMedicineResp) Reset() {
	*x = CreateTagMedicineResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTagMedicineResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagMedicineResp) ProtoMessage() {}

func (x *CreateTagMedicineResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagMedicineResp.ProtoReflect.Descriptor instead.
func (*CreateTagMedicineResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{69}
}

func (x *CreateTagMedicineResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//查询药品列表信息（标签使用）
type CommonMedicineQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineCode          string `protobuf:"bytes,1,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineName          string `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	TagId                 int64  `protobuf:"varint,3,opt,name=tagId,proto3" json:"tagId"`
	ManagerId             int64  `protobuf:"varint,4,opt,name=managerId,proto3" json:"managerId"`
	MedicineUnit          string `protobuf:"bytes,5,opt,name=medicineUnit,proto3" json:"medicineUnit"`
	MedicineForm          string `protobuf:"bytes,6,opt,name=medicineForm,proto3" json:"medicineForm"`
	MedicineSpecification string `protobuf:"bytes,7,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	Manufacturer          string `protobuf:"bytes,8,opt,name=manufacturer,proto3" json:"manufacturer"`
}

func (x *CommonMedicineQueryReq) Reset() {
	*x = CommonMedicineQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonMedicineQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonMedicineQueryReq) ProtoMessage() {}

func (x *CommonMedicineQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonMedicineQueryReq.ProtoReflect.Descriptor instead.
func (*CommonMedicineQueryReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{70}
}

func (x *CommonMedicineQueryReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *CommonMedicineQueryReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *CommonMedicineQueryReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *CommonMedicineQueryReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CommonMedicineQueryReq) GetMedicineUnit() string {
	if x != nil {
		return x.MedicineUnit
	}
	return ""
}

func (x *CommonMedicineQueryReq) GetMedicineForm() string {
	if x != nil {
		return x.MedicineForm
	}
	return ""
}

func (x *CommonMedicineQueryReq) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *CommonMedicineQueryReq) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

type CommonMedicineQueryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TagMedicineVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *CommonMedicineQueryResp) Reset() {
	*x = CommonMedicineQueryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonMedicineQueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonMedicineQueryResp) ProtoMessage() {}

func (x *CommonMedicineQueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonMedicineQueryResp.ProtoReflect.Descriptor instead.
func (*CommonMedicineQueryResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{71}
}

func (x *CommonMedicineQueryResp) GetList() []*TagMedicineVo {
	if x != nil {
		return x.List
	}
	return nil
}

type TagMedicineVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId            int64  `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	MedicineName          string `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineUnit          string `protobuf:"bytes,4,opt,name=medicineUnit,proto3" json:"medicineUnit"`
	MedicineForm          string `protobuf:"bytes,5,opt,name=medicineForm,proto3" json:"medicineForm"`
	MedicineSpecification string `protobuf:"bytes,6,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	Manufacturer          string `protobuf:"bytes,7,opt,name=manufacturer,proto3" json:"manufacturer"`
}

func (x *TagMedicineVo) Reset() {
	*x = TagMedicineVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagMedicineVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagMedicineVo) ProtoMessage() {}

func (x *TagMedicineVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagMedicineVo.ProtoReflect.Descriptor instead.
func (*TagMedicineVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{72}
}

func (x *TagMedicineVo) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *TagMedicineVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *TagMedicineVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *TagMedicineVo) GetMedicineUnit() string {
	if x != nil {
		return x.MedicineUnit
	}
	return ""
}

func (x *TagMedicineVo) GetMedicineForm() string {
	if x != nil {
		return x.MedicineForm
	}
	return ""
}

func (x *TagMedicineVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *TagMedicineVo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

//医疗机构列表
type ListMiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiCode      string  `protobuf:"bytes,1,opt,name=miCode,proto3" json:"miCode"`
	MiName      string  `protobuf:"bytes,2,opt,name=miName,proto3" json:"miName"`
	ValidStatus string  `protobuf:"bytes,3,opt,name=validStatus,proto3" json:"validStatus"`
	Page        *Page   `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
	ManagerId   int64   `protobuf:"varint,5,opt,name=managerId,proto3" json:"managerId"`
	MiIds       []int64 `protobuf:"varint,6,rep,packed,name=miIds,proto3" json:"miIds"`
}

func (x *ListMiReq) Reset() {
	*x = ListMiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMiReq) ProtoMessage() {}

func (x *ListMiReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMiReq.ProtoReflect.Descriptor instead.
func (*ListMiReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{73}
}

func (x *ListMiReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ListMiReq) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListMiReq) GetValidStatus() string {
	if x != nil {
		return x.ValidStatus
	}
	return ""
}

func (x *ListMiReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListMiReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListMiReq) GetMiIds() []int64 {
	if x != nil {
		return x.MiIds
	}
	return nil
}

type ListMiResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ListMiVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64       `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64       `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64       `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListMiResp) Reset() {
	*x = ListMiResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMiResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMiResp) ProtoMessage() {}

func (x *ListMiResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMiResp.ProtoReflect.Descriptor instead.
func (*ListMiResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{74}
}

func (x *ListMiResp) GetList() []*ListMiVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListMiResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListMiResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMiResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListMiVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId         int64                  `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	MiCode       string                 `protobuf:"bytes,2,opt,name=miCode,proto3" json:"miCode"`
	MiName       string                 `protobuf:"bytes,3,opt,name=miName,proto3" json:"miName"`
	MiType       string                 `protobuf:"bytes,4,opt,name=miType,proto3" json:"miType"`
	ManagerName  string                 `protobuf:"bytes,5,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string                 `protobuf:"bytes,6,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string                 `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City         string                 `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
	Zone         string                 `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone"`
	HashInfo     string                 `protobuf:"bytes,10,opt,name=hashInfo,proto3" json:"hashInfo"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt"`
	LogoUrl      string                 `protobuf:"bytes,12,opt,name=logoUrl,proto3" json:"logoUrl"`
	AreaCode     string                 `protobuf:"bytes,13,opt,name=areaCode,proto3" json:"areaCode"`
	AreaName     string                 `protobuf:"bytes,14,opt,name=areaName,proto3" json:"areaName"`
}

func (x *ListMiVo) Reset() {
	*x = ListMiVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMiVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMiVo) ProtoMessage() {}

func (x *ListMiVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMiVo.ProtoReflect.Descriptor instead.
func (*ListMiVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{75}
}

func (x *ListMiVo) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *ListMiVo) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ListMiVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListMiVo) GetMiType() string {
	if x != nil {
		return x.MiType
	}
	return ""
}

func (x *ListMiVo) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *ListMiVo) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *ListMiVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ListMiVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ListMiVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ListMiVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

func (x *ListMiVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListMiVo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *ListMiVo) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

func (x *ListMiVo) GetAreaName() string {
	if x != nil {
		return x.AreaName
	}
	return ""
}

//查询医疗机构 通用接口
type CommonMIReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiName       string `protobuf:"bytes,1,opt,name=miName,proto3" json:"miName"`
	MiCode       string `protobuf:"bytes,2,opt,name=miCode,proto3" json:"miCode"`
	ManagerId    int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
	Page         *Page  `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
	ActiveStatus string `protobuf:"bytes,5,opt,name=activeStatus,proto3" json:"activeStatus"`
	MiId         int64  `protobuf:"varint,6,opt,name=miId,proto3" json:"miId"`
}

func (x *CommonMIReq) Reset() {
	*x = CommonMIReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonMIReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonMIReq) ProtoMessage() {}

func (x *CommonMIReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonMIReq.ProtoReflect.Descriptor instead.
func (*CommonMIReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{76}
}

func (x *CommonMIReq) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *CommonMIReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *CommonMIReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CommonMIReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *CommonMIReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *CommonMIReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

type CommonMIResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CommonMIVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64         `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64         `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *CommonMIResp) Reset() {
	*x = CommonMIResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonMIResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonMIResp) ProtoMessage() {}

func (x *CommonMIResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonMIResp.ProtoReflect.Descriptor instead.
func (*CommonMIResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{77}
}

func (x *CommonMIResp) GetList() []*CommonMIVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CommonMIResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CommonMIResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CommonMIResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type CommonMIVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId    int64  `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	MiName  string `protobuf:"bytes,2,opt,name=miName,proto3" json:"miName"`
	MiCode  string `protobuf:"bytes,3,opt,name=miCode,proto3" json:"miCode"`
	LogoUrl string `protobuf:"bytes,4,opt,name=logoUrl,proto3" json:"logoUrl"`
}

func (x *CommonMIVo) Reset() {
	*x = CommonMIVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonMIVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonMIVo) ProtoMessage() {}

func (x *CommonMIVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonMIVo.ProtoReflect.Descriptor instead.
func (*CommonMIVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{78}
}

func (x *CommonMIVo) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *CommonMIVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *CommonMIVo) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *CommonMIVo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

//创建医疗机构信息(主体信息)
type CreateOneMIReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiName       string `protobuf:"bytes,1,opt,name=miName,proto3" json:"miName"`
	MiCode       string `protobuf:"bytes,2,opt,name=miCode,proto3" json:"miCode"`
	MiType       string `protobuf:"bytes,3,opt,name=miType,proto3" json:"miType"`
	ManagerName  string `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City         string `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone         string `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
	ManagerId    int64  `protobuf:"varint,9,opt,name=managerId,proto3" json:"managerId"`
	AreaCode     string `protobuf:"bytes,10,opt,name=areaCode,proto3" json:"areaCode"`
}

func (x *CreateOneMIReq) Reset() {
	*x = CreateOneMIReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneMIReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneMIReq) ProtoMessage() {}

func (x *CreateOneMIReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneMIReq.ProtoReflect.Descriptor instead.
func (*CreateOneMIReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{79}
}

func (x *CreateOneMIReq) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *CreateOneMIReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *CreateOneMIReq) GetMiType() string {
	if x != nil {
		return x.MiType
	}
	return ""
}

func (x *CreateOneMIReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *CreateOneMIReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *CreateOneMIReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CreateOneMIReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateOneMIReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *CreateOneMIReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CreateOneMIReq) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

type CreateOneMIResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateOneMIResp) Reset() {
	*x = CreateOneMIResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneMIResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneMIResp) ProtoMessage() {}

func (x *CreateOneMIResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneMIResp.ProtoReflect.Descriptor instead.
func (*CreateOneMIResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{80}
}

func (x *CreateOneMIResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//更新医疗机构信息
type UpdateMiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId         int64  `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	MiName       string `protobuf:"bytes,2,opt,name=miName,proto3" json:"miName"`
	MiType       string `protobuf:"bytes,3,opt,name=miType,proto3" json:"miType"`
	ManagerName  string `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City         string `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone         string `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
	ManagerId    int64  `protobuf:"varint,9,opt,name=managerId,proto3" json:"managerId"`
	LogoUrl      string `protobuf:"bytes,10,opt,name=logoUrl,proto3" json:"logoUrl"`
	AreaCode     string `protobuf:"bytes,11,opt,name=areaCode,proto3" json:"areaCode"`
}

func (x *UpdateMiReq) Reset() {
	*x = UpdateMiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMiReq) ProtoMessage() {}

func (x *UpdateMiReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMiReq.ProtoReflect.Descriptor instead.
func (*UpdateMiReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{81}
}

func (x *UpdateMiReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *UpdateMiReq) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *UpdateMiReq) GetMiType() string {
	if x != nil {
		return x.MiType
	}
	return ""
}

func (x *UpdateMiReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *UpdateMiReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *UpdateMiReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UpdateMiReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UpdateMiReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *UpdateMiReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateMiReq) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *UpdateMiReq) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

type UpdateMiResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateMiResp) Reset() {
	*x = UpdateMiResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMiResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMiResp) ProtoMessage() {}

func (x *UpdateMiResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMiResp.ProtoReflect.Descriptor instead.
func (*UpdateMiResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{82}
}

func (x *UpdateMiResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//配送企业通用查询
type CommonCompanyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyName  string `protobuf:"bytes,1,opt,name=companyName,proto3" json:"companyName"`
	CompanyCode  string `protobuf:"bytes,2,opt,name=companyCode,proto3" json:"companyCode"`
	ManagerId    int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
	Page         *Page  `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
	ActiveStatus string `protobuf:"bytes,5,opt,name=activeStatus,proto3" json:"activeStatus"`
	ComId        int64  `protobuf:"varint,6,opt,name=comId,proto3" json:"comId"`
}

func (x *CommonCompanyReq) Reset() {
	*x = CommonCompanyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonCompanyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonCompanyReq) ProtoMessage() {}

func (x *CommonCompanyReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonCompanyReq.ProtoReflect.Descriptor instead.
func (*CommonCompanyReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{83}
}

func (x *CommonCompanyReq) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *CommonCompanyReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *CommonCompanyReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CommonCompanyReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *CommonCompanyReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *CommonCompanyReq) GetComId() int64 {
	if x != nil {
		return x.ComId
	}
	return 0
}

type CommonCompanyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CommonCompanyVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64              `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64              `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *CommonCompanyResp) Reset() {
	*x = CommonCompanyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonCompanyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonCompanyResp) ProtoMessage() {}

func (x *CommonCompanyResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonCompanyResp.ProtoReflect.Descriptor instead.
func (*CommonCompanyResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{84}
}

func (x *CommonCompanyResp) GetList() []*CommonCompanyVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CommonCompanyResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CommonCompanyResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *CommonCompanyResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type CommonCompanyVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId   int64  `protobuf:"varint,1,opt,name=companyId,proto3" json:"companyId"`
	CompanyName string `protobuf:"bytes,2,opt,name=companyName,proto3" json:"companyName"`
	CompanyCode string `protobuf:"bytes,3,opt,name=companyCode,proto3" json:"companyCode"`
	LogoUrl     string `protobuf:"bytes,4,opt,name=logoUrl,proto3" json:"logoUrl"`
}

func (x *CommonCompanyVo) Reset() {
	*x = CommonCompanyVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonCompanyVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonCompanyVo) ProtoMessage() {}

func (x *CommonCompanyVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonCompanyVo.ProtoReflect.Descriptor instead.
func (*CommonCompanyVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{85}
}

func (x *CommonCompanyVo) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *CommonCompanyVo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *CommonCompanyVo) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *CommonCompanyVo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

//配送企业列表根据name查询
type SelCompanyByNamesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyNames []string `protobuf:"bytes,1,rep,name=companyNames,proto3" json:"companyNames"`
	ManagerId    int64    `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *SelCompanyByNamesReq) Reset() {
	*x = SelCompanyByNamesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelCompanyByNamesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelCompanyByNamesReq) ProtoMessage() {}

func (x *SelCompanyByNamesReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelCompanyByNamesReq.ProtoReflect.Descriptor instead.
func (*SelCompanyByNamesReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{86}
}

func (x *SelCompanyByNamesReq) GetCompanyNames() []string {
	if x != nil {
		return x.CompanyNames
	}
	return nil
}

func (x *SelCompanyByNamesReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type SelCompanyByNamesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CommonCompanyVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *SelCompanyByNamesResp) Reset() {
	*x = SelCompanyByNamesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelCompanyByNamesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelCompanyByNamesResp) ProtoMessage() {}

func (x *SelCompanyByNamesResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelCompanyByNamesResp.ProtoReflect.Descriptor instead.
func (*SelCompanyByNamesResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{87}
}

func (x *SelCompanyByNamesResp) GetList() []*CommonCompanyVo {
	if x != nil {
		return x.List
	}
	return nil
}

//配送企业列表查询
type ListCompanyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyName string  `protobuf:"bytes,1,opt,name=companyName,proto3" json:"companyName"`
	CompanyCode string  `protobuf:"bytes,2,opt,name=companyCode,proto3" json:"companyCode"`
	ValidStatus string  `protobuf:"bytes,3,opt,name=validStatus,proto3" json:"validStatus"`
	Page        *Page   `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
	ManagerId   int64   `protobuf:"varint,5,opt,name=managerId,proto3" json:"managerId"`
	CompanyIds  []int64 `protobuf:"varint,6,rep,packed,name=companyIds,proto3" json:"companyIds"`
}

func (x *ListCompanyReq) Reset() {
	*x = ListCompanyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompanyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyReq) ProtoMessage() {}

func (x *ListCompanyReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyReq.ProtoReflect.Descriptor instead.
func (*ListCompanyReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{88}
}

func (x *ListCompanyReq) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *ListCompanyReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *ListCompanyReq) GetValidStatus() string {
	if x != nil {
		return x.ValidStatus
	}
	return ""
}

func (x *ListCompanyReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListCompanyReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListCompanyReq) GetCompanyIds() []int64 {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

type ListCompanyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ListCompanyVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64            `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64            `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListCompanyResp) Reset() {
	*x = ListCompanyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompanyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyResp) ProtoMessage() {}

func (x *ListCompanyResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyResp.ProtoReflect.Descriptor instead.
func (*ListCompanyResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{89}
}

func (x *ListCompanyResp) GetList() []*ListCompanyVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListCompanyResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListCompanyResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCompanyResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListCompanyVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId    int64                  `protobuf:"varint,1,opt,name=companyId,proto3" json:"companyId"`
	CompanyName  string                 `protobuf:"bytes,2,opt,name=companyName,proto3" json:"companyName"`
	CompanyCode  string                 `protobuf:"bytes,3,opt,name=companyCode,proto3" json:"companyCode"`
	ManagerName  string                 `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string                 `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string                 `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City         string                 `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone         string                 `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
	HashInfo     string                 `protobuf:"bytes,9,opt,name=hashInfo,proto3" json:"hashInfo"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt"`
	LogoUrl      string                 `protobuf:"bytes,11,opt,name=logoUrl,proto3" json:"logoUrl"`
}

func (x *ListCompanyVo) Reset() {
	*x = ListCompanyVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompanyVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyVo) ProtoMessage() {}

func (x *ListCompanyVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyVo.ProtoReflect.Descriptor instead.
func (*ListCompanyVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{90}
}

func (x *ListCompanyVo) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ListCompanyVo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *ListCompanyVo) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *ListCompanyVo) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *ListCompanyVo) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *ListCompanyVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ListCompanyVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ListCompanyVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ListCompanyVo) GetHashInfo() string {
	if x != nil {
		return x.HashInfo
	}
	return ""
}

func (x *ListCompanyVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListCompanyVo) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

//配送企业基础信息创建
type CreateOneCompanyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyName  string `protobuf:"bytes,1,opt,name=companyName,proto3" json:"companyName"`
	CompanyCode  string `protobuf:"bytes,2,opt,name=companyCode,proto3" json:"companyCode"`
	ManagerName  string `protobuf:"bytes,3,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string `protobuf:"bytes,4,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string `protobuf:"bytes,5,opt,name=province,proto3" json:"province"`
	City         string `protobuf:"bytes,6,opt,name=city,proto3" json:"city"`
	Zone         string `protobuf:"bytes,7,opt,name=zone,proto3" json:"zone"`
	ManagerId    int64  `protobuf:"varint,8,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateOneCompanyReq) Reset() {
	*x = CreateOneCompanyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneCompanyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneCompanyReq) ProtoMessage() {}

func (x *CreateOneCompanyReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneCompanyReq.ProtoReflect.Descriptor instead.
func (*CreateOneCompanyReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{91}
}

func (x *CreateOneCompanyReq) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *CreateOneCompanyReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *CreateOneCompanyReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *CreateOneCompanyReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *CreateOneCompanyReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CreateOneCompanyReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CreateOneCompanyReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *CreateOneCompanyReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateOneCompanyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateOneCompanyResp) Reset() {
	*x = CreateOneCompanyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOneCompanyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOneCompanyResp) ProtoMessage() {}

func (x *CreateOneCompanyResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOneCompanyResp.ProtoReflect.Descriptor instead.
func (*CreateOneCompanyResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{92}
}

func (x *CreateOneCompanyResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//配送企业基础信息更新
type UpdateOneCompanyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyName  string `protobuf:"bytes,1,opt,name=companyName,proto3" json:"companyName"`
	CompanyCode  string `protobuf:"bytes,2,opt,name=companyCode,proto3" json:"companyCode"`
	ManagerName  string `protobuf:"bytes,3,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string `protobuf:"bytes,4,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string `protobuf:"bytes,5,opt,name=province,proto3" json:"province"`
	City         string `protobuf:"bytes,6,opt,name=city,proto3" json:"city"`
	Zone         string `protobuf:"bytes,7,opt,name=zone,proto3" json:"zone"`
	ManagerId    int64  `protobuf:"varint,8,opt,name=managerId,proto3" json:"managerId"`
	CompanyId    int64  `protobuf:"varint,9,opt,name=companyId,proto3" json:"companyId"`
	LogoUrl      string `protobuf:"bytes,10,opt,name=logoUrl,proto3" json:"logoUrl"`
}

func (x *UpdateOneCompanyReq) Reset() {
	*x = UpdateOneCompanyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOneCompanyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneCompanyReq) ProtoMessage() {}

func (x *UpdateOneCompanyReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneCompanyReq.ProtoReflect.Descriptor instead.
func (*UpdateOneCompanyReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{93}
}

func (x *UpdateOneCompanyReq) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *UpdateOneCompanyReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *UpdateOneCompanyReq) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *UpdateOneCompanyReq) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *UpdateOneCompanyReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *UpdateOneCompanyReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UpdateOneCompanyReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *UpdateOneCompanyReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateOneCompanyReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *UpdateOneCompanyReq) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

type UpdateOneCompanyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateOneCompanyResp) Reset() {
	*x = UpdateOneCompanyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOneCompanyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOneCompanyResp) ProtoMessage() {}

func (x *UpdateOneCompanyResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOneCompanyResp.ProtoReflect.Descriptor instead.
func (*UpdateOneCompanyResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{94}
}

func (x *UpdateOneCompanyResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//招采异常订单列表
type ListTpPlanErrReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TpOrderCode  string                 `protobuf:"bytes,1,opt,name=tpOrderCode,proto3" json:"tpOrderCode"`
	MedicineName string                 `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode string                 `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
	StratDate    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=stratDate,proto3" json:"stratDate"`
	EndDate      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=endDate,proto3" json:"endDate"`
	Page         *Page                  `protobuf:"bytes,6,opt,name=page,proto3" json:"page"`
	ManagerId    int64                  `protobuf:"varint,7,opt,name=managerId,proto3" json:"managerId"`
}

func (x *ListTpPlanErrReq) Reset() {
	*x = ListTpPlanErrReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTpPlanErrReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTpPlanErrReq) ProtoMessage() {}

func (x *ListTpPlanErrReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTpPlanErrReq.ProtoReflect.Descriptor instead.
func (*ListTpPlanErrReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{95}
}

func (x *ListTpPlanErrReq) GetTpOrderCode() string {
	if x != nil {
		return x.TpOrderCode
	}
	return ""
}

func (x *ListTpPlanErrReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ListTpPlanErrReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ListTpPlanErrReq) GetStratDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StratDate
	}
	return nil
}

func (x *ListTpPlanErrReq) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ListTpPlanErrReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListTpPlanErrReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ListTpPlanErrResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ListTpPlanErrVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64              `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64              `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListTpPlanErrResp) Reset() {
	*x = ListTpPlanErrResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTpPlanErrResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTpPlanErrResp) ProtoMessage() {}

func (x *ListTpPlanErrResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTpPlanErrResp.ProtoReflect.Descriptor instead.
func (*ListTpPlanErrResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{96}
}

func (x *ListTpPlanErrResp) GetList() []*ListTpPlanErrVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListTpPlanErrResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListTpPlanErrResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTpPlanErrResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListTpPlanErrVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TpSyncShipmentPlanId  int64                  `protobuf:"varint,1,opt,name=tpSyncShipmentPlanId,proto3" json:"tpSyncShipmentPlanId"`
	TpOrderCode           string                 `protobuf:"bytes,2,opt,name=tpOrderCode,proto3" json:"tpOrderCode"`
	TenderPlatformCode    string                 `protobuf:"bytes,3,opt,name=tenderPlatformCode,proto3" json:"tenderPlatformCode"`
	MedicineName          string                 `protobuf:"bytes,4,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string                 `protobuf:"bytes,5,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineSpecification string                 `protobuf:"bytes,6,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	TpShipmentAmount      int64                  `protobuf:"varint,7,opt,name=tpShipmentAmount,proto3" json:"tpShipmentAmount"`
	TpPrice               int64                  `protobuf:"varint,8,opt,name=tpPrice,proto3" json:"tpPrice"`
	CompanyName           string                 `protobuf:"bytes,9,opt,name=companyName,proto3" json:"companyName"`
	MiName                string                 `protobuf:"bytes,10,opt,name=miName,proto3" json:"miName"`
	ErrMsg                string                 `protobuf:"bytes,11,opt,name=errMsg,proto3" json:"errMsg"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=createdAt,proto3" json:"createdAt"`
}

func (x *ListTpPlanErrVo) Reset() {
	*x = ListTpPlanErrVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTpPlanErrVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTpPlanErrVo) ProtoMessage() {}

func (x *ListTpPlanErrVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTpPlanErrVo.ProtoReflect.Descriptor instead.
func (*ListTpPlanErrVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{97}
}

func (x *ListTpPlanErrVo) GetTpSyncShipmentPlanId() int64 {
	if x != nil {
		return x.TpSyncShipmentPlanId
	}
	return 0
}

func (x *ListTpPlanErrVo) GetTpOrderCode() string {
	if x != nil {
		return x.TpOrderCode
	}
	return ""
}

func (x *ListTpPlanErrVo) GetTenderPlatformCode() string {
	if x != nil {
		return x.TenderPlatformCode
	}
	return ""
}

func (x *ListTpPlanErrVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ListTpPlanErrVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ListTpPlanErrVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *ListTpPlanErrVo) GetTpShipmentAmount() int64 {
	if x != nil {
		return x.TpShipmentAmount
	}
	return 0
}

func (x *ListTpPlanErrVo) GetTpPrice() int64 {
	if x != nil {
		return x.TpPrice
	}
	return 0
}

func (x *ListTpPlanErrVo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *ListTpPlanErrVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListTpPlanErrVo) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *ListTpPlanErrVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

//异常招采单处理
type UpdateErrShipmentPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TpShipmentPlanId int64 `protobuf:"varint,1,opt,name=tpShipmentPlanId,proto3" json:"tpShipmentPlanId"`
	ManagerId        int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *UpdateErrShipmentPlanReq) Reset() {
	*x = UpdateErrShipmentPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateErrShipmentPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateErrShipmentPlanReq) ProtoMessage() {}

func (x *UpdateErrShipmentPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateErrShipmentPlanReq.ProtoReflect.Descriptor instead.
func (*UpdateErrShipmentPlanReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{98}
}

func (x *UpdateErrShipmentPlanReq) GetTpShipmentPlanId() int64 {
	if x != nil {
		return x.TpShipmentPlanId
	}
	return 0
}

func (x *UpdateErrShipmentPlanReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type UpdateErrShipmentPlanResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *UpdateErrShipmentPlanResp) Reset() {
	*x = UpdateErrShipmentPlanResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateErrShipmentPlanResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateErrShipmentPlanResp) ProtoMessage() {}

func (x *UpdateErrShipmentPlanResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateErrShipmentPlanResp.ProtoReflect.Descriptor instead.
func (*UpdateErrShipmentPlanResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{99}
}

func (x *UpdateErrShipmentPlanResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

//招采单列表
type ListShipmentPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TpOrderNo    string                 `protobuf:"bytes,1,opt,name=tpOrderNo,proto3" json:"tpOrderNo"`
	ShipmentNo   string                 `protobuf:"bytes,2,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	MedicineName string                 `protobuf:"bytes,3,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode string                 `protobuf:"bytes,4,opt,name=medicineCode,proto3" json:"medicineCode"`
	CompanyCode  string                 `protobuf:"bytes,5,opt,name=companyCode,proto3" json:"companyCode"`
	PlanStatus   string                 `protobuf:"bytes,6,opt,name=planStatus,proto3" json:"planStatus"`
	StratDate    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=stratDate,proto3" json:"stratDate"`
	EndDate      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=endDate,proto3" json:"endDate"`
	Page         *Page                  `protobuf:"bytes,9,opt,name=page,proto3" json:"page"`
	ManagerId    int64                  `protobuf:"varint,10,opt,name=managerId,proto3" json:"managerId"`
	MiId         int64                  `protobuf:"varint,11,opt,name=miId,proto3" json:"miId"`
	CompanyId    int64                  `protobuf:"varint,12,opt,name=companyId,proto3" json:"companyId"`
	MiName       string                 `protobuf:"bytes,13,opt,name=miName,proto3" json:"miName"`
	TpCode       string                 `protobuf:"bytes,14,opt,name=tpCode,proto3" json:"tpCode"`
	CompanyName  string                 `protobuf:"bytes,15,opt,name=companyName,proto3" json:"companyName"`
	MiCode       string                 `protobuf:"bytes,16,opt,name=miCode,proto3" json:"miCode"`
	OrderNo      string                 `protobuf:"bytes,17,opt,name=orderNo,proto3" json:"orderNo"`
	ColumnName   string                 `protobuf:"bytes,18,opt,name=columnName,proto3" json:"columnName"`
	SortType     string                 `protobuf:"bytes,19,opt,name=sortType,proto3" json:"sortType"`
}

func (x *ListShipmentPlanReq) Reset() {
	*x = ListShipmentPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShipmentPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShipmentPlanReq) ProtoMessage() {}

func (x *ListShipmentPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShipmentPlanReq.ProtoReflect.Descriptor instead.
func (*ListShipmentPlanReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{100}
}

func (x *ListShipmentPlanReq) GetTpOrderNo() string {
	if x != nil {
		return x.TpOrderNo
	}
	return ""
}

func (x *ListShipmentPlanReq) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *ListShipmentPlanReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ListShipmentPlanReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ListShipmentPlanReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *ListShipmentPlanReq) GetPlanStatus() string {
	if x != nil {
		return x.PlanStatus
	}
	return ""
}

func (x *ListShipmentPlanReq) GetStratDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StratDate
	}
	return nil
}

func (x *ListShipmentPlanReq) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ListShipmentPlanReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListShipmentPlanReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListShipmentPlanReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *ListShipmentPlanReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ListShipmentPlanReq) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListShipmentPlanReq) GetTpCode() string {
	if x != nil {
		return x.TpCode
	}
	return ""
}

func (x *ListShipmentPlanReq) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *ListShipmentPlanReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ListShipmentPlanReq) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *ListShipmentPlanReq) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *ListShipmentPlanReq) GetSortType() string {
	if x != nil {
		return x.SortType
	}
	return ""
}

type ListShipmentPlanResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ListShipmentPlanrVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                  `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListShipmentPlanResp) Reset() {
	*x = ListShipmentPlanResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShipmentPlanResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShipmentPlanResp) ProtoMessage() {}

func (x *ListShipmentPlanResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShipmentPlanResp.ProtoReflect.Descriptor instead.
func (*ListShipmentPlanResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{101}
}

func (x *ListShipmentPlanResp) GetList() []*ListShipmentPlanrVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListShipmentPlanResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListShipmentPlanResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListShipmentPlanResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListShipmentPlanrVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentPlanId        int64                  `protobuf:"varint,1,opt,name=shipmentPlanId,proto3" json:"shipmentPlanId"`
	TpOrderNo             string                 `protobuf:"bytes,2,opt,name=tpOrderNo,proto3" json:"tpOrderNo"`
	OrderNo               string                 `protobuf:"bytes,3,opt,name=orderNo,proto3" json:"orderNo"`
	InvoiceNo             string                 `protobuf:"bytes,4,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode           string                 `protobuf:"bytes,5,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	TpCode                string                 `protobuf:"bytes,6,opt,name=tpCode,proto3" json:"tpCode"`
	MedicineName          string                 `protobuf:"bytes,7,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string                 `protobuf:"bytes,8,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineSpecification string                 `protobuf:"bytes,9,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	ShipmentPrice         int64                  `protobuf:"varint,10,opt,name=shipmentPrice,proto3" json:"shipmentPrice"`
	ShipmentAmount        int64                  `protobuf:"varint,11,opt,name=shipmentAmount,proto3" json:"shipmentAmount"`
	OrderAmount           int64                  `protobuf:"varint,12,opt,name=orderAmount,proto3" json:"orderAmount"`
	CompanyName           string                 `protobuf:"bytes,13,opt,name=companyName,proto3" json:"companyName"`
	MiName                string                 `protobuf:"bytes,14,opt,name=miName,proto3" json:"miName"`
	TpCreatedAt           *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=tpCreatedAt,proto3" json:"tpCreatedAt"`
	ReceiveAt             *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=receiveAt,proto3" json:"receiveAt"`
	PlanStatus            string                 `protobuf:"bytes,17,opt,name=planStatus,proto3" json:"planStatus"`
	Manufacturer          string                 `protobuf:"bytes,18,opt,name=manufacturer,proto3" json:"manufacturer"`
	TagName               string                 `protobuf:"bytes,19,opt,name=tagName,proto3" json:"tagName"`
	MedicineForm          string                 `protobuf:"bytes,20,opt,name=medicineForm,proto3" json:"medicineForm"`
	MedicineUnit          string                 `protobuf:"bytes,21,opt,name=medicineUnit,proto3" json:"medicineUnit"`
	CalculateRate         int64                  `protobuf:"varint,22,opt,name=calculateRate,proto3" json:"calculateRate"`
	MedicineId            int64                  `protobuf:"varint,23,opt,name=medicineId,proto3" json:"medicineId"`
	ShipmentNo            string                 `protobuf:"bytes,24,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	CompanyCode           string                 `protobuf:"bytes,25,opt,name=companyCode,proto3" json:"companyCode"`
	MiCode                string                 `protobuf:"bytes,26,opt,name=miCode,proto3" json:"miCode"`
	SendDeadline          *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=sendDeadline,proto3" json:"sendDeadline"`
	StartSendAt           *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=startSendAt,proto3" json:"startSendAt"`
	ReceiveDeadline       *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=receiveDeadline,proto3" json:"receiveDeadline"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=createdAt,proto3" json:"createdAt"`
	SentAmount            int64                  `protobuf:"varint,31,opt,name=sentAmount,proto3" json:"sentAmount"`
	ReceivedAmount        int64                  `protobuf:"varint,32,opt,name=receivedAmount,proto3" json:"receivedAmount"`
	ReturnAmount          int64                  `protobuf:"varint,33,opt,name=returnAmount,proto3" json:"returnAmount"`
}

func (x *ListShipmentPlanrVo) Reset() {
	*x = ListShipmentPlanrVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShipmentPlanrVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShipmentPlanrVo) ProtoMessage() {}

func (x *ListShipmentPlanrVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShipmentPlanrVo.ProtoReflect.Descriptor instead.
func (*ListShipmentPlanrVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{102}
}

func (x *ListShipmentPlanrVo) GetShipmentPlanId() int64 {
	if x != nil {
		return x.ShipmentPlanId
	}
	return 0
}

func (x *ListShipmentPlanrVo) GetTpOrderNo() string {
	if x != nil {
		return x.TpOrderNo
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetTpCode() string {
	if x != nil {
		return x.TpCode
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetShipmentPrice() int64 {
	if x != nil {
		return x.ShipmentPrice
	}
	return 0
}

func (x *ListShipmentPlanrVo) GetShipmentAmount() int64 {
	if x != nil {
		return x.ShipmentAmount
	}
	return 0
}

func (x *ListShipmentPlanrVo) GetOrderAmount() int64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *ListShipmentPlanrVo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetTpCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TpCreatedAt
	}
	return nil
}

func (x *ListShipmentPlanrVo) GetReceiveAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveAt
	}
	return nil
}

func (x *ListShipmentPlanrVo) GetPlanStatus() string {
	if x != nil {
		return x.PlanStatus
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetMedicineForm() string {
	if x != nil {
		return x.MedicineForm
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetMedicineUnit() string {
	if x != nil {
		return x.MedicineUnit
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetCalculateRate() int64 {
	if x != nil {
		return x.CalculateRate
	}
	return 0
}

func (x *ListShipmentPlanrVo) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *ListShipmentPlanrVo) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ListShipmentPlanrVo) GetSendDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.SendDeadline
	}
	return nil
}

func (x *ListShipmentPlanrVo) GetStartSendAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartSendAt
	}
	return nil
}

func (x *ListShipmentPlanrVo) GetReceiveDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveDeadline
	}
	return nil
}

func (x *ListShipmentPlanrVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListShipmentPlanrVo) GetSentAmount() int64 {
	if x != nil {
		return x.SentAmount
	}
	return 0
}

func (x *ListShipmentPlanrVo) GetReceivedAmount() int64 {
	if x != nil {
		return x.ReceivedAmount
	}
	return 0
}

func (x *ListShipmentPlanrVo) GetReturnAmount() int64 {
	if x != nil {
		return x.ReturnAmount
	}
	return 0
}

//根据配送单号查询配送单详情
type DetailShipmentOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentNo string `protobuf:"bytes,1,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	ManagerId  int64  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	MiId       int64  `protobuf:"varint,3,opt,name=miId,proto3" json:"miId"`
	ComId      int64  `protobuf:"varint,4,opt,name=comId,proto3" json:"comId"`
}

func (x *DetailShipmentOrderReq) Reset() {
	*x = DetailShipmentOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailShipmentOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailShipmentOrderReq) ProtoMessage() {}

func (x *DetailShipmentOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailShipmentOrderReq.ProtoReflect.Descriptor instead.
func (*DetailShipmentOrderReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{103}
}

func (x *DetailShipmentOrderReq) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *DetailShipmentOrderReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *DetailShipmentOrderReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *DetailShipmentOrderReq) GetComId() int64 {
	if x != nil {
		return x.ComId
	}
	return 0
}

//先返回部分关键字段
type DetailShipmentOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MibId           int64  `protobuf:"varint,1,opt,name=mibId,proto3" json:"mibId"`
	ShipmentOrderId int64  `protobuf:"varint,2,opt,name=shipmentOrderId,proto3" json:"shipmentOrderId"`
	CompanyCode     string `protobuf:"bytes,3,opt,name=companyCode,proto3" json:"companyCode"`
	CompanyName     string `protobuf:"bytes,4,opt,name=companyName,proto3" json:"companyName"`
	ShipmentNo      string `protobuf:"bytes,5,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	ShipmentCode    string `protobuf:"bytes,6,opt,name=shipmentCode,proto3" json:"shipmentCode"`
	ShipmentCompany string `protobuf:"bytes,7,opt,name=shipmentCompany,proto3" json:"shipmentCompany"`
	InvoiceNo       string `protobuf:"bytes,8,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode     string `protobuf:"bytes,9,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	OrderAmount     int64  `protobuf:"varint,10,opt,name=orderAmount,proto3" json:"orderAmount"`
	ShipmentStatus  string `protobuf:"bytes,11,opt,name=shipmentStatus,proto3" json:"shipmentStatus"`
	MiCode          string `protobuf:"bytes,12,opt,name=miCode,proto3" json:"miCode"`
	MiName          string `protobuf:"bytes,13,opt,name=miName,proto3" json:"miName"`
}

func (x *DetailShipmentOrderResp) Reset() {
	*x = DetailShipmentOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailShipmentOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailShipmentOrderResp) ProtoMessage() {}

func (x *DetailShipmentOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailShipmentOrderResp.ProtoReflect.Descriptor instead.
func (*DetailShipmentOrderResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{104}
}

func (x *DetailShipmentOrderResp) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *DetailShipmentOrderResp) GetShipmentOrderId() int64 {
	if x != nil {
		return x.ShipmentOrderId
	}
	return 0
}

func (x *DetailShipmentOrderResp) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *DetailShipmentOrderResp) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *DetailShipmentOrderResp) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *DetailShipmentOrderResp) GetShipmentCode() string {
	if x != nil {
		return x.ShipmentCode
	}
	return ""
}

func (x *DetailShipmentOrderResp) GetShipmentCompany() string {
	if x != nil {
		return x.ShipmentCompany
	}
	return ""
}

func (x *DetailShipmentOrderResp) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *DetailShipmentOrderResp) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *DetailShipmentOrderResp) GetOrderAmount() int64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *DetailShipmentOrderResp) GetShipmentStatus() string {
	if x != nil {
		return x.ShipmentStatus
	}
	return ""
}

func (x *DetailShipmentOrderResp) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *DetailShipmentOrderResp) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

//招采单列表(根据配送编号查询)
type ListShipmentPlanForOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  string  tpOrderCode = 1;
	ShipmentNo string `protobuf:"bytes,1,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	//  string medicineName = 3;
	//  string medicineCode = 4;
	//  string companyCode = 5;
	//  string planStatus = 6;
	//  google.protobuf.Timestamp stratDate = 7;
	//  google.protobuf.Timestamp endDate = 8;
	//  Page page = 9;
	ManagerId int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	MiId      int64 `protobuf:"varint,3,opt,name=miId,proto3" json:"miId"`
	ComId     int64 `protobuf:"varint,4,opt,name=comId,proto3" json:"comId"`
}

func (x *ListShipmentPlanForOrderReq) Reset() {
	*x = ListShipmentPlanForOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShipmentPlanForOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShipmentPlanForOrderReq) ProtoMessage() {}

func (x *ListShipmentPlanForOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShipmentPlanForOrderReq.ProtoReflect.Descriptor instead.
func (*ListShipmentPlanForOrderReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{105}
}

func (x *ListShipmentPlanForOrderReq) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *ListShipmentPlanForOrderReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListShipmentPlanForOrderReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *ListShipmentPlanForOrderReq) GetComId() int64 {
	if x != nil {
		return x.ComId
	}
	return 0
}

type ListShipmentPlanForOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ListShipmentPlanForOrderVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *ListShipmentPlanForOrderResp) Reset() {
	*x = ListShipmentPlanForOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShipmentPlanForOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShipmentPlanForOrderResp) ProtoMessage() {}

func (x *ListShipmentPlanForOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShipmentPlanForOrderResp.ProtoReflect.Descriptor instead.
func (*ListShipmentPlanForOrderResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{106}
}

func (x *ListShipmentPlanForOrderResp) GetList() []*ListShipmentPlanForOrderVo {
	if x != nil {
		return x.List
	}
	return nil
}

type ListShipmentPlanForOrderVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo               string                 `protobuf:"bytes,1,opt,name=orderNo,proto3" json:"orderNo"`
	TpOrderNo             string                 `protobuf:"bytes,2,opt,name=tpOrderNo,proto3" json:"tpOrderNo"`
	TpCode                string                 `protobuf:"bytes,3,opt,name=tpCode,proto3" json:"tpCode"`
	MedicineName          string                 `protobuf:"bytes,4,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string                 `protobuf:"bytes,5,opt,name=medicineCode,proto3" json:"medicineCode"`
	TagName               string                 `protobuf:"bytes,6,opt,name=tagName,proto3" json:"tagName"`
	MedicineSpecification string                 `protobuf:"bytes,7,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	ShipmentAmount        int64                  `protobuf:"varint,8,opt,name=shipmentAmount,proto3" json:"shipmentAmount"`
	OrderAmount           int64                  `protobuf:"varint,9,opt,name=orderAmount,proto3" json:"orderAmount"`
	TpCreatedAt           *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=tpCreatedAt,proto3" json:"tpCreatedAt"`
	MiName                string                 `protobuf:"bytes,11,opt,name=miName,proto3" json:"miName"`
	ReturnStatus          string                 `protobuf:"bytes,12,opt,name=returnStatus,proto3" json:"returnStatus"`
	ReturnNum             int64                  `protobuf:"varint,13,opt,name=returnNum,proto3" json:"returnNum"`
	ReturnTime            *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=returnTime,proto3" json:"returnTime"`
	ReturnApplyAmount     int64                  `protobuf:"varint,15,opt,name=returnApplyAmount,proto3" json:"returnApplyAmount"` // 申请中的退货数量
}

func (x *ListShipmentPlanForOrderVo) Reset() {
	*x = ListShipmentPlanForOrderVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShipmentPlanForOrderVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShipmentPlanForOrderVo) ProtoMessage() {}

func (x *ListShipmentPlanForOrderVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShipmentPlanForOrderVo.ProtoReflect.Descriptor instead.
func (*ListShipmentPlanForOrderVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{107}
}

func (x *ListShipmentPlanForOrderVo) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *ListShipmentPlanForOrderVo) GetTpOrderNo() string {
	if x != nil {
		return x.TpOrderNo
	}
	return ""
}

func (x *ListShipmentPlanForOrderVo) GetTpCode() string {
	if x != nil {
		return x.TpCode
	}
	return ""
}

func (x *ListShipmentPlanForOrderVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ListShipmentPlanForOrderVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ListShipmentPlanForOrderVo) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *ListShipmentPlanForOrderVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *ListShipmentPlanForOrderVo) GetShipmentAmount() int64 {
	if x != nil {
		return x.ShipmentAmount
	}
	return 0
}

func (x *ListShipmentPlanForOrderVo) GetOrderAmount() int64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *ListShipmentPlanForOrderVo) GetTpCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TpCreatedAt
	}
	return nil
}

func (x *ListShipmentPlanForOrderVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListShipmentPlanForOrderVo) GetReturnStatus() string {
	if x != nil {
		return x.ReturnStatus
	}
	return ""
}

func (x *ListShipmentPlanForOrderVo) GetReturnNum() int64 {
	if x != nil {
		return x.ReturnNum
	}
	return 0
}

func (x *ListShipmentPlanForOrderVo) GetReturnTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReturnTime
	}
	return nil
}

func (x *ListShipmentPlanForOrderVo) GetReturnApplyAmount() int64 {
	if x != nil {
		return x.ReturnApplyAmount
	}
	return 0
}

//招采单汇总
type CountShipmentPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startDate,proto3" json:"startDate"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endDate,proto3" json:"endDate"`
	MiId      int64                  `protobuf:"varint,3,opt,name=miId,proto3" json:"miId"`
	CompanyId int64                  `protobuf:"varint,4,opt,name=companyId,proto3" json:"companyId"`
	ManagerId int64                  `protobuf:"varint,5,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CountShipmentPlanReq) Reset() {
	*x = CountShipmentPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountShipmentPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountShipmentPlanReq) ProtoMessage() {}

func (x *CountShipmentPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountShipmentPlanReq.ProtoReflect.Descriptor instead.
func (*CountShipmentPlanReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{108}
}

func (x *CountShipmentPlanReq) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *CountShipmentPlanReq) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *CountShipmentPlanReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *CountShipmentPlanReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *CountShipmentPlanReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CountShipmentPlanResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaitNum     int64 `protobuf:"varint,1,opt,name=waitNum,proto3" json:"waitNum"`
	FailNum     int64 `protobuf:"varint,2,opt,name=failNum,proto3" json:"failNum"`
	CompleteNum int64 `protobuf:"varint,3,opt,name=completeNum,proto3" json:"completeNum"`
}

func (x *CountShipmentPlanResp) Reset() {
	*x = CountShipmentPlanResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountShipmentPlanResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountShipmentPlanResp) ProtoMessage() {}

func (x *CountShipmentPlanResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountShipmentPlanResp.ProtoReflect.Descriptor instead.
func (*CountShipmentPlanResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{109}
}

func (x *CountShipmentPlanResp) GetWaitNum() int64 {
	if x != nil {
		return x.WaitNum
	}
	return 0
}

func (x *CountShipmentPlanResp) GetFailNum() int64 {
	if x != nil {
		return x.FailNum
	}
	return 0
}

func (x *CountShipmentPlanResp) GetCompleteNum() int64 {
	if x != nil {
		return x.CompleteNum
	}
	return 0
}

//配送单创建
type CreateShipmentOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiCode           string                 `protobuf:"bytes,1,opt,name=miCode,proto3" json:"miCode"`
	CompanyCode      string                 `protobuf:"bytes,2,opt,name=companyCode,proto3" json:"companyCode"`
	InvoiceMd5       string                 `protobuf:"bytes,3,opt,name=invoiceMd5,proto3" json:"invoiceMd5"`
	InvoiceUrl       string                 `protobuf:"bytes,4,opt,name=invoiceUrl,proto3" json:"invoiceUrl"`
	InvoiceType      string                 `protobuf:"bytes,5,opt,name=invoiceType,proto3" json:"invoiceType"`
	InvoiceTotal     int64                  `protobuf:"varint,6,opt,name=invoiceTotal,proto3" json:"invoiceTotal"`
	InvoiceTax       int64                  `protobuf:"varint,7,opt,name=invoiceTax,proto3" json:"invoiceTax"`
	InvoiceCheckCode string                 `protobuf:"bytes,8,opt,name=invoiceCheckCode,proto3" json:"invoiceCheckCode"`
	InvoiceNo        string                 `protobuf:"bytes,9,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode      string                 `protobuf:"bytes,10,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	InvoiceDate      *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=invoiceDate,proto3" json:"invoiceDate"`
	SendOutAt        *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=sendOutAt,proto3" json:"sendOutAt"`
	OrderAmount      int64                  `protobuf:"varint,13,opt,name=orderAmount,proto3" json:"orderAmount"`
	ShipmentCode     string                 `protobuf:"bytes,14,opt,name=shipmentCode,proto3" json:"shipmentCode"`
	ShipmentCompany  string                 `protobuf:"bytes,15,opt,name=shipmentCompany,proto3" json:"shipmentCompany"`
	ShipmentPlanIds  []int64                `protobuf:"varint,16,rep,packed,name=shipmentPlanIds,proto3" json:"shipmentPlanIds"`
	ManagerId        int64                  `protobuf:"varint,17,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CreateShipmentOrderReq) Reset() {
	*x = CreateShipmentOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShipmentOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShipmentOrderReq) ProtoMessage() {}

func (x *CreateShipmentOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShipmentOrderReq.ProtoReflect.Descriptor instead.
func (*CreateShipmentOrderReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{110}
}

func (x *CreateShipmentOrderReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *CreateShipmentOrderReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *CreateShipmentOrderReq) GetInvoiceMd5() string {
	if x != nil {
		return x.InvoiceMd5
	}
	return ""
}

func (x *CreateShipmentOrderReq) GetInvoiceUrl() string {
	if x != nil {
		return x.InvoiceUrl
	}
	return ""
}

func (x *CreateShipmentOrderReq) GetInvoiceType() string {
	if x != nil {
		return x.InvoiceType
	}
	return ""
}

func (x *CreateShipmentOrderReq) GetInvoiceTotal() int64 {
	if x != nil {
		return x.InvoiceTotal
	}
	return 0
}

func (x *CreateShipmentOrderReq) GetInvoiceTax() int64 {
	if x != nil {
		return x.InvoiceTax
	}
	return 0
}

func (x *CreateShipmentOrderReq) GetInvoiceCheckCode() string {
	if x != nil {
		return x.InvoiceCheckCode
	}
	return ""
}

func (x *CreateShipmentOrderReq) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *CreateShipmentOrderReq) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *CreateShipmentOrderReq) GetInvoiceDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoiceDate
	}
	return nil
}

func (x *CreateShipmentOrderReq) GetSendOutAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SendOutAt
	}
	return nil
}

func (x *CreateShipmentOrderReq) GetOrderAmount() int64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *CreateShipmentOrderReq) GetShipmentCode() string {
	if x != nil {
		return x.ShipmentCode
	}
	return ""
}

func (x *CreateShipmentOrderReq) GetShipmentCompany() string {
	if x != nil {
		return x.ShipmentCompany
	}
	return ""
}

func (x *CreateShipmentOrderReq) GetShipmentPlanIds() []int64 {
	if x != nil {
		return x.ShipmentPlanIds
	}
	return nil
}

func (x *CreateShipmentOrderReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CreateShipmentOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentNo string `protobuf:"bytes,1,opt,name=shipmentNo,proto3" json:"shipmentNo"`
}

func (x *CreateShipmentOrderResp) Reset() {
	*x = CreateShipmentOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShipmentOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShipmentOrderResp) ProtoMessage() {}

func (x *CreateShipmentOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShipmentOrderResp.ProtoReflect.Descriptor instead.
func (*CreateShipmentOrderResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{111}
}

func (x *CreateShipmentOrderResp) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

//配送单列表
type ListShipmentOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId      int64                  `protobuf:"varint,1,opt,name=companyId,proto3" json:"companyId"`
	MiId           int64                  `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
	ShipmentStatus string                 `protobuf:"bytes,3,opt,name=shipmentStatus,proto3" json:"shipmentStatus"`
	ShipmentNo     string                 `protobuf:"bytes,4,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	InvoiceNo      string                 `protobuf:"bytes,5,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode    string                 `protobuf:"bytes,6,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	ShipmentCode   string                 `protobuf:"bytes,7,opt,name=shipmentCode,proto3" json:"shipmentCode"`
	StartDate      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=startDate,proto3" json:"startDate"`
	EndDate        *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=endDate,proto3" json:"endDate"`
	Page           *Page                  `protobuf:"bytes,10,opt,name=page,proto3" json:"page"`
	ManagerId      int64                  `protobuf:"varint,11,opt,name=managerId,proto3" json:"managerId"`
	//获取在这个收货截止日期在这个日期之前的未送达以及超时送达的订单
	ReceiveDeadline *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=receiveDeadline,proto3" json:"receiveDeadline"`
	MiName          string                 `protobuf:"bytes,13,opt,name=miName,proto3" json:"miName"`
	ComName         string                 `protobuf:"bytes,14,opt,name=comName,proto3" json:"comName"`
}

func (x *ListShipmentOrderReq) Reset() {
	*x = ListShipmentOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShipmentOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShipmentOrderReq) ProtoMessage() {}

func (x *ListShipmentOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShipmentOrderReq.ProtoReflect.Descriptor instead.
func (*ListShipmentOrderReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{112}
}

func (x *ListShipmentOrderReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ListShipmentOrderReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *ListShipmentOrderReq) GetShipmentStatus() string {
	if x != nil {
		return x.ShipmentStatus
	}
	return ""
}

func (x *ListShipmentOrderReq) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *ListShipmentOrderReq) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *ListShipmentOrderReq) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *ListShipmentOrderReq) GetShipmentCode() string {
	if x != nil {
		return x.ShipmentCode
	}
	return ""
}

func (x *ListShipmentOrderReq) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ListShipmentOrderReq) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ListShipmentOrderReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListShipmentOrderReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListShipmentOrderReq) GetReceiveDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveDeadline
	}
	return nil
}

func (x *ListShipmentOrderReq) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListShipmentOrderReq) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

type ListShipmentOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ListShipmentOrderVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                  `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                  `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListShipmentOrderResp) Reset() {
	*x = ListShipmentOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShipmentOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShipmentOrderResp) ProtoMessage() {}

func (x *ListShipmentOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShipmentOrderResp.ProtoReflect.Descriptor instead.
func (*ListShipmentOrderResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{113}
}

func (x *ListShipmentOrderResp) GetList() []*ListShipmentOrderVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListShipmentOrderResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListShipmentOrderResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListShipmentOrderResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListShipmentOrderVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentOrderId int64                  `protobuf:"varint,1,opt,name=shipmentOrderId,proto3" json:"shipmentOrderId"`
	ShipmentNo      string                 `protobuf:"bytes,2,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	InvoiceNo       string                 `protobuf:"bytes,3,opt,name=invoiceNo,proto3" json:"invoiceNo"`
	InvoiceCode     string                 `protobuf:"bytes,4,opt,name=invoiceCode,proto3" json:"invoiceCode"`
	ShipmentCode    string                 `protobuf:"bytes,5,opt,name=shipmentCode,proto3" json:"shipmentCode"`
	MiName          string                 `protobuf:"bytes,6,opt,name=miName,proto3" json:"miName"`
	OrderAmount     int64                  `protobuf:"varint,7,opt,name=orderAmount,proto3" json:"orderAmount"`
	SendOutAt       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=sendOutAt,proto3" json:"sendOutAt"`
	ReceiveDeadline *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=receiveDeadline,proto3" json:"receiveDeadline"`
	ShipmentStatus  string                 `protobuf:"bytes,10,opt,name=shipmentStatus,proto3" json:"shipmentStatus"`
	CompanyName     string                 `protobuf:"bytes,11,opt,name=companyName,proto3" json:"companyName"`
}

func (x *ListShipmentOrderVo) Reset() {
	*x = ListShipmentOrderVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListShipmentOrderVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShipmentOrderVo) ProtoMessage() {}

func (x *ListShipmentOrderVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShipmentOrderVo.ProtoReflect.Descriptor instead.
func (*ListShipmentOrderVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{114}
}

func (x *ListShipmentOrderVo) GetShipmentOrderId() int64 {
	if x != nil {
		return x.ShipmentOrderId
	}
	return 0
}

func (x *ListShipmentOrderVo) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *ListShipmentOrderVo) GetInvoiceNo() string {
	if x != nil {
		return x.InvoiceNo
	}
	return ""
}

func (x *ListShipmentOrderVo) GetInvoiceCode() string {
	if x != nil {
		return x.InvoiceCode
	}
	return ""
}

func (x *ListShipmentOrderVo) GetShipmentCode() string {
	if x != nil {
		return x.ShipmentCode
	}
	return ""
}

func (x *ListShipmentOrderVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListShipmentOrderVo) GetOrderAmount() int64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *ListShipmentOrderVo) GetSendOutAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SendOutAt
	}
	return nil
}

func (x *ListShipmentOrderVo) GetReceiveDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveDeadline
	}
	return nil
}

func (x *ListShipmentOrderVo) GetShipmentStatus() string {
	if x != nil {
		return x.ShipmentStatus
	}
	return ""
}

func (x *ListShipmentOrderVo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

//配送单表头汇总
type CountShipmentOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyCode string                 `protobuf:"bytes,1,opt,name=companyCode,proto3" json:"companyCode"`
	StartDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=startDate,proto3" json:"startDate"`
	EndDate     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=endDate,proto3" json:"endDate"`
	ManagerId   int64                  `protobuf:"varint,4,opt,name=managerId,proto3" json:"managerId"`
}

func (x *CountShipmentOrderReq) Reset() {
	*x = CountShipmentOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountShipmentOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountShipmentOrderReq) ProtoMessage() {}

func (x *CountShipmentOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountShipmentOrderReq.ProtoReflect.Descriptor instead.
func (*CountShipmentOrderReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{115}
}

func (x *CountShipmentOrderReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *CountShipmentOrderReq) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *CountShipmentOrderReq) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *CountShipmentOrderReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type CountShipmentOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentOrderCount int64 `protobuf:"varint,1,opt,name=shipmentOrderCount,proto3" json:"shipmentOrderCount"`
	ShipmentPlanCount  int64 `protobuf:"varint,2,opt,name=shipmentPlanCount,proto3" json:"shipmentPlanCount"`
}

func (x *CountShipmentOrderResp) Reset() {
	*x = CountShipmentOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountShipmentOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountShipmentOrderResp) ProtoMessage() {}

func (x *CountShipmentOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountShipmentOrderResp.ProtoReflect.Descriptor instead.
func (*CountShipmentOrderResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{116}
}

func (x *CountShipmentOrderResp) GetShipmentOrderCount() int64 {
	if x != nil {
		return x.ShipmentOrderCount
	}
	return 0
}

func (x *CountShipmentOrderResp) GetShipmentPlanCount() int64 {
	if x != nil {
		return x.ShipmentPlanCount
	}
	return 0
}

//配送单修改
type ReceiveShipmentOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentNo string `protobuf:"bytes,1,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	MiId       int64  `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
	ManagerId  int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *ReceiveShipmentOrderReq) Reset() {
	*x = ReceiveShipmentOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveShipmentOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveShipmentOrderReq) ProtoMessage() {}

func (x *ReceiveShipmentOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveShipmentOrderReq.ProtoReflect.Descriptor instead.
func (*ReceiveShipmentOrderReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{117}
}

func (x *ReceiveShipmentOrderReq) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *ReceiveShipmentOrderReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *ReceiveShipmentOrderReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ReceiveShipmentOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
}

func (x *ReceiveShipmentOrderResp) Reset() {
	*x = ReceiveShipmentOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveShipmentOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveShipmentOrderResp) ProtoMessage() {}

func (x *ReceiveShipmentOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveShipmentOrderResp.ProtoReflect.Descriptor instead.
func (*ReceiveShipmentOrderResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{118}
}

func (x *ReceiveShipmentOrderResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ReceiveShipmentOrderResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

//根据招采单(配送计划)id查询合同编号
type GetContractByShipmentPlanIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentId int64 `protobuf:"varint,1,opt,name=shipmentId,proto3" json:"shipmentId"`
	ManagerId  int64 `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *GetContractByShipmentPlanIdReq) Reset() {
	*x = GetContractByShipmentPlanIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractByShipmentPlanIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractByShipmentPlanIdReq) ProtoMessage() {}

func (x *GetContractByShipmentPlanIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractByShipmentPlanIdReq.ProtoReflect.Descriptor instead.
func (*GetContractByShipmentPlanIdReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{119}
}

func (x *GetContractByShipmentPlanIdReq) GetShipmentId() int64 {
	if x != nil {
		return x.ShipmentId
	}
	return 0
}

func (x *GetContractByShipmentPlanIdReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type GetContractByShipmentPlanIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId int64  `protobuf:"varint,1,opt,name=contractId,proto3" json:"contractId"`
	ContractNo string `protobuf:"bytes,2,opt,name=contractNo,proto3" json:"contractNo"`
}

func (x *GetContractByShipmentPlanIdResp) Reset() {
	*x = GetContractByShipmentPlanIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractByShipmentPlanIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractByShipmentPlanIdResp) ProtoMessage() {}

func (x *GetContractByShipmentPlanIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractByShipmentPlanIdResp.ProtoReflect.Descriptor instead.
func (*GetContractByShipmentPlanIdResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{120}
}

func (x *GetContractByShipmentPlanIdResp) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *GetContractByShipmentPlanIdResp) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

type InsertConfigsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64           `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	Configs   []*CommonConfig `protobuf:"bytes,2,rep,name=configs,proto3" json:"configs"`
}

func (x *InsertConfigsReq) Reset() {
	*x = InsertConfigsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertConfigsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertConfigsReq) ProtoMessage() {}

func (x *InsertConfigsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertConfigsReq.ProtoReflect.Descriptor instead.
func (*InsertConfigsReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{121}
}

func (x *InsertConfigsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *InsertConfigsReq) GetConfigs() []*CommonConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

type UpdateConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//条件生效顺序 id>key> type 1,2,3
	ConfigId  int64  `protobuf:"varint,2,opt,name=configId,proto3" json:"configId"`
	Key       string `protobuf:"bytes,3,opt,name=key,proto3" json:"key"`
	TypeOne   string `protobuf:"bytes,4,opt,name=typeOne,proto3" json:"typeOne"`
	TypeTwo   string `protobuf:"bytes,5,opt,name=typeTwo,proto3" json:"typeTwo"`
	TypeThree string `protobuf:"bytes,6,opt,name=typeThree,proto3" json:"typeThree"`
	OldValue  string `protobuf:"bytes,7,opt,name=oldValue,proto3" json:"oldValue"`
	Value     string `protobuf:"bytes,8,opt,name=value,proto3" json:"value"`
}

func (x *UpdateConfigReq) Reset() {
	*x = UpdateConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigReq) ProtoMessage() {}

func (x *UpdateConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigReq.ProtoReflect.Descriptor instead.
func (*UpdateConfigReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{122}
}

func (x *UpdateConfigReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *UpdateConfigReq) GetConfigId() int64 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *UpdateConfigReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UpdateConfigReq) GetTypeOne() string {
	if x != nil {
		return x.TypeOne
	}
	return ""
}

func (x *UpdateConfigReq) GetTypeTwo() string {
	if x != nil {
		return x.TypeTwo
	}
	return ""
}

func (x *UpdateConfigReq) GetTypeThree() string {
	if x != nil {
		return x.TypeThree
	}
	return ""
}

func (x *UpdateConfigReq) GetOldValue() string {
	if x != nil {
		return x.OldValue
	}
	return ""
}

func (x *UpdateConfigReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type DeleteConfigsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定要删除的id，id必填
	ConfigIds []int64 `protobuf:"varint,2,rep,packed,name=configIds,proto3" json:"configIds"`
	//以下为限制项目，
	Key       string `protobuf:"bytes,3,opt,name=key,proto3" json:"key"`
	TypeOne   string `protobuf:"bytes,4,opt,name=typeOne,proto3" json:"typeOne"`
	TypeTwo   string `protobuf:"bytes,5,opt,name=typeTwo,proto3" json:"typeTwo"`
	TypeThree string `protobuf:"bytes,6,opt,name=typeThree,proto3" json:"typeThree"`
}

func (x *DeleteConfigsReq) Reset() {
	*x = DeleteConfigsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConfigsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConfigsReq) ProtoMessage() {}

func (x *DeleteConfigsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConfigsReq.ProtoReflect.Descriptor instead.
func (*DeleteConfigsReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{123}
}

func (x *DeleteConfigsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *DeleteConfigsReq) GetConfigIds() []int64 {
	if x != nil {
		return x.ConfigIds
	}
	return nil
}

func (x *DeleteConfigsReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DeleteConfigsReq) GetTypeOne() string {
	if x != nil {
		return x.TypeOne
	}
	return ""
}

func (x *DeleteConfigsReq) GetTypeTwo() string {
	if x != nil {
		return x.TypeTwo
	}
	return ""
}

func (x *DeleteConfigsReq) GetTypeThree() string {
	if x != nil {
		return x.TypeThree
	}
	return ""
}

type GetConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//不指定page默认为20个
	Page      *Page    `protobuf:"bytes,2,opt,name=page,proto3" json:"page"`
	Keys      []string `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys"`
	TypeOne   string   `protobuf:"bytes,4,opt,name=typeOne,proto3" json:"typeOne"`
	TypeTwo   string   `protobuf:"bytes,5,opt,name=typeTwo,proto3" json:"typeTwo"`
	TypeThree string   `protobuf:"bytes,6,opt,name=typeThree,proto3" json:"typeThree"`
	//可以获取该区间正在生效的所有配置
	StartAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=startAt,proto3" json:"startAt"`
	EndAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=endAt,proto3" json:"endAt"`
	//获取在此时间节点生效的配置
	ValidateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=validateTime,proto3" json:"validateTime"`
}

func (x *GetConfigReq) Reset() {
	*x = GetConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigReq) ProtoMessage() {}

func (x *GetConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigReq.ProtoReflect.Descriptor instead.
func (*GetConfigReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{124}
}

func (x *GetConfigReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetConfigReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetConfigReq) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *GetConfigReq) GetTypeOne() string {
	if x != nil {
		return x.TypeOne
	}
	return ""
}

func (x *GetConfigReq) GetTypeTwo() string {
	if x != nil {
		return x.TypeTwo
	}
	return ""
}

func (x *GetConfigReq) GetTypeThree() string {
	if x != nil {
		return x.TypeThree
	}
	return ""
}

func (x *GetConfigReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *GetConfigReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *GetConfigReq) GetValidateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidateTime
	}
	return nil
}

type CommonConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId  int64                  `protobuf:"varint,1,opt,name=configId,proto3" json:"configId"`
	Key       string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key"`
	TypeOne   string                 `protobuf:"bytes,3,opt,name=typeOne,proto3" json:"typeOne"`
	TypeTwo   string                 `protobuf:"bytes,4,opt,name=typeTwo,proto3" json:"typeTwo"`
	TypeThree string                 `protobuf:"bytes,5,opt,name=typeThree,proto3" json:"typeThree"`
	Value     string                 `protobuf:"bytes,6,opt,name=value,proto3" json:"value"`
	StartAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=startAt,proto3" json:"startAt"`
	EndAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=endAt,proto3" json:"endAt"`
	Explain   string                 `protobuf:"bytes,9,opt,name=explain,proto3" json:"explain"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created,proto3" json:"created"`
}

func (x *CommonConfig) Reset() {
	*x = CommonConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonConfig) ProtoMessage() {}

func (x *CommonConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonConfig.ProtoReflect.Descriptor instead.
func (*CommonConfig) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{125}
}

func (x *CommonConfig) GetConfigId() int64 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *CommonConfig) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CommonConfig) GetTypeOne() string {
	if x != nil {
		return x.TypeOne
	}
	return ""
}

func (x *CommonConfig) GetTypeTwo() string {
	if x != nil {
		return x.TypeTwo
	}
	return ""
}

func (x *CommonConfig) GetTypeThree() string {
	if x != nil {
		return x.TypeThree
	}
	return ""
}

func (x *CommonConfig) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CommonConfig) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *CommonConfig) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *CommonConfig) GetExplain() string {
	if x != nil {
		return x.Explain
	}
	return ""
}

func (x *CommonConfig) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type UpdateConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateConfigResp) Reset() {
	*x = UpdateConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigResp) ProtoMessage() {}

func (x *UpdateConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigResp.ProtoReflect.Descriptor instead.
func (*UpdateConfigResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{126}
}

type InsertConfigsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InsertConfigsResp) Reset() {
	*x = InsertConfigsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertConfigsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertConfigsResp) ProtoMessage() {}

func (x *InsertConfigsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertConfigsResp.ProtoReflect.Descriptor instead.
func (*InsertConfigsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{127}
}

type DeleteConfigsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteConfigsResp) Reset() {
	*x = DeleteConfigsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConfigsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConfigsResp) ProtoMessage() {}

func (x *DeleteConfigsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConfigsResp.ProtoReflect.Descriptor instead.
func (*DeleteConfigsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{128}
}

type GetConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CommonConfig `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64           `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64           `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetConfigResp) Reset() {
	*x = GetConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigResp) ProtoMessage() {}

func (x *GetConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigResp.ProtoReflect.Descriptor instead.
func (*GetConfigResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{129}
}

func (x *GetConfigResp) GetList() []*CommonConfig {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetConfigResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetConfigResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetConfigResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

//招采单报表可选聚合维度
type PlanReportGroupCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//直接聚合为单行，使用此项则其他聚合条件不生效
	ByAll bool `protobuf:"varint,1,opt,name=byAll,proto3" json:"byAll"`
	//时间维度聚合,注意对于月报，按日聚合无效，年报类推
	ByMonth bool `protobuf:"varint,2,opt,name=byMonth,proto3" json:"byMonth"`
	ByYear  bool `protobuf:"varint,3,opt,name=byYear,proto3" json:"byYear"`
	ByDay   bool `protobuf:"varint,4,opt,name=byDay,proto3" json:"byDay"`
	//业务维度
	ByMi       bool `protobuf:"varint,5,opt,name=byMi,proto3" json:"byMi"`
	ByCom      bool `protobuf:"varint,6,opt,name=byCom,proto3" json:"byCom"`
	ByMedicine bool `protobuf:"varint,7,opt,name=byMedicine,proto3" json:"byMedicine"`
}

func (x *PlanReportGroupCondition) Reset() {
	*x = PlanReportGroupCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanReportGroupCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanReportGroupCondition) ProtoMessage() {}

func (x *PlanReportGroupCondition) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanReportGroupCondition.ProtoReflect.Descriptor instead.
func (*PlanReportGroupCondition) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{130}
}

func (x *PlanReportGroupCondition) GetByAll() bool {
	if x != nil {
		return x.ByAll
	}
	return false
}

func (x *PlanReportGroupCondition) GetByMonth() bool {
	if x != nil {
		return x.ByMonth
	}
	return false
}

func (x *PlanReportGroupCondition) GetByYear() bool {
	if x != nil {
		return x.ByYear
	}
	return false
}

func (x *PlanReportGroupCondition) GetByDay() bool {
	if x != nil {
		return x.ByDay
	}
	return false
}

func (x *PlanReportGroupCondition) GetByMi() bool {
	if x != nil {
		return x.ByMi
	}
	return false
}

func (x *PlanReportGroupCondition) GetByCom() bool {
	if x != nil {
		return x.ByCom
	}
	return false
}

func (x *PlanReportGroupCondition) GetByMedicine() bool {
	if x != nil {
		return x.ByMedicine
	}
	return false
}

//招采单报表可选数据筛选维度
type PlanReportGetCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//指定获取哪家医院的数据
	MiIds []int64 `protobuf:"varint,1,rep,packed,name=miIds,proto3" json:"miIds"`
	//指定获取哪家配送企业的数据
	ComIds        []int64  `protobuf:"varint,2,rep,packed,name=comIds,proto3" json:"comIds"`
	MedicineCodes []string `protobuf:"bytes,3,rep,name=medicineCodes,proto3" json:"medicineCodes"`
	//用于药品名模糊搜索，只显示5个候选药品
	MedicineName string `protobuf:"bytes,4,opt,name=medicineName,proto3" json:"medicineName"`
	//用于医院名模糊搜索，只显示5个候选医院
	MiName string `protobuf:"bytes,5,opt,name=miName,proto3" json:"miName"`
	//用于企业名模糊搜索，只显示5个候选医院
	ComName string `protobuf:"bytes,6,opt,name=comName,proto3" json:"comName"`
	//按某个标签显示
	TagId int64 `protobuf:"varint,7,opt,name=tagId,proto3" json:"tagId"`
}

func (x *PlanReportGetCondition) Reset() {
	*x = PlanReportGetCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanReportGetCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanReportGetCondition) ProtoMessage() {}

func (x *PlanReportGetCondition) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanReportGetCondition.ProtoReflect.Descriptor instead.
func (*PlanReportGetCondition) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{131}
}

func (x *PlanReportGetCondition) GetMiIds() []int64 {
	if x != nil {
		return x.MiIds
	}
	return nil
}

func (x *PlanReportGetCondition) GetComIds() []int64 {
	if x != nil {
		return x.ComIds
	}
	return nil
}

func (x *PlanReportGetCondition) GetMedicineCodes() []string {
	if x != nil {
		return x.MedicineCodes
	}
	return nil
}

func (x *PlanReportGetCondition) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *PlanReportGetCondition) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *PlanReportGetCondition) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

func (x *PlanReportGetCondition) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

type GetShipmentPlanReportsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId int64 `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	//报表的起止日期必填
	StartAt            *timestamppb.Timestamp    `protobuf:"bytes,3,opt,name=startAt,proto3" json:"startAt"`
	EndAt              *timestamppb.Timestamp    `protobuf:"bytes,4,opt,name=endAt,proto3" json:"endAt"`
	OptionalFilterCond *PlanReportGetCondition   `protobuf:"bytes,5,opt,name=optionalFilterCond,proto3" json:"optionalFilterCond"`
	OptionalGroupCond  *PlanReportGroupCondition `protobuf:"bytes,6,opt,name=optionalGroupCond,proto3" json:"optionalGroupCond"`
	Page               *Page                     `protobuf:"bytes,7,opt,name=page,proto3" json:"page"`
}

func (x *GetShipmentPlanReportsReq) Reset() {
	*x = GetShipmentPlanReportsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentPlanReportsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentPlanReportsReq) ProtoMessage() {}

func (x *GetShipmentPlanReportsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentPlanReportsReq.ProtoReflect.Descriptor instead.
func (*GetShipmentPlanReportsReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{132}
}

func (x *GetShipmentPlanReportsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetShipmentPlanReportsReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetShipmentPlanReportsReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *GetShipmentPlanReportsReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *GetShipmentPlanReportsReq) GetOptionalFilterCond() *PlanReportGetCondition {
	if x != nil {
		return x.OptionalFilterCond
	}
	return nil
}

func (x *GetShipmentPlanReportsReq) GetOptionalGroupCond() *PlanReportGroupCondition {
	if x != nil {
		return x.OptionalGroupCond
	}
	return nil
}

func (x *GetShipmentPlanReportsReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type CompanyReportVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId    int64  `protobuf:"varint,1,opt,name=companyId,proto3" json:"companyId"`
	CompanyName  string `protobuf:"bytes,2,opt,name=companyName,proto3" json:"companyName"`
	CompanyCode  string `protobuf:"bytes,3,opt,name=companyCode,proto3" json:"companyCode"`
	ManagerName  string `protobuf:"bytes,4,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string `protobuf:"bytes,5,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City         string `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone         string `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
}

func (x *CompanyReportVo) Reset() {
	*x = CompanyReportVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyReportVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyReportVo) ProtoMessage() {}

func (x *CompanyReportVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyReportVo.ProtoReflect.Descriptor instead.
func (*CompanyReportVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{133}
}

func (x *CompanyReportVo) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *CompanyReportVo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *CompanyReportVo) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *CompanyReportVo) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *CompanyReportVo) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *CompanyReportVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *CompanyReportVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *CompanyReportVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

type MiReportVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId         int64  `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	MiCode       string `protobuf:"bytes,2,opt,name=miCode,proto3" json:"miCode"`
	MiName       string `protobuf:"bytes,3,opt,name=miName,proto3" json:"miName"`
	MiType       string `protobuf:"bytes,4,opt,name=miType,proto3" json:"miType"`
	ManagerName  string `protobuf:"bytes,5,opt,name=managerName,proto3" json:"managerName"`
	ManagerPhone string `protobuf:"bytes,6,opt,name=managerPhone,proto3" json:"managerPhone"`
	Province     string `protobuf:"bytes,7,opt,name=province,proto3" json:"province"`
	City         string `protobuf:"bytes,8,opt,name=city,proto3" json:"city"`
	Zone         string `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone"`
}

func (x *MiReportVo) Reset() {
	*x = MiReportVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiReportVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiReportVo) ProtoMessage() {}

func (x *MiReportVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiReportVo.ProtoReflect.Descriptor instead.
func (*MiReportVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{134}
}

func (x *MiReportVo) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *MiReportVo) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *MiReportVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *MiReportVo) GetMiType() string {
	if x != nil {
		return x.MiType
	}
	return ""
}

func (x *MiReportVo) GetManagerName() string {
	if x != nil {
		return x.ManagerName
	}
	return ""
}

func (x *MiReportVo) GetManagerPhone() string {
	if x != nil {
		return x.ManagerPhone
	}
	return ""
}

func (x *MiReportVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *MiReportVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *MiReportVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

type MedicineReportVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId            int64  `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	MedicineName          string `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineSpecification string `protobuf:"bytes,4,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	MedicineForm          string `protobuf:"bytes,5,opt,name=medicineForm,proto3" json:"medicineForm"`
	MedicinePackage       string `protobuf:"bytes,6,opt,name=medicinePackage,proto3" json:"medicinePackage"`
	CalculateRate         int64  `protobuf:"varint,7,opt,name=calculateRate,proto3" json:"calculateRate"`
	Manufacturer          string `protobuf:"bytes,8,opt,name=manufacturer,proto3" json:"manufacturer"`
	MedicineUnit          string `protobuf:"bytes,9,opt,name=medicineUnit,proto3" json:"medicineUnit"`
	TagName               string `protobuf:"bytes,10,opt,name=tagName,proto3" json:"tagName"`
}

func (x *MedicineReportVo) Reset() {
	*x = MedicineReportVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineReportVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineReportVo) ProtoMessage() {}

func (x *MedicineReportVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineReportVo.ProtoReflect.Descriptor instead.
func (*MedicineReportVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{135}
}

func (x *MedicineReportVo) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *MedicineReportVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *MedicineReportVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *MedicineReportVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *MedicineReportVo) GetMedicineForm() string {
	if x != nil {
		return x.MedicineForm
	}
	return ""
}

func (x *MedicineReportVo) GetMedicinePackage() string {
	if x != nil {
		return x.MedicinePackage
	}
	return ""
}

func (x *MedicineReportVo) GetCalculateRate() int64 {
	if x != nil {
		return x.CalculateRate
	}
	return 0
}

func (x *MedicineReportVo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *MedicineReportVo) GetMedicineUnit() string {
	if x != nil {
		return x.MedicineUnit
	}
	return ""
}

func (x *MedicineReportVo) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type ShipmentPlanDayReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year  int64 `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month int64 `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	Day   int64 `protobuf:"varint,3,opt,name=day,proto3" json:"day"`
	MibId int64 `protobuf:"varint,4,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo  *CompanyReportVo  `protobuf:"bytes,5,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo       *MiReportVo       `protobuf:"bytes,6,opt,name=miInfo,proto3" json:"miInfo"`
	MedicineInfo *MedicineReportVo `protobuf:"bytes,7,opt,name=medicineInfo,proto3" json:"medicineInfo"`
	//本日配送计划同步金额
	ShipmentPlanAmount           int64                  `protobuf:"varint,8,opt,name=shipmentPlanAmount,proto3" json:"shipmentPlanAmount"`
	ShipmentPlanCount            int64                  `protobuf:"varint,9,opt,name=shipmentPlanCount,proto3" json:"shipmentPlanCount"`
	ShipmentPlanUnitCount        int64                  `protobuf:"varint,10,opt,name=shipmentPlanUnitCount,proto3" json:"shipmentPlanUnitCount"`
	ShipmentPlanReceiveAmount    int64                  `protobuf:"varint,11,opt,name=shipmentPlanReceiveAmount,proto3" json:"shipmentPlanReceiveAmount"`
	ShipmentPlanReceiveCount     int64                  `protobuf:"varint,12,opt,name=shipmentPlanReceiveCount,proto3" json:"shipmentPlanReceiveCount"`
	ShipmentPlanReceiveUnitCount int64                  `protobuf:"varint,13,opt,name=shipmentPlanReceiveUnitCount,proto3" json:"shipmentPlanReceiveUnitCount"`
	ShipmentPlanNotSentAmount    int64                  `protobuf:"varint,14,opt,name=shipmentPlanNotSentAmount,proto3" json:"shipmentPlanNotSentAmount"`
	ShipmentPlanNotSentCount     int64                  `protobuf:"varint,15,opt,name=shipmentPlanNotSentCount,proto3" json:"shipmentPlanNotSentCount"`
	ShipmentPlanNotSentUnitCount int64                  `protobuf:"varint,16,opt,name=shipmentPlanNotSentUnitCount,proto3" json:"shipmentPlanNotSentUnitCount"`
	ReportDate                   *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=reportDate,proto3" json:"reportDate"`
}

func (x *ShipmentPlanDayReport) Reset() {
	*x = ShipmentPlanDayReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentPlanDayReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentPlanDayReport) ProtoMessage() {}

func (x *ShipmentPlanDayReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentPlanDayReport.ProtoReflect.Descriptor instead.
func (*ShipmentPlanDayReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{136}
}

func (x *ShipmentPlanDayReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *ShipmentPlanDayReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *ShipmentPlanDayReport) GetMedicineInfo() *MedicineReportVo {
	if x != nil {
		return x.MedicineInfo
	}
	return nil
}

func (x *ShipmentPlanDayReport) GetShipmentPlanAmount() int64 {
	if x != nil {
		return x.ShipmentPlanAmount
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetShipmentPlanCount() int64 {
	if x != nil {
		return x.ShipmentPlanCount
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetShipmentPlanUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanUnitCount
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetShipmentPlanReceiveAmount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveAmount
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetShipmentPlanReceiveCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveCount
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetShipmentPlanReceiveUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveUnitCount
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetShipmentPlanNotSentAmount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentAmount
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetShipmentPlanNotSentCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentCount
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetShipmentPlanNotSentUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentUnitCount
	}
	return 0
}

func (x *ShipmentPlanDayReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

type ShipmentPlanMonthReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year  int64 `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month int64 `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	MibId int64 `protobuf:"varint,3,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo  *CompanyReportVo  `protobuf:"bytes,4,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo       *MiReportVo       `protobuf:"bytes,5,opt,name=miInfo,proto3" json:"miInfo"`
	MedicineInfo *MedicineReportVo `protobuf:"bytes,6,opt,name=medicineInfo,proto3" json:"medicineInfo"`
	//本日配送计划同步金额
	ShipmentPlanAmount           int64                  `protobuf:"varint,7,opt,name=shipmentPlanAmount,proto3" json:"shipmentPlanAmount"`
	ShipmentPlanCount            int64                  `protobuf:"varint,8,opt,name=shipmentPlanCount,proto3" json:"shipmentPlanCount"`
	ShipmentPlanUnitCount        int64                  `protobuf:"varint,9,opt,name=shipmentPlanUnitCount,proto3" json:"shipmentPlanUnitCount"`
	ShipmentPlanReceiveAmount    int64                  `protobuf:"varint,10,opt,name=shipmentPlanReceiveAmount,proto3" json:"shipmentPlanReceiveAmount"`
	ShipmentPlanReceiveCount     int64                  `protobuf:"varint,11,opt,name=shipmentPlanReceiveCount,proto3" json:"shipmentPlanReceiveCount"`
	ShipmentPlanReceiveUnitCount int64                  `protobuf:"varint,12,opt,name=shipmentPlanReceiveUnitCount,proto3" json:"shipmentPlanReceiveUnitCount"`
	ShipmentPlanNotSentAmount    int64                  `protobuf:"varint,13,opt,name=shipmentPlanNotSentAmount,proto3" json:"shipmentPlanNotSentAmount"`
	ShipmentPlanNotSentCount     int64                  `protobuf:"varint,14,opt,name=shipmentPlanNotSentCount,proto3" json:"shipmentPlanNotSentCount"`
	ShipmentPlanNotSentUnitCount int64                  `protobuf:"varint,15,opt,name=shipmentPlanNotSentUnitCount,proto3" json:"shipmentPlanNotSentUnitCount"`
	ReportDate                   *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=reportDate,proto3" json:"reportDate"`
}

func (x *ShipmentPlanMonthReport) Reset() {
	*x = ShipmentPlanMonthReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentPlanMonthReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentPlanMonthReport) ProtoMessage() {}

func (x *ShipmentPlanMonthReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentPlanMonthReport.ProtoReflect.Descriptor instead.
func (*ShipmentPlanMonthReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{137}
}

func (x *ShipmentPlanMonthReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *ShipmentPlanMonthReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *ShipmentPlanMonthReport) GetMedicineInfo() *MedicineReportVo {
	if x != nil {
		return x.MedicineInfo
	}
	return nil
}

func (x *ShipmentPlanMonthReport) GetShipmentPlanAmount() int64 {
	if x != nil {
		return x.ShipmentPlanAmount
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetShipmentPlanCount() int64 {
	if x != nil {
		return x.ShipmentPlanCount
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetShipmentPlanUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanUnitCount
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetShipmentPlanReceiveAmount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveAmount
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetShipmentPlanReceiveCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveCount
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetShipmentPlanReceiveUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveUnitCount
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetShipmentPlanNotSentAmount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentAmount
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetShipmentPlanNotSentCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentCount
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetShipmentPlanNotSentUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentUnitCount
	}
	return 0
}

func (x *ShipmentPlanMonthReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

type ShipmentPlanYearReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year  int64 `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	MibId int64 `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo  *CompanyReportVo  `protobuf:"bytes,3,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo       *MiReportVo       `protobuf:"bytes,4,opt,name=miInfo,proto3" json:"miInfo"`
	MedicineInfo *MedicineReportVo `protobuf:"bytes,5,opt,name=medicineInfo,proto3" json:"medicineInfo"`
	//本日配送计划同步金额
	ShipmentPlanAmount           int64                  `protobuf:"varint,6,opt,name=shipmentPlanAmount,proto3" json:"shipmentPlanAmount"`
	ShipmentPlanCount            int64                  `protobuf:"varint,7,opt,name=shipmentPlanCount,proto3" json:"shipmentPlanCount"`
	ShipmentPlanUnitCount        int64                  `protobuf:"varint,8,opt,name=shipmentPlanUnitCount,proto3" json:"shipmentPlanUnitCount"`
	ShipmentPlanReceiveAmount    int64                  `protobuf:"varint,9,opt,name=shipmentPlanReceiveAmount,proto3" json:"shipmentPlanReceiveAmount"`
	ShipmentPlanReceiveCount     int64                  `protobuf:"varint,10,opt,name=shipmentPlanReceiveCount,proto3" json:"shipmentPlanReceiveCount"`
	ShipmentPlanReceiveUnitCount int64                  `protobuf:"varint,11,opt,name=shipmentPlanReceiveUnitCount,proto3" json:"shipmentPlanReceiveUnitCount"`
	ShipmentPlanNotSentAmount    int64                  `protobuf:"varint,12,opt,name=shipmentPlanNotSentAmount,proto3" json:"shipmentPlanNotSentAmount"`
	ShipmentPlanNotSentCount     int64                  `protobuf:"varint,13,opt,name=shipmentPlanNotSentCount,proto3" json:"shipmentPlanNotSentCount"`
	ShipmentPlanNotSentUnitCount int64                  `protobuf:"varint,14,opt,name=shipmentPlanNotSentUnitCount,proto3" json:"shipmentPlanNotSentUnitCount"`
	ReportDate                   *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=reportDate,proto3" json:"reportDate"`
}

func (x *ShipmentPlanYearReport) Reset() {
	*x = ShipmentPlanYearReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentPlanYearReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentPlanYearReport) ProtoMessage() {}

func (x *ShipmentPlanYearReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentPlanYearReport.ProtoReflect.Descriptor instead.
func (*ShipmentPlanYearReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{138}
}

func (x *ShipmentPlanYearReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *ShipmentPlanYearReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *ShipmentPlanYearReport) GetMedicineInfo() *MedicineReportVo {
	if x != nil {
		return x.MedicineInfo
	}
	return nil
}

func (x *ShipmentPlanYearReport) GetShipmentPlanAmount() int64 {
	if x != nil {
		return x.ShipmentPlanAmount
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetShipmentPlanCount() int64 {
	if x != nil {
		return x.ShipmentPlanCount
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetShipmentPlanUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanUnitCount
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetShipmentPlanReceiveAmount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveAmount
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetShipmentPlanReceiveCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveCount
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetShipmentPlanReceiveUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveUnitCount
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetShipmentPlanNotSentAmount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentAmount
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetShipmentPlanNotSentCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentCount
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetShipmentPlanNotSentUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentUnitCount
	}
	return 0
}

func (x *ShipmentPlanYearReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

type GetShipmentPlanDayReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentPlanDayReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                    `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                    `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                    `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentPlanDayReportsResp) Reset() {
	*x = GetShipmentPlanDayReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentPlanDayReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentPlanDayReportsResp) ProtoMessage() {}

func (x *GetShipmentPlanDayReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentPlanDayReportsResp.ProtoReflect.Descriptor instead.
func (*GetShipmentPlanDayReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{139}
}

func (x *GetShipmentPlanDayReportsResp) GetList() []*ShipmentPlanDayReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentPlanDayReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentPlanDayReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentPlanDayReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetShipmentPlanMonthReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentPlanMonthReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                      `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                      `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                      `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentPlanMonthReportsResp) Reset() {
	*x = GetShipmentPlanMonthReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentPlanMonthReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentPlanMonthReportsResp) ProtoMessage() {}

func (x *GetShipmentPlanMonthReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentPlanMonthReportsResp.ProtoReflect.Descriptor instead.
func (*GetShipmentPlanMonthReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{140}
}

func (x *GetShipmentPlanMonthReportsResp) GetList() []*ShipmentPlanMonthReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentPlanMonthReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentPlanMonthReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentPlanMonthReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetShipmentPlanYearReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentPlanYearReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                     `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                     `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                     `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentPlanYearReportsResp) Reset() {
	*x = GetShipmentPlanYearReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentPlanYearReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentPlanYearReportsResp) ProtoMessage() {}

func (x *GetShipmentPlanYearReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentPlanYearReportsResp.ProtoReflect.Descriptor instead.
func (*GetShipmentPlanYearReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{141}
}

func (x *GetShipmentPlanYearReportsResp) GetList() []*ShipmentPlanYearReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentPlanYearReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentPlanYearReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentPlanYearReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

//配送单报表可选聚合维度
type OrderReportGroupCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//直接聚合为单行，使用此项则其他聚合条件不生效
	ByAll bool `protobuf:"varint,1,opt,name=byAll,proto3" json:"byAll"`
	//时间维度聚合,注意对于月报，按日聚合无效，年报类推
	ByMonth bool `protobuf:"varint,2,opt,name=byMonth,proto3" json:"byMonth"`
	ByYear  bool `protobuf:"varint,3,opt,name=byYear,proto3" json:"byYear"`
	ByDay   bool `protobuf:"varint,4,opt,name=byDay,proto3" json:"byDay"`
	//业务维度
	ByMi  bool `protobuf:"varint,5,opt,name=byMi,proto3" json:"byMi"`
	ByCom bool `protobuf:"varint,6,opt,name=byCom,proto3" json:"byCom"`
}

func (x *OrderReportGroupCondition) Reset() {
	*x = OrderReportGroupCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderReportGroupCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderReportGroupCondition) ProtoMessage() {}

func (x *OrderReportGroupCondition) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderReportGroupCondition.ProtoReflect.Descriptor instead.
func (*OrderReportGroupCondition) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{142}
}

func (x *OrderReportGroupCondition) GetByAll() bool {
	if x != nil {
		return x.ByAll
	}
	return false
}

func (x *OrderReportGroupCondition) GetByMonth() bool {
	if x != nil {
		return x.ByMonth
	}
	return false
}

func (x *OrderReportGroupCondition) GetByYear() bool {
	if x != nil {
		return x.ByYear
	}
	return false
}

func (x *OrderReportGroupCondition) GetByDay() bool {
	if x != nil {
		return x.ByDay
	}
	return false
}

func (x *OrderReportGroupCondition) GetByMi() bool {
	if x != nil {
		return x.ByMi
	}
	return false
}

func (x *OrderReportGroupCondition) GetByCom() bool {
	if x != nil {
		return x.ByCom
	}
	return false
}

//配送单报表可选数据筛选维度
type OrderReportGetCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//指定获取哪家医院的数据
	MiIds []int64 `protobuf:"varint,1,rep,packed,name=miIds,proto3" json:"miIds"`
	//指定获取哪家配送企业的数据
	ComIds []int64 `protobuf:"varint,2,rep,packed,name=comIds,proto3" json:"comIds"`
	//用于医院名模糊搜索，只显示5个候选医院
	MiName string `protobuf:"bytes,3,opt,name=miName,proto3" json:"miName"`
	//用于配送企业名模糊搜索，只显示5个候选
	ComName string `protobuf:"bytes,4,opt,name=comName,proto3" json:"comName"`
}

func (x *OrderReportGetCondition) Reset() {
	*x = OrderReportGetCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderReportGetCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderReportGetCondition) ProtoMessage() {}

func (x *OrderReportGetCondition) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderReportGetCondition.ProtoReflect.Descriptor instead.
func (*OrderReportGetCondition) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{143}
}

func (x *OrderReportGetCondition) GetMiIds() []int64 {
	if x != nil {
		return x.MiIds
	}
	return nil
}

func (x *OrderReportGetCondition) GetComIds() []int64 {
	if x != nil {
		return x.ComIds
	}
	return nil
}

func (x *OrderReportGetCondition) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *OrderReportGetCondition) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

type GetShipmentOrderReportsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId int64 `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	//报表的起止日期必填
	StartAt            *timestamppb.Timestamp     `protobuf:"bytes,3,opt,name=startAt,proto3" json:"startAt"`
	EndAt              *timestamppb.Timestamp     `protobuf:"bytes,4,opt,name=endAt,proto3" json:"endAt"`
	OptionalFilterCond *OrderReportGetCondition   `protobuf:"bytes,5,opt,name=optionalFilterCond,proto3" json:"optionalFilterCond"`
	OptionalGroupCond  *OrderReportGroupCondition `protobuf:"bytes,6,opt,name=optionalGroupCond,proto3" json:"optionalGroupCond"`
	Page               *Page                      `protobuf:"bytes,7,opt,name=page,proto3" json:"page"`
}

func (x *GetShipmentOrderReportsReq) Reset() {
	*x = GetShipmentOrderReportsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentOrderReportsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentOrderReportsReq) ProtoMessage() {}

func (x *GetShipmentOrderReportsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentOrderReportsReq.ProtoReflect.Descriptor instead.
func (*GetShipmentOrderReportsReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{144}
}

func (x *GetShipmentOrderReportsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetShipmentOrderReportsReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetShipmentOrderReportsReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *GetShipmentOrderReportsReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *GetShipmentOrderReportsReq) GetOptionalFilterCond() *OrderReportGetCondition {
	if x != nil {
		return x.OptionalFilterCond
	}
	return nil
}

func (x *GetShipmentOrderReportsReq) GetOptionalGroupCond() *OrderReportGroupCondition {
	if x != nil {
		return x.OptionalGroupCond
	}
	return nil
}

func (x *GetShipmentOrderReportsReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ShipmentOrderDayReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year  int64 `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month int64 `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	Day   int64 `protobuf:"varint,3,opt,name=day,proto3" json:"day"`
	MibId int64 `protobuf:"varint,4,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo                   *CompanyReportVo       `protobuf:"bytes,5,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo                        *MiReportVo            `protobuf:"bytes,6,opt,name=miInfo,proto3" json:"miInfo"`
	ShipmentOrderPaidAmount       int64                  `protobuf:"varint,7,opt,name=shipmentOrderPaidAmount,proto3" json:"shipmentOrderPaidAmount"`
	ShipmentOrderPaidCount        int64                  `protobuf:"varint,8,opt,name=shipmentOrderPaidCount,proto3" json:"shipmentOrderPaidCount"`
	ShipmentOrderSpecialPayAmount int64                  `protobuf:"varint,9,opt,name=shipmentOrderSpecialPayAmount,proto3" json:"shipmentOrderSpecialPayAmount"`
	ShipmentOrderSpecialPayCount  int64                  `protobuf:"varint,10,opt,name=shipmentOrderSpecialPayCount,proto3" json:"shipmentOrderSpecialPayCount"`
	ShipmentOrderNormalPayAmount  int64                  `protobuf:"varint,11,opt,name=shipmentOrderNormalPayAmount,proto3" json:"shipmentOrderNormalPayAmount"`
	ShipmentOrderNormalPayCount   int64                  `protobuf:"varint,12,opt,name=shipmentOrderNormalPayCount,proto3" json:"shipmentOrderNormalPayCount"`
	ShipmentOrderReceiveAmount    int64                  `protobuf:"varint,13,opt,name=shipmentOrderReceiveAmount,proto3" json:"shipmentOrderReceiveAmount"`
	ShipmentOrderReceiveCount     int64                  `protobuf:"varint,14,opt,name=shipmentOrderReceiveCount,proto3" json:"shipmentOrderReceiveCount"`
	ShipmentOrderTimeoutAmount    int64                  `protobuf:"varint,15,opt,name=shipmentOrderTimeoutAmount,proto3" json:"shipmentOrderTimeoutAmount"`
	ShipmentOrderTimeoutCount     int64                  `protobuf:"varint,16,opt,name=shipmentOrderTimeoutCount,proto3" json:"shipmentOrderTimeoutCount"`
	ReportDate                    *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=reportDate,proto3" json:"reportDate"`
}

func (x *ShipmentOrderDayReport) Reset() {
	*x = ShipmentOrderDayReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentOrderDayReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentOrderDayReport) ProtoMessage() {}

func (x *ShipmentOrderDayReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentOrderDayReport.ProtoReflect.Descriptor instead.
func (*ShipmentOrderDayReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{145}
}

func (x *ShipmentOrderDayReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *ShipmentOrderDayReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *ShipmentOrderDayReport) GetShipmentOrderPaidAmount() int64 {
	if x != nil {
		return x.ShipmentOrderPaidAmount
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetShipmentOrderPaidCount() int64 {
	if x != nil {
		return x.ShipmentOrderPaidCount
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetShipmentOrderSpecialPayAmount() int64 {
	if x != nil {
		return x.ShipmentOrderSpecialPayAmount
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetShipmentOrderSpecialPayCount() int64 {
	if x != nil {
		return x.ShipmentOrderSpecialPayCount
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetShipmentOrderNormalPayAmount() int64 {
	if x != nil {
		return x.ShipmentOrderNormalPayAmount
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetShipmentOrderNormalPayCount() int64 {
	if x != nil {
		return x.ShipmentOrderNormalPayCount
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetShipmentOrderReceiveAmount() int64 {
	if x != nil {
		return x.ShipmentOrderReceiveAmount
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetShipmentOrderReceiveCount() int64 {
	if x != nil {
		return x.ShipmentOrderReceiveCount
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetShipmentOrderTimeoutAmount() int64 {
	if x != nil {
		return x.ShipmentOrderTimeoutAmount
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetShipmentOrderTimeoutCount() int64 {
	if x != nil {
		return x.ShipmentOrderTimeoutCount
	}
	return 0
}

func (x *ShipmentOrderDayReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

type ShipmentOrderMonthReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year       int64                  `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month      int64                  `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	ReportDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=reportDate,proto3" json:"reportDate"`
	MibId      int64                  `protobuf:"varint,4,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo                   *CompanyReportVo `protobuf:"bytes,5,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo                        *MiReportVo      `protobuf:"bytes,6,opt,name=miInfo,proto3" json:"miInfo"`
	ShipmentOrderPaidAmount       int64            `protobuf:"varint,7,opt,name=shipmentOrderPaidAmount,proto3" json:"shipmentOrderPaidAmount"`
	ShipmentOrderPaidCount        int64            `protobuf:"varint,8,opt,name=shipmentOrderPaidCount,proto3" json:"shipmentOrderPaidCount"`
	ShipmentOrderSpecialPayAmount int64            `protobuf:"varint,9,opt,name=shipmentOrderSpecialPayAmount,proto3" json:"shipmentOrderSpecialPayAmount"`
	ShipmentOrderSpecialPayCount  int64            `protobuf:"varint,10,opt,name=shipmentOrderSpecialPayCount,proto3" json:"shipmentOrderSpecialPayCount"`
	ShipmentOrderNormalPayAmount  int64            `protobuf:"varint,11,opt,name=shipmentOrderNormalPayAmount,proto3" json:"shipmentOrderNormalPayAmount"`
	ShipmentOrderNormalPayCount   int64            `protobuf:"varint,12,opt,name=shipmentOrderNormalPayCount,proto3" json:"shipmentOrderNormalPayCount"`
	ShipmentOrderReceiveAmount    int64            `protobuf:"varint,13,opt,name=shipmentOrderReceiveAmount,proto3" json:"shipmentOrderReceiveAmount"`
	ShipmentOrderReceiveCount     int64            `protobuf:"varint,14,opt,name=shipmentOrderReceiveCount,proto3" json:"shipmentOrderReceiveCount"`
	ShipmentOrderTimeoutAmount    int64            `protobuf:"varint,15,opt,name=shipmentOrderTimeoutAmount,proto3" json:"shipmentOrderTimeoutAmount"`
	ShipmentOrderTimeoutCount     int64            `protobuf:"varint,16,opt,name=shipmentOrderTimeoutCount,proto3" json:"shipmentOrderTimeoutCount"`
}

func (x *ShipmentOrderMonthReport) Reset() {
	*x = ShipmentOrderMonthReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentOrderMonthReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentOrderMonthReport) ProtoMessage() {}

func (x *ShipmentOrderMonthReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentOrderMonthReport.ProtoReflect.Descriptor instead.
func (*ShipmentOrderMonthReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{146}
}

func (x *ShipmentOrderMonthReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

func (x *ShipmentOrderMonthReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *ShipmentOrderMonthReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *ShipmentOrderMonthReport) GetShipmentOrderPaidAmount() int64 {
	if x != nil {
		return x.ShipmentOrderPaidAmount
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetShipmentOrderPaidCount() int64 {
	if x != nil {
		return x.ShipmentOrderPaidCount
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetShipmentOrderSpecialPayAmount() int64 {
	if x != nil {
		return x.ShipmentOrderSpecialPayAmount
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetShipmentOrderSpecialPayCount() int64 {
	if x != nil {
		return x.ShipmentOrderSpecialPayCount
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetShipmentOrderNormalPayAmount() int64 {
	if x != nil {
		return x.ShipmentOrderNormalPayAmount
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetShipmentOrderNormalPayCount() int64 {
	if x != nil {
		return x.ShipmentOrderNormalPayCount
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetShipmentOrderReceiveAmount() int64 {
	if x != nil {
		return x.ShipmentOrderReceiveAmount
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetShipmentOrderReceiveCount() int64 {
	if x != nil {
		return x.ShipmentOrderReceiveCount
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetShipmentOrderTimeoutAmount() int64 {
	if x != nil {
		return x.ShipmentOrderTimeoutAmount
	}
	return 0
}

func (x *ShipmentOrderMonthReport) GetShipmentOrderTimeoutCount() int64 {
	if x != nil {
		return x.ShipmentOrderTimeoutCount
	}
	return 0
}

type ShipmentOrderYearReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year       int64                  `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	ReportDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=reportDate,proto3" json:"reportDate"`
	MibId      int64                  `protobuf:"varint,3,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo                   *CompanyReportVo `protobuf:"bytes,4,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo                        *MiReportVo      `protobuf:"bytes,5,opt,name=miInfo,proto3" json:"miInfo"`
	ShipmentOrderPaidAmount       int64            `protobuf:"varint,6,opt,name=shipmentOrderPaidAmount,proto3" json:"shipmentOrderPaidAmount"`
	ShipmentOrderPaidCount        int64            `protobuf:"varint,7,opt,name=shipmentOrderPaidCount,proto3" json:"shipmentOrderPaidCount"`
	ShipmentOrderSpecialPayAmount int64            `protobuf:"varint,8,opt,name=shipmentOrderSpecialPayAmount,proto3" json:"shipmentOrderSpecialPayAmount"`
	ShipmentOrderSpecialPayCount  int64            `protobuf:"varint,9,opt,name=shipmentOrderSpecialPayCount,proto3" json:"shipmentOrderSpecialPayCount"`
	ShipmentOrderNormalPayAmount  int64            `protobuf:"varint,10,opt,name=shipmentOrderNormalPayAmount,proto3" json:"shipmentOrderNormalPayAmount"`
	ShipmentOrderNormalPayCount   int64            `protobuf:"varint,11,opt,name=shipmentOrderNormalPayCount,proto3" json:"shipmentOrderNormalPayCount"`
	ShipmentOrderReceiveAmount    int64            `protobuf:"varint,12,opt,name=shipmentOrderReceiveAmount,proto3" json:"shipmentOrderReceiveAmount"`
	ShipmentOrderReceiveCount     int64            `protobuf:"varint,13,opt,name=shipmentOrderReceiveCount,proto3" json:"shipmentOrderReceiveCount"`
	ShipmentOrderTimeoutAmount    int64            `protobuf:"varint,14,opt,name=shipmentOrderTimeoutAmount,proto3" json:"shipmentOrderTimeoutAmount"`
	ShipmentOrderTimeoutCount     int64            `protobuf:"varint,15,opt,name=shipmentOrderTimeoutCount,proto3" json:"shipmentOrderTimeoutCount"`
}

func (x *ShipmentOrderYearReport) Reset() {
	*x = ShipmentOrderYearReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentOrderYearReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentOrderYearReport) ProtoMessage() {}

func (x *ShipmentOrderYearReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentOrderYearReport.ProtoReflect.Descriptor instead.
func (*ShipmentOrderYearReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{147}
}

func (x *ShipmentOrderYearReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

func (x *ShipmentOrderYearReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *ShipmentOrderYearReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *ShipmentOrderYearReport) GetShipmentOrderPaidAmount() int64 {
	if x != nil {
		return x.ShipmentOrderPaidAmount
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetShipmentOrderPaidCount() int64 {
	if x != nil {
		return x.ShipmentOrderPaidCount
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetShipmentOrderSpecialPayAmount() int64 {
	if x != nil {
		return x.ShipmentOrderSpecialPayAmount
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetShipmentOrderSpecialPayCount() int64 {
	if x != nil {
		return x.ShipmentOrderSpecialPayCount
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetShipmentOrderNormalPayAmount() int64 {
	if x != nil {
		return x.ShipmentOrderNormalPayAmount
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetShipmentOrderNormalPayCount() int64 {
	if x != nil {
		return x.ShipmentOrderNormalPayCount
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetShipmentOrderReceiveAmount() int64 {
	if x != nil {
		return x.ShipmentOrderReceiveAmount
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetShipmentOrderReceiveCount() int64 {
	if x != nil {
		return x.ShipmentOrderReceiveCount
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetShipmentOrderTimeoutAmount() int64 {
	if x != nil {
		return x.ShipmentOrderTimeoutAmount
	}
	return 0
}

func (x *ShipmentOrderYearReport) GetShipmentOrderTimeoutCount() int64 {
	if x != nil {
		return x.ShipmentOrderTimeoutCount
	}
	return 0
}

type GetShipmentOrderDayReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentOrderDayReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                     `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                     `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                     `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentOrderDayReportsResp) Reset() {
	*x = GetShipmentOrderDayReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentOrderDayReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentOrderDayReportsResp) ProtoMessage() {}

func (x *GetShipmentOrderDayReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentOrderDayReportsResp.ProtoReflect.Descriptor instead.
func (*GetShipmentOrderDayReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{148}
}

func (x *GetShipmentOrderDayReportsResp) GetList() []*ShipmentOrderDayReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentOrderDayReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentOrderDayReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentOrderDayReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetShipmentOrderMonthReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentOrderMonthReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                       `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                       `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                       `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentOrderMonthReportsResp) Reset() {
	*x = GetShipmentOrderMonthReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentOrderMonthReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentOrderMonthReportsResp) ProtoMessage() {}

func (x *GetShipmentOrderMonthReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentOrderMonthReportsResp.ProtoReflect.Descriptor instead.
func (*GetShipmentOrderMonthReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{149}
}

func (x *GetShipmentOrderMonthReportsResp) GetList() []*ShipmentOrderMonthReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentOrderMonthReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentOrderMonthReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentOrderMonthReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetShipmentOrderYearReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentOrderYearReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                      `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                      `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                      `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentOrderYearReportsResp) Reset() {
	*x = GetShipmentOrderYearReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentOrderYearReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentOrderYearReportsResp) ProtoMessage() {}

func (x *GetShipmentOrderYearReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentOrderYearReportsResp.ProtoReflect.Descriptor instead.
func (*GetShipmentOrderYearReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{150}
}

func (x *GetShipmentOrderYearReportsResp) GetList() []*ShipmentOrderYearReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentOrderYearReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentOrderYearReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentOrderYearReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

//配送单报表可选聚合维度
type FactoringReportGroupCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//直接聚合为单行，使用此项则其他聚合条件不生效
	ByAll bool `protobuf:"varint,1,opt,name=byAll,proto3" json:"byAll"`
	//时间维度聚合,注意对于月报，按日聚合无效，年报类推
	ByMonth bool `protobuf:"varint,2,opt,name=byMonth,proto3" json:"byMonth"`
	ByYear  bool `protobuf:"varint,3,opt,name=byYear,proto3" json:"byYear"`
	ByDay   bool `protobuf:"varint,4,opt,name=byDay,proto3" json:"byDay"`
	//业务维度
	ByMi  bool `protobuf:"varint,5,opt,name=byMi,proto3" json:"byMi"`
	ByCom bool `protobuf:"varint,6,opt,name=byCom,proto3" json:"byCom"`
}

func (x *FactoringReportGroupCondition) Reset() {
	*x = FactoringReportGroupCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoringReportGroupCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoringReportGroupCondition) ProtoMessage() {}

func (x *FactoringReportGroupCondition) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoringReportGroupCondition.ProtoReflect.Descriptor instead.
func (*FactoringReportGroupCondition) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{151}
}

func (x *FactoringReportGroupCondition) GetByAll() bool {
	if x != nil {
		return x.ByAll
	}
	return false
}

func (x *FactoringReportGroupCondition) GetByMonth() bool {
	if x != nil {
		return x.ByMonth
	}
	return false
}

func (x *FactoringReportGroupCondition) GetByYear() bool {
	if x != nil {
		return x.ByYear
	}
	return false
}

func (x *FactoringReportGroupCondition) GetByDay() bool {
	if x != nil {
		return x.ByDay
	}
	return false
}

func (x *FactoringReportGroupCondition) GetByMi() bool {
	if x != nil {
		return x.ByMi
	}
	return false
}

func (x *FactoringReportGroupCondition) GetByCom() bool {
	if x != nil {
		return x.ByCom
	}
	return false
}

//配送单报表可选数据筛选维度
type FactoringReportGetCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//指定获取哪家医院的数据
	MiIds []int64 `protobuf:"varint,1,rep,packed,name=miIds,proto3" json:"miIds"`
	//指定获取哪家配送企业的数据
	ComIds []int64 `protobuf:"varint,2,rep,packed,name=comIds,proto3" json:"comIds"`
	//用于医院名模糊搜索，只显示5个候选医院
	MiName string `protobuf:"bytes,3,opt,name=miName,proto3" json:"miName"`
	//用于配送企业名模糊搜索，只显示5个候选
	ComName string `protobuf:"bytes,4,opt,name=comName,proto3" json:"comName"`
}

func (x *FactoringReportGetCondition) Reset() {
	*x = FactoringReportGetCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoringReportGetCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoringReportGetCondition) ProtoMessage() {}

func (x *FactoringReportGetCondition) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoringReportGetCondition.ProtoReflect.Descriptor instead.
func (*FactoringReportGetCondition) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{152}
}

func (x *FactoringReportGetCondition) GetMiIds() []int64 {
	if x != nil {
		return x.MiIds
	}
	return nil
}

func (x *FactoringReportGetCondition) GetComIds() []int64 {
	if x != nil {
		return x.ComIds
	}
	return nil
}

func (x *FactoringReportGetCondition) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *FactoringReportGetCondition) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

type GetFactoringOrderReportsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId int64 `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	//报表的起止日期必填
	StartAt            *timestamppb.Timestamp         `protobuf:"bytes,3,opt,name=startAt,proto3" json:"startAt"`
	EndAt              *timestamppb.Timestamp         `protobuf:"bytes,4,opt,name=endAt,proto3" json:"endAt"`
	OptionalFilterCond *FactoringReportGetCondition   `protobuf:"bytes,5,opt,name=optionalFilterCond,proto3" json:"optionalFilterCond"`
	OptionalGroupCond  *FactoringReportGroupCondition `protobuf:"bytes,6,opt,name=optionalGroupCond,proto3" json:"optionalGroupCond"`
	Page               *Page                          `protobuf:"bytes,7,opt,name=page,proto3" json:"page"`
}

func (x *GetFactoringOrderReportsReq) Reset() {
	*x = GetFactoringOrderReportsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFactoringOrderReportsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFactoringOrderReportsReq) ProtoMessage() {}

func (x *GetFactoringOrderReportsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFactoringOrderReportsReq.ProtoReflect.Descriptor instead.
func (*GetFactoringOrderReportsReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{153}
}

func (x *GetFactoringOrderReportsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetFactoringOrderReportsReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetFactoringOrderReportsReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *GetFactoringOrderReportsReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *GetFactoringOrderReportsReq) GetOptionalFilterCond() *FactoringReportGetCondition {
	if x != nil {
		return x.OptionalFilterCond
	}
	return nil
}

func (x *GetFactoringOrderReportsReq) GetOptionalGroupCond() *FactoringReportGroupCondition {
	if x != nil {
		return x.OptionalGroupCond
	}
	return nil
}

func (x *GetFactoringOrderReportsReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type FactoringOrderDayReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year  int64 `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month int64 `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	Day   int64 `protobuf:"varint,3,opt,name=day,proto3" json:"day"`
	MibId int64 `protobuf:"varint,4,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo                          *CompanyReportVo       `protobuf:"bytes,5,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo                               *MiReportVo            `protobuf:"bytes,6,opt,name=miInfo,proto3" json:"miInfo"`
	FactoringAmount                      int64                  `protobuf:"varint,7,opt,name=factoringAmount,proto3" json:"factoringAmount"`
	FactoringCount                       int64                  `protobuf:"varint,8,opt,name=factoringCount,proto3" json:"factoringCount"`
	FactoringFailAmount                  int64                  `protobuf:"varint,9,opt,name=factoringFailAmount,proto3" json:"factoringFailAmount"`
	FactoringFailCount                   int64                  `protobuf:"varint,10,opt,name=factoringFailCount,proto3" json:"factoringFailCount"`
	FactoringApplyAmount                 int64                  `protobuf:"varint,11,opt,name=factoringApplyAmount,proto3" json:"factoringApplyAmount"`
	FactoringApplyCount                  int64                  `protobuf:"varint,12,opt,name=factoringApplyCount,proto3" json:"factoringApplyCount"`
	ShipmentOrderFactoringNotApplyAmount int64                  `protobuf:"varint,13,opt,name=shipmentOrderFactoringNotApplyAmount,proto3" json:"shipmentOrderFactoringNotApplyAmount"`
	ShipmentOrderFactoringNotApplyCount  int64                  `protobuf:"varint,14,opt,name=shipmentOrderFactoringNotApplyCount,proto3" json:"shipmentOrderFactoringNotApplyCount"`
	ReportDate                           *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=reportDate,proto3" json:"reportDate"`
}

func (x *FactoringOrderDayReport) Reset() {
	*x = FactoringOrderDayReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoringOrderDayReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoringOrderDayReport) ProtoMessage() {}

func (x *FactoringOrderDayReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoringOrderDayReport.ProtoReflect.Descriptor instead.
func (*FactoringOrderDayReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{154}
}

func (x *FactoringOrderDayReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *FactoringOrderDayReport) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *FactoringOrderDayReport) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *FactoringOrderDayReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *FactoringOrderDayReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *FactoringOrderDayReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *FactoringOrderDayReport) GetFactoringAmount() int64 {
	if x != nil {
		return x.FactoringAmount
	}
	return 0
}

func (x *FactoringOrderDayReport) GetFactoringCount() int64 {
	if x != nil {
		return x.FactoringCount
	}
	return 0
}

func (x *FactoringOrderDayReport) GetFactoringFailAmount() int64 {
	if x != nil {
		return x.FactoringFailAmount
	}
	return 0
}

func (x *FactoringOrderDayReport) GetFactoringFailCount() int64 {
	if x != nil {
		return x.FactoringFailCount
	}
	return 0
}

func (x *FactoringOrderDayReport) GetFactoringApplyAmount() int64 {
	if x != nil {
		return x.FactoringApplyAmount
	}
	return 0
}

func (x *FactoringOrderDayReport) GetFactoringApplyCount() int64 {
	if x != nil {
		return x.FactoringApplyCount
	}
	return 0
}

func (x *FactoringOrderDayReport) GetShipmentOrderFactoringNotApplyAmount() int64 {
	if x != nil {
		return x.ShipmentOrderFactoringNotApplyAmount
	}
	return 0
}

func (x *FactoringOrderDayReport) GetShipmentOrderFactoringNotApplyCount() int64 {
	if x != nil {
		return x.ShipmentOrderFactoringNotApplyCount
	}
	return 0
}

func (x *FactoringOrderDayReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

type GetFactoringOrderDayReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*FactoringOrderDayReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                      `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                      `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                      `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetFactoringOrderDayReportsResp) Reset() {
	*x = GetFactoringOrderDayReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFactoringOrderDayReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFactoringOrderDayReportsResp) ProtoMessage() {}

func (x *GetFactoringOrderDayReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFactoringOrderDayReportsResp.ProtoReflect.Descriptor instead.
func (*GetFactoringOrderDayReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{155}
}

func (x *GetFactoringOrderDayReportsResp) GetList() []*FactoringOrderDayReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetFactoringOrderDayReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetFactoringOrderDayReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetFactoringOrderDayReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type FactoringOrderMonthReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year  int64 `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month int64 `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	MibId int64 `protobuf:"varint,3,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo                          *CompanyReportVo       `protobuf:"bytes,4,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo                               *MiReportVo            `protobuf:"bytes,5,opt,name=miInfo,proto3" json:"miInfo"`
	FactoringAmount                      int64                  `protobuf:"varint,6,opt,name=factoringAmount,proto3" json:"factoringAmount"`
	FactoringCount                       int64                  `protobuf:"varint,7,opt,name=factoringCount,proto3" json:"factoringCount"`
	FactoringFailAmount                  int64                  `protobuf:"varint,8,opt,name=factoringFailAmount,proto3" json:"factoringFailAmount"`
	FactoringFailCount                   int64                  `protobuf:"varint,9,opt,name=factoringFailCount,proto3" json:"factoringFailCount"`
	FactoringApplyAmount                 int64                  `protobuf:"varint,10,opt,name=factoringApplyAmount,proto3" json:"factoringApplyAmount"`
	FactoringApplyCount                  int64                  `protobuf:"varint,11,opt,name=factoringApplyCount,proto3" json:"factoringApplyCount"`
	ShipmentOrderFactoringNotApplyAmount int64                  `protobuf:"varint,12,opt,name=shipmentOrderFactoringNotApplyAmount,proto3" json:"shipmentOrderFactoringNotApplyAmount"`
	ShipmentOrderFactoringNotApplyCount  int64                  `protobuf:"varint,13,opt,name=shipmentOrderFactoringNotApplyCount,proto3" json:"shipmentOrderFactoringNotApplyCount"`
	ReportDate                           *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=reportDate,proto3" json:"reportDate"`
}

func (x *FactoringOrderMonthReport) Reset() {
	*x = FactoringOrderMonthReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoringOrderMonthReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoringOrderMonthReport) ProtoMessage() {}

func (x *FactoringOrderMonthReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoringOrderMonthReport.ProtoReflect.Descriptor instead.
func (*FactoringOrderMonthReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{156}
}

func (x *FactoringOrderMonthReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *FactoringOrderMonthReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *FactoringOrderMonthReport) GetFactoringAmount() int64 {
	if x != nil {
		return x.FactoringAmount
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetFactoringCount() int64 {
	if x != nil {
		return x.FactoringCount
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetFactoringFailAmount() int64 {
	if x != nil {
		return x.FactoringFailAmount
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetFactoringFailCount() int64 {
	if x != nil {
		return x.FactoringFailCount
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetFactoringApplyAmount() int64 {
	if x != nil {
		return x.FactoringApplyAmount
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetFactoringApplyCount() int64 {
	if x != nil {
		return x.FactoringApplyCount
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetShipmentOrderFactoringNotApplyAmount() int64 {
	if x != nil {
		return x.ShipmentOrderFactoringNotApplyAmount
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetShipmentOrderFactoringNotApplyCount() int64 {
	if x != nil {
		return x.ShipmentOrderFactoringNotApplyCount
	}
	return 0
}

func (x *FactoringOrderMonthReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

type GetFactoringOrderMonthReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*FactoringOrderMonthReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                        `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                        `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                        `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetFactoringOrderMonthReportsResp) Reset() {
	*x = GetFactoringOrderMonthReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFactoringOrderMonthReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFactoringOrderMonthReportsResp) ProtoMessage() {}

func (x *GetFactoringOrderMonthReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFactoringOrderMonthReportsResp.ProtoReflect.Descriptor instead.
func (*GetFactoringOrderMonthReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{157}
}

func (x *GetFactoringOrderMonthReportsResp) GetList() []*FactoringOrderMonthReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetFactoringOrderMonthReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetFactoringOrderMonthReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetFactoringOrderMonthReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type FactoringOrderYearReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year       int64                  `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	ReportDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=reportDate,proto3" json:"reportDate"`
	MibId      int64                  `protobuf:"varint,3,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo                          *CompanyReportVo `protobuf:"bytes,4,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo                               *MiReportVo      `protobuf:"bytes,5,opt,name=miInfo,proto3" json:"miInfo"`
	FactoringAmount                      int64            `protobuf:"varint,6,opt,name=factoringAmount,proto3" json:"factoringAmount"`
	FactoringCount                       int64            `protobuf:"varint,7,opt,name=factoringCount,proto3" json:"factoringCount"`
	FactoringFailAmount                  int64            `protobuf:"varint,8,opt,name=factoringFailAmount,proto3" json:"factoringFailAmount"`
	FactoringFailCount                   int64            `protobuf:"varint,9,opt,name=factoringFailCount,proto3" json:"factoringFailCount"`
	FactoringApplyAmount                 int64            `protobuf:"varint,10,opt,name=factoringApplyAmount,proto3" json:"factoringApplyAmount"`
	FactoringApplyCount                  int64            `protobuf:"varint,11,opt,name=factoringApplyCount,proto3" json:"factoringApplyCount"`
	ShipmentOrderFactoringNotApplyAmount int64            `protobuf:"varint,12,opt,name=shipmentOrderFactoringNotApplyAmount,proto3" json:"shipmentOrderFactoringNotApplyAmount"`
	ShipmentOrderFactoringNotApplyCount  int64            `protobuf:"varint,13,opt,name=shipmentOrderFactoringNotApplyCount,proto3" json:"shipmentOrderFactoringNotApplyCount"`
}

func (x *FactoringOrderYearReport) Reset() {
	*x = FactoringOrderYearReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoringOrderYearReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoringOrderYearReport) ProtoMessage() {}

func (x *FactoringOrderYearReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoringOrderYearReport.ProtoReflect.Descriptor instead.
func (*FactoringOrderYearReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{158}
}

func (x *FactoringOrderYearReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *FactoringOrderYearReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

func (x *FactoringOrderYearReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *FactoringOrderYearReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *FactoringOrderYearReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *FactoringOrderYearReport) GetFactoringAmount() int64 {
	if x != nil {
		return x.FactoringAmount
	}
	return 0
}

func (x *FactoringOrderYearReport) GetFactoringCount() int64 {
	if x != nil {
		return x.FactoringCount
	}
	return 0
}

func (x *FactoringOrderYearReport) GetFactoringFailAmount() int64 {
	if x != nil {
		return x.FactoringFailAmount
	}
	return 0
}

func (x *FactoringOrderYearReport) GetFactoringFailCount() int64 {
	if x != nil {
		return x.FactoringFailCount
	}
	return 0
}

func (x *FactoringOrderYearReport) GetFactoringApplyAmount() int64 {
	if x != nil {
		return x.FactoringApplyAmount
	}
	return 0
}

func (x *FactoringOrderYearReport) GetFactoringApplyCount() int64 {
	if x != nil {
		return x.FactoringApplyCount
	}
	return 0
}

func (x *FactoringOrderYearReport) GetShipmentOrderFactoringNotApplyAmount() int64 {
	if x != nil {
		return x.ShipmentOrderFactoringNotApplyAmount
	}
	return 0
}

func (x *FactoringOrderYearReport) GetShipmentOrderFactoringNotApplyCount() int64 {
	if x != nil {
		return x.ShipmentOrderFactoringNotApplyCount
	}
	return 0
}

type GetFactoringOrderYearReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*FactoringOrderYearReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                       `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                       `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                       `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetFactoringOrderYearReportsResp) Reset() {
	*x = GetFactoringOrderYearReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFactoringOrderYearReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFactoringOrderYearReportsResp) ProtoMessage() {}

func (x *GetFactoringOrderYearReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFactoringOrderYearReportsResp.ProtoReflect.Descriptor instead.
func (*GetFactoringOrderYearReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{159}
}

func (x *GetFactoringOrderYearReportsResp) GetList() []*FactoringOrderYearReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetFactoringOrderYearReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetFactoringOrderYearReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetFactoringOrderYearReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

//合同报表可选数据筛选维度
type ContractPlanReportGetCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//指定获取哪家医院的数据
	MiIds []int64 `protobuf:"varint,1,rep,packed,name=miIds,proto3" json:"miIds"`
	//指定获取哪家配送企业的数据
	ComIds        []int64  `protobuf:"varint,2,rep,packed,name=comIds,proto3" json:"comIds"`
	MedicineCodes []string `protobuf:"bytes,3,rep,name=medicineCodes,proto3" json:"medicineCodes"`
	//用于药品名模糊搜索，只显示5个候选药品
	MedicineName string `protobuf:"bytes,4,opt,name=medicineName,proto3" json:"medicineName"`
	//用于医院名模糊搜索，只显示5个候选医院
	MiName string `protobuf:"bytes,5,opt,name=miName,proto3" json:"miName"`
	//用于企业名模糊搜索，只显示5个候选医院
	ComName string `protobuf:"bytes,6,opt,name=comName,proto3" json:"comName"`
	//按某个标签显示
	TagId int64 `protobuf:"varint,7,opt,name=tagId,proto3" json:"tagId"`
	//按某份合同聚合
	ContractNo string `protobuf:"bytes,8,opt,name=contractNo,proto3" json:"contractNo"`
	//按子合同聚合等效于 按照 com,mi,medicine,contract聚合
	ContractId int64 `protobuf:"varint,9,opt,name=contractId,proto3" json:"contractId"`
	//合同起止时间过滤
	ContractStartBegin *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=contractStartBegin,proto3" json:"contractStartBegin"`
	ContractStartEnd   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=contractStartEnd,proto3" json:"contractStartEnd"`
}

func (x *ContractPlanReportGetCondition) Reset() {
	*x = ContractPlanReportGetCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractPlanReportGetCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractPlanReportGetCondition) ProtoMessage() {}

func (x *ContractPlanReportGetCondition) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractPlanReportGetCondition.ProtoReflect.Descriptor instead.
func (*ContractPlanReportGetCondition) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{160}
}

func (x *ContractPlanReportGetCondition) GetMiIds() []int64 {
	if x != nil {
		return x.MiIds
	}
	return nil
}

func (x *ContractPlanReportGetCondition) GetComIds() []int64 {
	if x != nil {
		return x.ComIds
	}
	return nil
}

func (x *ContractPlanReportGetCondition) GetMedicineCodes() []string {
	if x != nil {
		return x.MedicineCodes
	}
	return nil
}

func (x *ContractPlanReportGetCondition) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ContractPlanReportGetCondition) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ContractPlanReportGetCondition) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

func (x *ContractPlanReportGetCondition) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *ContractPlanReportGetCondition) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *ContractPlanReportGetCondition) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *ContractPlanReportGetCondition) GetContractStartBegin() *timestamppb.Timestamp {
	if x != nil {
		return x.ContractStartBegin
	}
	return nil
}

func (x *ContractPlanReportGetCondition) GetContractStartEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.ContractStartEnd
	}
	return nil
}

//合同报表可选聚合维度
type ContractPlanReportGroupCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//直接聚合为单行，使用此项则其他聚合条件不生效
	ByAll bool `protobuf:"varint,1,opt,name=byAll,proto3" json:"byAll"`
	//时间维度聚合,注意对于月报，按日聚合无效，年报类推
	ByMonth bool `protobuf:"varint,2,opt,name=byMonth,proto3" json:"byMonth"`
	ByYear  bool `protobuf:"varint,3,opt,name=byYear,proto3" json:"byYear"`
	ByDay   bool `protobuf:"varint,4,opt,name=byDay,proto3" json:"byDay"`
	//业务维度
	ByMi       bool `protobuf:"varint,5,opt,name=byMi,proto3" json:"byMi"`
	ByCom      bool `protobuf:"varint,6,opt,name=byCom,proto3" json:"byCom"`
	ByMedicine bool `protobuf:"varint,7,opt,name=byMedicine,proto3" json:"byMedicine"`
	ByContract bool `protobuf:"varint,8,opt,name=byContract,proto3" json:"byContract"`
	//按照子合同聚合
	ByContractMi bool `protobuf:"varint,9,opt,name=byContractMi,proto3" json:"byContractMi"`
}

func (x *ContractPlanReportGroupCondition) Reset() {
	*x = ContractPlanReportGroupCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractPlanReportGroupCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractPlanReportGroupCondition) ProtoMessage() {}

func (x *ContractPlanReportGroupCondition) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractPlanReportGroupCondition.ProtoReflect.Descriptor instead.
func (*ContractPlanReportGroupCondition) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{161}
}

func (x *ContractPlanReportGroupCondition) GetByAll() bool {
	if x != nil {
		return x.ByAll
	}
	return false
}

func (x *ContractPlanReportGroupCondition) GetByMonth() bool {
	if x != nil {
		return x.ByMonth
	}
	return false
}

func (x *ContractPlanReportGroupCondition) GetByYear() bool {
	if x != nil {
		return x.ByYear
	}
	return false
}

func (x *ContractPlanReportGroupCondition) GetByDay() bool {
	if x != nil {
		return x.ByDay
	}
	return false
}

func (x *ContractPlanReportGroupCondition) GetByMi() bool {
	if x != nil {
		return x.ByMi
	}
	return false
}

func (x *ContractPlanReportGroupCondition) GetByCom() bool {
	if x != nil {
		return x.ByCom
	}
	return false
}

func (x *ContractPlanReportGroupCondition) GetByMedicine() bool {
	if x != nil {
		return x.ByMedicine
	}
	return false
}

func (x *ContractPlanReportGroupCondition) GetByContract() bool {
	if x != nil {
		return x.ByContract
	}
	return false
}

func (x *ContractPlanReportGroupCondition) GetByContractMi() bool {
	if x != nil {
		return x.ByContractMi
	}
	return false
}

//此操作或合并合同的当前状态参数，而不是数据报表的
type GetContractPlanReportsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId int64 `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	//报表的起止日期必填
	StartAt            *timestamppb.Timestamp            `protobuf:"bytes,3,opt,name=startAt,proto3" json:"startAt"`
	EndAt              *timestamppb.Timestamp            `protobuf:"bytes,4,opt,name=endAt,proto3" json:"endAt"`
	OptionalFilterCond *ContractPlanReportGetCondition   `protobuf:"bytes,5,opt,name=optionalFilterCond,proto3" json:"optionalFilterCond"`
	OptionalGroupCond  *ContractPlanReportGroupCondition `protobuf:"bytes,6,opt,name=optionalGroupCond,proto3" json:"optionalGroupCond"`
	Page               *Page                             `protobuf:"bytes,7,opt,name=page,proto3" json:"page"`
}

func (x *GetContractPlanReportsReq) Reset() {
	*x = GetContractPlanReportsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractPlanReportsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractPlanReportsReq) ProtoMessage() {}

func (x *GetContractPlanReportsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractPlanReportsReq.ProtoReflect.Descriptor instead.
func (*GetContractPlanReportsReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{162}
}

func (x *GetContractPlanReportsReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetContractPlanReportsReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetContractPlanReportsReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *GetContractPlanReportsReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *GetContractPlanReportsReq) GetOptionalFilterCond() *ContractPlanReportGetCondition {
	if x != nil {
		return x.OptionalFilterCond
	}
	return nil
}

func (x *GetContractPlanReportsReq) GetOptionalGroupCond() *ContractPlanReportGroupCondition {
	if x != nil {
		return x.OptionalGroupCond
	}
	return nil
}

func (x *GetContractPlanReportsReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ContractReportVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractNo string `protobuf:"bytes,1,opt,name=contractNo,proto3" json:"contractNo"`
	//投标企业名
	TenderCompany string `protobuf:"bytes,2,opt,name=tenderCompany,proto3" json:"tenderCompany"`
	//中标价格 单位分/包装
	MedicinePrice int64 `protobuf:"varint,3,opt,name=medicinePrice,proto3" json:"medicinePrice"`
	//已确认收货的数量
	MedicineReceive int64 `protobuf:"varint,4,opt,name=medicineReceive,proto3" json:"medicineReceive"`
	//预计采购量
	TotalAmount int64                  `protobuf:"varint,5,opt,name=totalAmount,proto3" json:"totalAmount"`
	StartAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=startAt,proto3" json:"startAt"`
	EndAt       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=endAt,proto3" json:"endAt"`
}

func (x *ContractReportVo) Reset() {
	*x = ContractReportVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractReportVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractReportVo) ProtoMessage() {}

func (x *ContractReportVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractReportVo.ProtoReflect.Descriptor instead.
func (*ContractReportVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{163}
}

func (x *ContractReportVo) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *ContractReportVo) GetTenderCompany() string {
	if x != nil {
		return x.TenderCompany
	}
	return ""
}

func (x *ContractReportVo) GetMedicinePrice() int64 {
	if x != nil {
		return x.MedicinePrice
	}
	return 0
}

func (x *ContractReportVo) GetMedicineReceive() int64 {
	if x != nil {
		return x.MedicineReceive
	}
	return 0
}

func (x *ContractReportVo) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *ContractReportVo) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ContractReportVo) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

type ContractMiReportVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiContractId    int64 `protobuf:"varint,1,opt,name=miContractId,proto3" json:"miContractId"`
	MedicinePrice   int64 `protobuf:"varint,2,opt,name=medicinePrice,proto3" json:"medicinePrice"`
	MedicineAmount  int64 `protobuf:"varint,3,opt,name=medicineAmount,proto3" json:"medicineAmount"`
	MedicineSent    int64 `protobuf:"varint,4,opt,name=medicineSent,proto3" json:"medicineSent"`
	MedicineReceive int64 `protobuf:"varint,5,opt,name=medicineReceive,proto3" json:"medicineReceive"`
}

func (x *ContractMiReportVo) Reset() {
	*x = ContractMiReportVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractMiReportVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractMiReportVo) ProtoMessage() {}

func (x *ContractMiReportVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractMiReportVo.ProtoReflect.Descriptor instead.
func (*ContractMiReportVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{164}
}

func (x *ContractMiReportVo) GetMiContractId() int64 {
	if x != nil {
		return x.MiContractId
	}
	return 0
}

func (x *ContractMiReportVo) GetMedicinePrice() int64 {
	if x != nil {
		return x.MedicinePrice
	}
	return 0
}

func (x *ContractMiReportVo) GetMedicineAmount() int64 {
	if x != nil {
		return x.MedicineAmount
	}
	return 0
}

func (x *ContractMiReportVo) GetMedicineSent() int64 {
	if x != nil {
		return x.MedicineSent
	}
	return 0
}

func (x *ContractMiReportVo) GetMedicineReceive() int64 {
	if x != nil {
		return x.MedicineReceive
	}
	return 0
}

type ContractPlanDayReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year  int64 `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month int64 `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	Day   int64 `protobuf:"varint,3,opt,name=day,proto3" json:"day"`
	MibId int64 `protobuf:"varint,4,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo  *CompanyReportVo  `protobuf:"bytes,5,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo       *MiReportVo       `protobuf:"bytes,6,opt,name=miInfo,proto3" json:"miInfo"`
	MedicineInfo *MedicineReportVo `protobuf:"bytes,7,opt,name=medicineInfo,proto3" json:"medicineInfo"`
	//本日配送计划同步金额
	ShipmentPlanAmount           int64                  `protobuf:"varint,8,opt,name=shipmentPlanAmount,proto3" json:"shipmentPlanAmount"`
	ShipmentPlanCount            int64                  `protobuf:"varint,9,opt,name=shipmentPlanCount,proto3" json:"shipmentPlanCount"`
	ShipmentPlanUnitCount        int64                  `protobuf:"varint,10,opt,name=shipmentPlanUnitCount,proto3" json:"shipmentPlanUnitCount"`
	ShipmentPlanReceiveAmount    int64                  `protobuf:"varint,11,opt,name=shipmentPlanReceiveAmount,proto3" json:"shipmentPlanReceiveAmount"`
	ShipmentPlanReceiveCount     int64                  `protobuf:"varint,12,opt,name=shipmentPlanReceiveCount,proto3" json:"shipmentPlanReceiveCount"`
	ShipmentPlanReceiveUnitCount int64                  `protobuf:"varint,13,opt,name=shipmentPlanReceiveUnitCount,proto3" json:"shipmentPlanReceiveUnitCount"`
	ShipmentPlanNotSentAmount    int64                  `protobuf:"varint,14,opt,name=shipmentPlanNotSentAmount,proto3" json:"shipmentPlanNotSentAmount"`
	ShipmentPlanNotSentCount     int64                  `protobuf:"varint,15,opt,name=shipmentPlanNotSentCount,proto3" json:"shipmentPlanNotSentCount"`
	ShipmentPlanNotSentUnitCount int64                  `protobuf:"varint,16,opt,name=shipmentPlanNotSentUnitCount,proto3" json:"shipmentPlanNotSentUnitCount"`
	FactoringAmount              int64                  `protobuf:"varint,17,opt,name=factoringAmount,proto3" json:"factoringAmount"`
	ReportDate                   *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=reportDate,proto3" json:"reportDate"`
	ContractInfo                 *ContractReportVo      `protobuf:"bytes,19,opt,name=contractInfo,proto3" json:"contractInfo"`
	ContractMiInfo               *ContractMiReportVo    `protobuf:"bytes,20,opt,name=contractMiInfo,proto3" json:"contractMiInfo"`
}

func (x *ContractPlanDayReport) Reset() {
	*x = ContractPlanDayReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractPlanDayReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractPlanDayReport) ProtoMessage() {}

func (x *ContractPlanDayReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractPlanDayReport.ProtoReflect.Descriptor instead.
func (*ContractPlanDayReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{165}
}

func (x *ContractPlanDayReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ContractPlanDayReport) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ContractPlanDayReport) GetDay() int64 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *ContractPlanDayReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ContractPlanDayReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *ContractPlanDayReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *ContractPlanDayReport) GetMedicineInfo() *MedicineReportVo {
	if x != nil {
		return x.MedicineInfo
	}
	return nil
}

func (x *ContractPlanDayReport) GetShipmentPlanAmount() int64 {
	if x != nil {
		return x.ShipmentPlanAmount
	}
	return 0
}

func (x *ContractPlanDayReport) GetShipmentPlanCount() int64 {
	if x != nil {
		return x.ShipmentPlanCount
	}
	return 0
}

func (x *ContractPlanDayReport) GetShipmentPlanUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanUnitCount
	}
	return 0
}

func (x *ContractPlanDayReport) GetShipmentPlanReceiveAmount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveAmount
	}
	return 0
}

func (x *ContractPlanDayReport) GetShipmentPlanReceiveCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveCount
	}
	return 0
}

func (x *ContractPlanDayReport) GetShipmentPlanReceiveUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveUnitCount
	}
	return 0
}

func (x *ContractPlanDayReport) GetShipmentPlanNotSentAmount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentAmount
	}
	return 0
}

func (x *ContractPlanDayReport) GetShipmentPlanNotSentCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentCount
	}
	return 0
}

func (x *ContractPlanDayReport) GetShipmentPlanNotSentUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentUnitCount
	}
	return 0
}

func (x *ContractPlanDayReport) GetFactoringAmount() int64 {
	if x != nil {
		return x.FactoringAmount
	}
	return 0
}

func (x *ContractPlanDayReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

func (x *ContractPlanDayReport) GetContractInfo() *ContractReportVo {
	if x != nil {
		return x.ContractInfo
	}
	return nil
}

func (x *ContractPlanDayReport) GetContractMiInfo() *ContractMiReportVo {
	if x != nil {
		return x.ContractMiInfo
	}
	return nil
}

type GetContractPlanDayReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ContractPlanDayReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                    `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                    `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                    `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetContractPlanDayReportsResp) Reset() {
	*x = GetContractPlanDayReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractPlanDayReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractPlanDayReportsResp) ProtoMessage() {}

func (x *GetContractPlanDayReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractPlanDayReportsResp.ProtoReflect.Descriptor instead.
func (*GetContractPlanDayReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{166}
}

func (x *GetContractPlanDayReportsResp) GetList() []*ContractPlanDayReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetContractPlanDayReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetContractPlanDayReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetContractPlanDayReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ContractPlanMonthReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year           int64               `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month          int64               `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	ContractMiInfo *ContractMiReportVo `protobuf:"bytes,3,opt,name=contractMiInfo,proto3" json:"contractMiInfo"`
	MibId          int64               `protobuf:"varint,4,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo  *CompanyReportVo  `protobuf:"bytes,5,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo       *MiReportVo       `protobuf:"bytes,6,opt,name=miInfo,proto3" json:"miInfo"`
	MedicineInfo *MedicineReportVo `protobuf:"bytes,7,opt,name=medicineInfo,proto3" json:"medicineInfo"`
	//本日配送计划同步金额
	ShipmentPlanAmount           int64                  `protobuf:"varint,8,opt,name=shipmentPlanAmount,proto3" json:"shipmentPlanAmount"`
	ShipmentPlanCount            int64                  `protobuf:"varint,9,opt,name=shipmentPlanCount,proto3" json:"shipmentPlanCount"`
	ShipmentPlanUnitCount        int64                  `protobuf:"varint,10,opt,name=shipmentPlanUnitCount,proto3" json:"shipmentPlanUnitCount"`
	ShipmentPlanReceiveAmount    int64                  `protobuf:"varint,11,opt,name=shipmentPlanReceiveAmount,proto3" json:"shipmentPlanReceiveAmount"`
	ShipmentPlanReceiveCount     int64                  `protobuf:"varint,12,opt,name=shipmentPlanReceiveCount,proto3" json:"shipmentPlanReceiveCount"`
	ShipmentPlanReceiveUnitCount int64                  `protobuf:"varint,13,opt,name=shipmentPlanReceiveUnitCount,proto3" json:"shipmentPlanReceiveUnitCount"`
	ShipmentPlanNotSentAmount    int64                  `protobuf:"varint,14,opt,name=shipmentPlanNotSentAmount,proto3" json:"shipmentPlanNotSentAmount"`
	ShipmentPlanNotSentCount     int64                  `protobuf:"varint,15,opt,name=shipmentPlanNotSentCount,proto3" json:"shipmentPlanNotSentCount"`
	ShipmentPlanNotSentUnitCount int64                  `protobuf:"varint,16,opt,name=shipmentPlanNotSentUnitCount,proto3" json:"shipmentPlanNotSentUnitCount"`
	FactoringAmount              int64                  `protobuf:"varint,17,opt,name=factoringAmount,proto3" json:"factoringAmount"`
	ReportDate                   *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=reportDate,proto3" json:"reportDate"`
	ContractInfo                 *ContractReportVo      `protobuf:"bytes,19,opt,name=contractInfo,proto3" json:"contractInfo"`
}

func (x *ContractPlanMonthReport) Reset() {
	*x = ContractPlanMonthReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractPlanMonthReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractPlanMonthReport) ProtoMessage() {}

func (x *ContractPlanMonthReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractPlanMonthReport.ProtoReflect.Descriptor instead.
func (*ContractPlanMonthReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{167}
}

func (x *ContractPlanMonthReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ContractPlanMonthReport) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ContractPlanMonthReport) GetContractMiInfo() *ContractMiReportVo {
	if x != nil {
		return x.ContractMiInfo
	}
	return nil
}

func (x *ContractPlanMonthReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ContractPlanMonthReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *ContractPlanMonthReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *ContractPlanMonthReport) GetMedicineInfo() *MedicineReportVo {
	if x != nil {
		return x.MedicineInfo
	}
	return nil
}

func (x *ContractPlanMonthReport) GetShipmentPlanAmount() int64 {
	if x != nil {
		return x.ShipmentPlanAmount
	}
	return 0
}

func (x *ContractPlanMonthReport) GetShipmentPlanCount() int64 {
	if x != nil {
		return x.ShipmentPlanCount
	}
	return 0
}

func (x *ContractPlanMonthReport) GetShipmentPlanUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanUnitCount
	}
	return 0
}

func (x *ContractPlanMonthReport) GetShipmentPlanReceiveAmount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveAmount
	}
	return 0
}

func (x *ContractPlanMonthReport) GetShipmentPlanReceiveCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveCount
	}
	return 0
}

func (x *ContractPlanMonthReport) GetShipmentPlanReceiveUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveUnitCount
	}
	return 0
}

func (x *ContractPlanMonthReport) GetShipmentPlanNotSentAmount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentAmount
	}
	return 0
}

func (x *ContractPlanMonthReport) GetShipmentPlanNotSentCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentCount
	}
	return 0
}

func (x *ContractPlanMonthReport) GetShipmentPlanNotSentUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentUnitCount
	}
	return 0
}

func (x *ContractPlanMonthReport) GetFactoringAmount() int64 {
	if x != nil {
		return x.FactoringAmount
	}
	return 0
}

func (x *ContractPlanMonthReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

func (x *ContractPlanMonthReport) GetContractInfo() *ContractReportVo {
	if x != nil {
		return x.ContractInfo
	}
	return nil
}

type GetContractPlanMonthReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ContractPlanMonthReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                      `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                      `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                      `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetContractPlanMonthReportsResp) Reset() {
	*x = GetContractPlanMonthReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractPlanMonthReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractPlanMonthReportsResp) ProtoMessage() {}

func (x *GetContractPlanMonthReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractPlanMonthReportsResp.ProtoReflect.Descriptor instead.
func (*GetContractPlanMonthReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{168}
}

func (x *GetContractPlanMonthReportsResp) GetList() []*ContractPlanMonthReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetContractPlanMonthReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetContractPlanMonthReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetContractPlanMonthReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ContractPlanYearReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	Year           int64               `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	ContractInfo   *ContractReportVo   `protobuf:"bytes,2,opt,name=contractInfo,proto3" json:"contractInfo"`
	ContractMiInfo *ContractMiReportVo `protobuf:"bytes,3,opt,name=contractMiInfo,proto3" json:"contractMiInfo"`
	MibId          int64               `protobuf:"varint,4,opt,name=mibId,proto3" json:"mibId"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo  *CompanyReportVo  `protobuf:"bytes,5,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo       *MiReportVo       `protobuf:"bytes,6,opt,name=miInfo,proto3" json:"miInfo"`
	MedicineInfo *MedicineReportVo `protobuf:"bytes,7,opt,name=medicineInfo,proto3" json:"medicineInfo"`
	//本日配送计划同步金额
	ShipmentPlanAmount           int64                  `protobuf:"varint,8,opt,name=shipmentPlanAmount,proto3" json:"shipmentPlanAmount"`
	ShipmentPlanCount            int64                  `protobuf:"varint,9,opt,name=shipmentPlanCount,proto3" json:"shipmentPlanCount"`
	ShipmentPlanUnitCount        int64                  `protobuf:"varint,10,opt,name=shipmentPlanUnitCount,proto3" json:"shipmentPlanUnitCount"`
	ShipmentPlanReceiveAmount    int64                  `protobuf:"varint,11,opt,name=shipmentPlanReceiveAmount,proto3" json:"shipmentPlanReceiveAmount"`
	ShipmentPlanReceiveCount     int64                  `protobuf:"varint,12,opt,name=shipmentPlanReceiveCount,proto3" json:"shipmentPlanReceiveCount"`
	ShipmentPlanReceiveUnitCount int64                  `protobuf:"varint,13,opt,name=shipmentPlanReceiveUnitCount,proto3" json:"shipmentPlanReceiveUnitCount"`
	ShipmentPlanNotSentAmount    int64                  `protobuf:"varint,14,opt,name=shipmentPlanNotSentAmount,proto3" json:"shipmentPlanNotSentAmount"`
	ShipmentPlanNotSentCount     int64                  `protobuf:"varint,15,opt,name=shipmentPlanNotSentCount,proto3" json:"shipmentPlanNotSentCount"`
	ShipmentPlanNotSentUnitCount int64                  `protobuf:"varint,16,opt,name=shipmentPlanNotSentUnitCount,proto3" json:"shipmentPlanNotSentUnitCount"`
	FactoringAmount              int64                  `protobuf:"varint,17,opt,name=factoringAmount,proto3" json:"factoringAmount"`
	ReportDate                   *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=reportDate,proto3" json:"reportDate"`
}

func (x *ContractPlanYearReport) Reset() {
	*x = ContractPlanYearReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractPlanYearReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractPlanYearReport) ProtoMessage() {}

func (x *ContractPlanYearReport) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractPlanYearReport.ProtoReflect.Descriptor instead.
func (*ContractPlanYearReport) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{169}
}

func (x *ContractPlanYearReport) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ContractPlanYearReport) GetContractInfo() *ContractReportVo {
	if x != nil {
		return x.ContractInfo
	}
	return nil
}

func (x *ContractPlanYearReport) GetContractMiInfo() *ContractMiReportVo {
	if x != nil {
		return x.ContractMiInfo
	}
	return nil
}

func (x *ContractPlanYearReport) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ContractPlanYearReport) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *ContractPlanYearReport) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *ContractPlanYearReport) GetMedicineInfo() *MedicineReportVo {
	if x != nil {
		return x.MedicineInfo
	}
	return nil
}

func (x *ContractPlanYearReport) GetShipmentPlanAmount() int64 {
	if x != nil {
		return x.ShipmentPlanAmount
	}
	return 0
}

func (x *ContractPlanYearReport) GetShipmentPlanCount() int64 {
	if x != nil {
		return x.ShipmentPlanCount
	}
	return 0
}

func (x *ContractPlanYearReport) GetShipmentPlanUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanUnitCount
	}
	return 0
}

func (x *ContractPlanYearReport) GetShipmentPlanReceiveAmount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveAmount
	}
	return 0
}

func (x *ContractPlanYearReport) GetShipmentPlanReceiveCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveCount
	}
	return 0
}

func (x *ContractPlanYearReport) GetShipmentPlanReceiveUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveUnitCount
	}
	return 0
}

func (x *ContractPlanYearReport) GetShipmentPlanNotSentAmount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentAmount
	}
	return 0
}

func (x *ContractPlanYearReport) GetShipmentPlanNotSentCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentCount
	}
	return 0
}

func (x *ContractPlanYearReport) GetShipmentPlanNotSentUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentUnitCount
	}
	return 0
}

func (x *ContractPlanYearReport) GetFactoringAmount() int64 {
	if x != nil {
		return x.FactoringAmount
	}
	return 0
}

func (x *ContractPlanYearReport) GetReportDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportDate
	}
	return nil
}

type GetContractPlanYearReportsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ContractPlanYearReport `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                     `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                     `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                     `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetContractPlanYearReportsResp) Reset() {
	*x = GetContractPlanYearReportsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractPlanYearReportsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractPlanYearReportsResp) ProtoMessage() {}

func (x *GetContractPlanYearReportsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractPlanYearReportsResp.ProtoReflect.Descriptor instead.
func (*GetContractPlanYearReportsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{170}
}

func (x *GetContractPlanYearReportsResp) GetList() []*ContractPlanYearReport {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetContractPlanYearReportsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetContractPlanYearReportsResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetContractPlanYearReportsResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ContractSum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//预计总金额
	MedicineMoney int64 `protobuf:"varint,1,opt,name=medicineMoney,proto3" json:"medicineMoney"`
	//预计总量
	MedicineAmount  int64 `protobuf:"varint,2,opt,name=medicineAmount,proto3" json:"medicineAmount"`
	MedicineSent    int64 `protobuf:"varint,4,opt,name=medicineSent,proto3" json:"medicineSent"`
	MedicineReceive int64 `protobuf:"varint,5,opt,name=medicineReceive,proto3" json:"medicineReceive"`
	//如果聚合时不含此列，则信息不存在
	CompanyInfo    *CompanyReportVo    `protobuf:"bytes,6,opt,name=companyInfo,proto3" json:"companyInfo"`
	MiInfo         *MiReportVo         `protobuf:"bytes,7,opt,name=miInfo,proto3" json:"miInfo"`
	MedicineInfo   *MedicineReportVo   `protobuf:"bytes,8,opt,name=medicineInfo,proto3" json:"medicineInfo"`
	ContractInfo   *ContractReportVo   `protobuf:"bytes,9,opt,name=contractInfo,proto3" json:"contractInfo"`
	ContractMiInfo *ContractMiReportVo `protobuf:"bytes,10,opt,name=contractMiInfo,proto3" json:"contractMiInfo"`
}

func (x *ContractSum) Reset() {
	*x = ContractSum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractSum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractSum) ProtoMessage() {}

func (x *ContractSum) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractSum.ProtoReflect.Descriptor instead.
func (*ContractSum) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{171}
}

func (x *ContractSum) GetMedicineMoney() int64 {
	if x != nil {
		return x.MedicineMoney
	}
	return 0
}

func (x *ContractSum) GetMedicineAmount() int64 {
	if x != nil {
		return x.MedicineAmount
	}
	return 0
}

func (x *ContractSum) GetMedicineSent() int64 {
	if x != nil {
		return x.MedicineSent
	}
	return 0
}

func (x *ContractSum) GetMedicineReceive() int64 {
	if x != nil {
		return x.MedicineReceive
	}
	return 0
}

func (x *ContractSum) GetCompanyInfo() *CompanyReportVo {
	if x != nil {
		return x.CompanyInfo
	}
	return nil
}

func (x *ContractSum) GetMiInfo() *MiReportVo {
	if x != nil {
		return x.MiInfo
	}
	return nil
}

func (x *ContractSum) GetMedicineInfo() *MedicineReportVo {
	if x != nil {
		return x.MedicineInfo
	}
	return nil
}

func (x *ContractSum) GetContractInfo() *ContractReportVo {
	if x != nil {
		return x.ContractInfo
	}
	return nil
}

func (x *ContractSum) GetContractMiInfo() *ContractMiReportVo {
	if x != nil {
		return x.ContractMiInfo
	}
	return nil
}

type GetContractSumResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ContractSum `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64          `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64          `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetContractSumResp) Reset() {
	*x = GetContractSumResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractSumResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractSumResp) ProtoMessage() {}

func (x *GetContractSumResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractSumResp.ProtoReflect.Descriptor instead.
func (*GetContractSumResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{172}
}

func (x *GetContractSumResp) GetList() []*ContractSum {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetContractSumResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetContractSumResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetContractSumResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

//查询当前时间点生效的合同信息
type GetValidContractInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪家医院的聚合数据
	MiId int64 `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
	//指定获取哪家配送企业的聚合数据 不可同时指定
	ComId int64 `protobuf:"varint,3,opt,name=comId,proto3" json:"comId"`
}

func (x *GetValidContractInfoReq) Reset() {
	*x = GetValidContractInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidContractInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidContractInfoReq) ProtoMessage() {}

func (x *GetValidContractInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidContractInfoReq.ProtoReflect.Descriptor instead.
func (*GetValidContractInfoReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{173}
}

func (x *GetValidContractInfoReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetValidContractInfoReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *GetValidContractInfoReq) GetComId() int64 {
	if x != nil {
		return x.ComId
	}
	return 0
}

//查询当前时间点需要支付的金额
type GetCurrentNeedPayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪家医院的聚合数据
	MiId int64 `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
	//指定获取哪家配送企业的聚合数据 不可同时指定
	ComId int64 `protobuf:"varint,3,opt,name=comId,proto3" json:"comId"`
}

func (x *GetCurrentNeedPayReq) Reset() {
	*x = GetCurrentNeedPayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentNeedPayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentNeedPayReq) ProtoMessage() {}

func (x *GetCurrentNeedPayReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentNeedPayReq.ProtoReflect.Descriptor instead.
func (*GetCurrentNeedPayReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{174}
}

func (x *GetCurrentNeedPayReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetCurrentNeedPayReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *GetCurrentNeedPayReq) GetComId() int64 {
	if x != nil {
		return x.ComId
	}
	return 0
}

//查询当前时间点保理待审核金额
type GetCurrentFactoringApplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪家医院的聚合数据
	MiId int64 `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
	//指定获取哪家配送企业的聚合数据 不可同时指定
	ComId int64 `protobuf:"varint,3,opt,name=comId,proto3" json:"comId"`
}

func (x *GetCurrentFactoringApplyReq) Reset() {
	*x = GetCurrentFactoringApplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentFactoringApplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentFactoringApplyReq) ProtoMessage() {}

func (x *GetCurrentFactoringApplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentFactoringApplyReq.ProtoReflect.Descriptor instead.
func (*GetCurrentFactoringApplyReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{175}
}

func (x *GetCurrentFactoringApplyReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetCurrentFactoringApplyReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *GetCurrentFactoringApplyReq) GetComId() int64 {
	if x != nil {
		return x.ComId
	}
	return 0
}

type GetValidContractInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//有效合同金额
	ValidContractAmount int64 `protobuf:"varint,1,opt,name=validContractAmount,proto3" json:"validContractAmount"`
	//有效合同数量
	ValidContractCount int64 `protobuf:"varint,2,opt,name=validContractCount,proto3" json:"validContractCount"`
}

func (x *GetValidContractInfoResp) Reset() {
	*x = GetValidContractInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetValidContractInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidContractInfoResp) ProtoMessage() {}

func (x *GetValidContractInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidContractInfoResp.ProtoReflect.Descriptor instead.
func (*GetValidContractInfoResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{176}
}

func (x *GetValidContractInfoResp) GetValidContractAmount() int64 {
	if x != nil {
		return x.ValidContractAmount
	}
	return 0
}

func (x *GetValidContractInfoResp) GetValidContractCount() int64 {
	if x != nil {
		return x.ValidContractCount
	}
	return 0
}

type GetCurrentNeedPayResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//待支付金额
	NeedPayAmount int64 `protobuf:"varint,1,opt,name=needPayAmount,proto3" json:"needPayAmount"`
}

func (x *GetCurrentNeedPayResp) Reset() {
	*x = GetCurrentNeedPayResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentNeedPayResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentNeedPayResp) ProtoMessage() {}

func (x *GetCurrentNeedPayResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentNeedPayResp.ProtoReflect.Descriptor instead.
func (*GetCurrentNeedPayResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{177}
}

func (x *GetCurrentNeedPayResp) GetNeedPayAmount() int64 {
	if x != nil {
		return x.NeedPayAmount
	}
	return 0
}

type GetCurrentFactoringApplyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//待审核金额
	FactoringApplyAmount int64 `protobuf:"varint,1,opt,name=factoringApplyAmount,proto3" json:"factoringApplyAmount"`
}

func (x *GetCurrentFactoringApplyResp) Reset() {
	*x = GetCurrentFactoringApplyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentFactoringApplyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentFactoringApplyResp) ProtoMessage() {}

func (x *GetCurrentFactoringApplyResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentFactoringApplyResp.ProtoReflect.Descriptor instead.
func (*GetCurrentFactoringApplyResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{178}
}

func (x *GetCurrentFactoringApplyResp) GetFactoringApplyAmount() int64 {
	if x != nil {
		return x.FactoringApplyAmount
	}
	return 0
}

type GetCompanyHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId    int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	CompanyIds   []int64  `protobuf:"varint,2,rep,packed,name=companyIds,proto3" json:"companyIds"`
	CompanyCodes []string `protobuf:"bytes,3,rep,name=companyCodes,proto3" json:"companyCodes"`
}

func (x *GetCompanyHashReq) Reset() {
	*x = GetCompanyHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyHashReq) ProtoMessage() {}

func (x *GetCompanyHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyHashReq.ProtoReflect.Descriptor instead.
func (*GetCompanyHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{179}
}

func (x *GetCompanyHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetCompanyHashReq) GetCompanyIds() []int64 {
	if x != nil {
		return x.CompanyIds
	}
	return nil
}

func (x *GetCompanyHashReq) GetCompanyCodes() []string {
	if x != nil {
		return x.CompanyCodes
	}
	return nil
}

type GetCompanyHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CompanyHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64          `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64          `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetCompanyHashResp) Reset() {
	*x = GetCompanyHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyHashResp) ProtoMessage() {}

func (x *GetCompanyHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyHashResp.ProtoReflect.Descriptor instead.
func (*GetCompanyHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{180}
}

func (x *GetCompanyHashResp) GetList() []*CompanyHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetCompanyHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetCompanyHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetCompanyHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type CompanyHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId    int64                  `protobuf:"varint,1,opt,name=companyId,proto3" json:"companyId"`
	CompanyCode  string                 `protobuf:"bytes,2,opt,name=companyCode,proto3" json:"companyCode"`
	InfoHash     string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *CompanyHash) Reset() {
	*x = CompanyHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyHash) ProtoMessage() {}

func (x *CompanyHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyHash.ProtoReflect.Descriptor instead.
func (*CompanyHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{181}
}

func (x *CompanyHash) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *CompanyHash) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *CompanyHash) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *CompanyHash) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

type GetMiHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MiIds     []int64  `protobuf:"varint,2,rep,packed,name=miIds,proto3" json:"miIds"`
	MiCodes   []string `protobuf:"bytes,3,rep,name=miCodes,proto3" json:"miCodes"`
}

func (x *GetMiHashReq) Reset() {
	*x = GetMiHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMiHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMiHashReq) ProtoMessage() {}

func (x *GetMiHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMiHashReq.ProtoReflect.Descriptor instead.
func (*GetMiHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{182}
}

func (x *GetMiHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetMiHashReq) GetMiIds() []int64 {
	if x != nil {
		return x.MiIds
	}
	return nil
}

func (x *GetMiHashReq) GetMiCodes() []string {
	if x != nil {
		return x.MiCodes
	}
	return nil
}

type MiHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId         int64                  `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	MiCode       string                 `protobuf:"bytes,2,opt,name=miCode,proto3" json:"miCode"`
	InfoHash     string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *MiHash) Reset() {
	*x = MiHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiHash) ProtoMessage() {}

func (x *MiHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiHash.ProtoReflect.Descriptor instead.
func (*MiHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{183}
}

func (x *MiHash) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *MiHash) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *MiHash) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *MiHash) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

type GetMiHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*MiHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64     `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64     `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64     `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetMiHashResp) Reset() {
	*x = GetMiHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMiHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMiHashResp) ProtoMessage() {}

func (x *GetMiHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMiHashResp.ProtoReflect.Descriptor instead.
func (*GetMiHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{184}
}

func (x *GetMiHashResp) GetList() []*MiHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetMiHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetMiHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetMiHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetMedicineReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId     int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MedicineIds   []int64  `protobuf:"varint,2,rep,packed,name=medicineIds,proto3" json:"medicineIds"`
	MedicineCodes []string `protobuf:"bytes,3,rep,name=medicineCodes,proto3" json:"medicineCodes"`
}

func (x *GetMedicineReq) Reset() {
	*x = GetMedicineReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMedicineReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedicineReq) ProtoMessage() {}

func (x *GetMedicineReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedicineReq.ProtoReflect.Descriptor instead.
func (*GetMedicineReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{185}
}

func (x *GetMedicineReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetMedicineReq) GetMedicineIds() []int64 {
	if x != nil {
		return x.MedicineIds
	}
	return nil
}

func (x *GetMedicineReq) GetMedicineCodes() []string {
	if x != nil {
		return x.MedicineCodes
	}
	return nil
}

type MedicineHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId   int64                  `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	MedicineCode string                 `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	InfoHash     string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *MedicineHash) Reset() {
	*x = MedicineHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineHash) ProtoMessage() {}

func (x *MedicineHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineHash.ProtoReflect.Descriptor instead.
func (*MedicineHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{186}
}

func (x *MedicineHash) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *MedicineHash) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *MedicineHash) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *MedicineHash) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

type GetMedicineResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*MedicineHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64           `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64           `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetMedicineResp) Reset() {
	*x = GetMedicineResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMedicineResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMedicineResp) ProtoMessage() {}

func (x *GetMedicineResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMedicineResp.ProtoReflect.Descriptor instead.
func (*GetMedicineResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{187}
}

func (x *GetMedicineResp) GetList() []*MedicineHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetMedicineResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetMedicineResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetMedicineResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetContractHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId     int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ContractIds   []int64  `protobuf:"varint,2,rep,packed,name=contractIds,proto3" json:"contractIds"`
	ContractCodes []string `protobuf:"bytes,3,rep,name=contractCodes,proto3" json:"contractCodes"`
}

func (x *GetContractHashReq) Reset() {
	*x = GetContractHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractHashReq) ProtoMessage() {}

func (x *GetContractHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractHashReq.ProtoReflect.Descriptor instead.
func (*GetContractHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{188}
}

func (x *GetContractHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetContractHashReq) GetContractIds() []int64 {
	if x != nil {
		return x.ContractIds
	}
	return nil
}

func (x *GetContractHashReq) GetContractCodes() []string {
	if x != nil {
		return x.ContractCodes
	}
	return nil
}

type ContractHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId   int64                  `protobuf:"varint,1,opt,name=contractId,proto3" json:"contractId"`
	ContractCode string                 `protobuf:"bytes,2,opt,name=contractCode,proto3" json:"contractCode"`
	InfoHash     string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *ContractHash) Reset() {
	*x = ContractHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractHash) ProtoMessage() {}

func (x *ContractHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractHash.ProtoReflect.Descriptor instead.
func (*ContractHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{189}
}

func (x *ContractHash) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *ContractHash) GetContractCode() string {
	if x != nil {
		return x.ContractCode
	}
	return ""
}

func (x *ContractHash) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ContractHash) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

type GetContractHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ContractHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64           `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64           `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetContractHashResp) Reset() {
	*x = GetContractHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractHashResp) ProtoMessage() {}

func (x *GetContractHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractHashResp.ProtoReflect.Descriptor instead.
func (*GetContractHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{190}
}

func (x *GetContractHashResp) GetList() []*ContractHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetContractHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetContractHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetContractHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetContractMiHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId     int64   `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ContractMiIds []int64 `protobuf:"varint,2,rep,packed,name=contractMiIds,proto3" json:"contractMiIds"`
	ContractId    int64   `protobuf:"varint,3,opt,name=contractId,proto3" json:"contractId"`
	ContractCode  string  `protobuf:"bytes,4,opt,name=contractCode,proto3" json:"contractCode"`
}

func (x *GetContractMiHashReq) Reset() {
	*x = GetContractMiHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractMiHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractMiHashReq) ProtoMessage() {}

func (x *GetContractMiHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractMiHashReq.ProtoReflect.Descriptor instead.
func (*GetContractMiHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{191}
}

func (x *GetContractMiHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetContractMiHashReq) GetContractMiIds() []int64 {
	if x != nil {
		return x.ContractMiIds
	}
	return nil
}

func (x *GetContractMiHashReq) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *GetContractMiHashReq) GetContractCode() string {
	if x != nil {
		return x.ContractCode
	}
	return ""
}

type ContractMiHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractMiId int64                  `protobuf:"varint,1,opt,name=contractMiId,proto3" json:"contractMiId"`
	MiId         int64                  `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
	MiCode       string                 `protobuf:"bytes,3,opt,name=miCode,proto3" json:"miCode"`
	InfoHash     string                 `protobuf:"bytes,4,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *ContractMiHash) Reset() {
	*x = ContractMiHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractMiHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractMiHash) ProtoMessage() {}

func (x *ContractMiHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractMiHash.ProtoReflect.Descriptor instead.
func (*ContractMiHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{192}
}

func (x *ContractMiHash) GetContractMiId() int64 {
	if x != nil {
		return x.ContractMiId
	}
	return 0
}

func (x *ContractMiHash) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *ContractMiHash) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ContractMiHash) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ContractMiHash) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

type GetContractMiHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ContractMiHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64             `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64             `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetContractMiHashResp) Reset() {
	*x = GetContractMiHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractMiHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractMiHashResp) ProtoMessage() {}

func (x *GetContractMiHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractMiHashResp.ProtoReflect.Descriptor instead.
func (*GetContractMiHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{193}
}

func (x *GetContractMiHashResp) GetList() []*ContractMiHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetContractMiHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetContractMiHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetContractMiHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetConfigHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId  int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ConfigIds  []int64  `protobuf:"varint,2,rep,packed,name=configIds,proto3" json:"configIds"`
	ConfigKeys []string `protobuf:"bytes,3,rep,name=configKeys,proto3" json:"configKeys"`
	ConfigType string   `protobuf:"bytes,4,opt,name=configType,proto3" json:"configType"`
}

func (x *GetConfigHashReq) Reset() {
	*x = GetConfigHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigHashReq) ProtoMessage() {}

func (x *GetConfigHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigHashReq.ProtoReflect.Descriptor instead.
func (*GetConfigHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{194}
}

func (x *GetConfigHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetConfigHashReq) GetConfigIds() []int64 {
	if x != nil {
		return x.ConfigIds
	}
	return nil
}

func (x *GetConfigHashReq) GetConfigKeys() []string {
	if x != nil {
		return x.ConfigKeys
	}
	return nil
}

func (x *GetConfigHashReq) GetConfigType() string {
	if x != nil {
		return x.ConfigType
	}
	return ""
}

type ConfigHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId     int64                  `protobuf:"varint,1,opt,name=configId,proto3" json:"configId"`
	ConfigKey    string                 `protobuf:"bytes,2,opt,name=configKey,proto3" json:"configKey"`
	InfoHash     string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *ConfigHash) Reset() {
	*x = ConfigHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigHash) ProtoMessage() {}

func (x *ConfigHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigHash.ProtoReflect.Descriptor instead.
func (*ConfigHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{195}
}

func (x *ConfigHash) GetConfigId() int64 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *ConfigHash) GetConfigKey() string {
	if x != nil {
		return x.ConfigKey
	}
	return ""
}

func (x *ConfigHash) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ConfigHash) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

type GetConfigHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ConfigHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64         `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64         `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetConfigHashResp) Reset() {
	*x = GetConfigHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigHashResp) ProtoMessage() {}

func (x *GetConfigHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigHashResp.ProtoReflect.Descriptor instead.
func (*GetConfigHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{196}
}

func (x *GetConfigHashResp) GetList() []*ConfigHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetConfigHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetConfigHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetConfigHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetShipmentPlanHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId       int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ShipmentPlanIds []int64  `protobuf:"varint,2,rep,packed,name=shipmentPlanIds,proto3" json:"shipmentPlanIds"`
	OrderNos        []string `protobuf:"bytes,3,rep,name=orderNos,proto3" json:"orderNos"`
	ShipmentNo      string   `protobuf:"bytes,4,opt,name=shipmentNo,proto3" json:"shipmentNo"`
}

func (x *GetShipmentPlanHashReq) Reset() {
	*x = GetShipmentPlanHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentPlanHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentPlanHashReq) ProtoMessage() {}

func (x *GetShipmentPlanHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentPlanHashReq.ProtoReflect.Descriptor instead.
func (*GetShipmentPlanHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{197}
}

func (x *GetShipmentPlanHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetShipmentPlanHashReq) GetShipmentPlanIds() []int64 {
	if x != nil {
		return x.ShipmentPlanIds
	}
	return nil
}

func (x *GetShipmentPlanHashReq) GetOrderNos() []string {
	if x != nil {
		return x.OrderNos
	}
	return nil
}

func (x *GetShipmentPlanHashReq) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

type ShipmentPlanHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentPlanId          int64                  `protobuf:"varint,1,opt,name=shipmentPlanId,proto3" json:"shipmentPlanId"`
	OrderNo                 string                 `protobuf:"bytes,2,opt,name=orderNo,proto3" json:"orderNo"`
	InfoHash                string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt            *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
	QrCodeHash              string                 `protobuf:"bytes,5,opt,name=qrCodeHash,proto3" json:"qrCodeHash"`
	QrCodeUploadAt          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=qrCodeUploadAt,proto3" json:"qrCodeUploadAt"`
	ShipmentStartHash       string                 `protobuf:"bytes,7,opt,name=shipmentStartHash,proto3" json:"shipmentStartHash"`
	ShipmentStartUploadAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=shipmentStartUploadAt,proto3" json:"shipmentStartUploadAt"`
	ShipmentReceiveHash     string                 `protobuf:"bytes,9,opt,name=shipmentReceiveHash,proto3" json:"shipmentReceiveHash"`
	ShipmentReceiveUploadAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=shipmentReceiveUploadAt,proto3" json:"shipmentReceiveUploadAt"`
	ShipmentEnterHash       string                 `protobuf:"bytes,11,opt,name=shipmentEnterHash,proto3" json:"shipmentEnterHash"`
	ShipmentEnterUploadAt   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=shipmentEnterUploadAt,proto3" json:"shipmentEnterUploadAt"`
}

func (x *ShipmentPlanHash) Reset() {
	*x = ShipmentPlanHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentPlanHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentPlanHash) ProtoMessage() {}

func (x *ShipmentPlanHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentPlanHash.ProtoReflect.Descriptor instead.
func (*ShipmentPlanHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{198}
}

func (x *ShipmentPlanHash) GetShipmentPlanId() int64 {
	if x != nil {
		return x.ShipmentPlanId
	}
	return 0
}

func (x *ShipmentPlanHash) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *ShipmentPlanHash) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ShipmentPlanHash) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

func (x *ShipmentPlanHash) GetQrCodeHash() string {
	if x != nil {
		return x.QrCodeHash
	}
	return ""
}

func (x *ShipmentPlanHash) GetQrCodeUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.QrCodeUploadAt
	}
	return nil
}

func (x *ShipmentPlanHash) GetShipmentStartHash() string {
	if x != nil {
		return x.ShipmentStartHash
	}
	return ""
}

func (x *ShipmentPlanHash) GetShipmentStartUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ShipmentStartUploadAt
	}
	return nil
}

func (x *ShipmentPlanHash) GetShipmentReceiveHash() string {
	if x != nil {
		return x.ShipmentReceiveHash
	}
	return ""
}

func (x *ShipmentPlanHash) GetShipmentReceiveUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ShipmentReceiveUploadAt
	}
	return nil
}

func (x *ShipmentPlanHash) GetShipmentEnterHash() string {
	if x != nil {
		return x.ShipmentEnterHash
	}
	return ""
}

func (x *ShipmentPlanHash) GetShipmentEnterUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ShipmentEnterUploadAt
	}
	return nil
}

type GetShipmentPlanHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentPlanHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64               `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64               `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64               `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentPlanHashResp) Reset() {
	*x = GetShipmentPlanHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentPlanHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentPlanHashResp) ProtoMessage() {}

func (x *GetShipmentPlanHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentPlanHashResp.ProtoReflect.Descriptor instead.
func (*GetShipmentPlanHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{199}
}

func (x *GetShipmentPlanHashResp) GetList() []*ShipmentPlanHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentPlanHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentPlanHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentPlanHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetShipmentOrderHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId        int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ShipmentOrderIds []int64  `protobuf:"varint,2,rep,packed,name=shipmentOrderIds,proto3" json:"shipmentOrderIds"`
	ShipmentNos      []string `protobuf:"bytes,3,rep,name=shipmentNos,proto3" json:"shipmentNos"`
}

func (x *GetShipmentOrderHashReq) Reset() {
	*x = GetShipmentOrderHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentOrderHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentOrderHashReq) ProtoMessage() {}

func (x *GetShipmentOrderHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentOrderHashReq.ProtoReflect.Descriptor instead.
func (*GetShipmentOrderHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{200}
}

func (x *GetShipmentOrderHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetShipmentOrderHashReq) GetShipmentOrderIds() []int64 {
	if x != nil {
		return x.ShipmentOrderIds
	}
	return nil
}

func (x *GetShipmentOrderHashReq) GetShipmentNos() []string {
	if x != nil {
		return x.ShipmentNos
	}
	return nil
}

type ShipmentOrderHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentOrderId         int64                  `protobuf:"varint,1,opt,name=shipmentOrderId,proto3" json:"shipmentOrderId"`
	ShipmentNo              string                 `protobuf:"bytes,2,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	QrCodeHash              string                 `protobuf:"bytes,3,opt,name=qrCodeHash,proto3" json:"qrCodeHash"`
	QrCodeUploadAt          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=qrCodeUploadAt,proto3" json:"qrCodeUploadAt"`
	ShipmentStartHash       string                 `protobuf:"bytes,5,opt,name=shipmentStartHash,proto3" json:"shipmentStartHash"`
	ShipmentStartUploadAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=shipmentStartUploadAt,proto3" json:"shipmentStartUploadAt"`
	ShipmentReceiveHash     string                 `protobuf:"bytes,7,opt,name=shipmentReceiveHash,proto3" json:"shipmentReceiveHash"`
	ShipmentReceiveUploadAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=shipmentReceiveUploadAt,proto3" json:"shipmentReceiveUploadAt"`
	ShipmentEnterHash       string                 `protobuf:"bytes,9,opt,name=shipmentEnterHash,proto3" json:"shipmentEnterHash"`
	ShipmentEnterUploadAt   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=shipmentEnterUploadAt,proto3" json:"shipmentEnterUploadAt"`
}

func (x *ShipmentOrderHash) Reset() {
	*x = ShipmentOrderHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentOrderHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentOrderHash) ProtoMessage() {}

func (x *ShipmentOrderHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentOrderHash.ProtoReflect.Descriptor instead.
func (*ShipmentOrderHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{201}
}

func (x *ShipmentOrderHash) GetShipmentOrderId() int64 {
	if x != nil {
		return x.ShipmentOrderId
	}
	return 0
}

func (x *ShipmentOrderHash) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *ShipmentOrderHash) GetQrCodeHash() string {
	if x != nil {
		return x.QrCodeHash
	}
	return ""
}

func (x *ShipmentOrderHash) GetQrCodeUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.QrCodeUploadAt
	}
	return nil
}

func (x *ShipmentOrderHash) GetShipmentStartHash() string {
	if x != nil {
		return x.ShipmentStartHash
	}
	return ""
}

func (x *ShipmentOrderHash) GetShipmentStartUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ShipmentStartUploadAt
	}
	return nil
}

func (x *ShipmentOrderHash) GetShipmentReceiveHash() string {
	if x != nil {
		return x.ShipmentReceiveHash
	}
	return ""
}

func (x *ShipmentOrderHash) GetShipmentReceiveUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ShipmentReceiveUploadAt
	}
	return nil
}

func (x *ShipmentOrderHash) GetShipmentEnterHash() string {
	if x != nil {
		return x.ShipmentEnterHash
	}
	return ""
}

func (x *ShipmentOrderHash) GetShipmentEnterUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ShipmentEnterUploadAt
	}
	return nil
}

type GetShipmentOrderHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentOrderHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentOrderHashResp) Reset() {
	*x = GetShipmentOrderHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentOrderHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentOrderHashResp) ProtoMessage() {}

func (x *GetShipmentOrderHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentOrderHashResp.ProtoReflect.Descriptor instead.
func (*GetShipmentOrderHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{202}
}

func (x *GetShipmentOrderHashResp) GetList() []*ShipmentOrderHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentOrderHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentOrderHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentOrderHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetShipmentPayHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId           int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ShipmentOrderIds    []int64  `protobuf:"varint,2,rep,packed,name=shipmentOrderIds,proto3" json:"shipmentOrderIds"`
	ShipmentPayOrderIds []int64  `protobuf:"varint,3,rep,packed,name=shipmentPayOrderIds,proto3" json:"shipmentPayOrderIds"`
	ShipmentNos         []string `protobuf:"bytes,4,rep,name=shipmentNos,proto3" json:"shipmentNos"`
}

func (x *GetShipmentPayHashReq) Reset() {
	*x = GetShipmentPayHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentPayHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentPayHashReq) ProtoMessage() {}

func (x *GetShipmentPayHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentPayHashReq.ProtoReflect.Descriptor instead.
func (*GetShipmentPayHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{203}
}

func (x *GetShipmentPayHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetShipmentPayHashReq) GetShipmentOrderIds() []int64 {
	if x != nil {
		return x.ShipmentOrderIds
	}
	return nil
}

func (x *GetShipmentPayHashReq) GetShipmentPayOrderIds() []int64 {
	if x != nil {
		return x.ShipmentPayOrderIds
	}
	return nil
}

func (x *GetShipmentPayHashReq) GetShipmentNos() []string {
	if x != nil {
		return x.ShipmentNos
	}
	return nil
}

type ShipmentPayHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipmentOrderId int64                  `protobuf:"varint,1,opt,name=shipmentOrderId,proto3" json:"shipmentOrderId"`
	ShipmentNo      string                 `protobuf:"bytes,2,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	InfoHash        string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
	ResultHash      string                 `protobuf:"bytes,5,opt,name=resultHash,proto3" json:"resultHash"`
	ResultUploadAt  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=resultUploadAt,proto3" json:"resultUploadAt"`
}

func (x *ShipmentPayHash) Reset() {
	*x = ShipmentPayHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentPayHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentPayHash) ProtoMessage() {}

func (x *ShipmentPayHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentPayHash.ProtoReflect.Descriptor instead.
func (*ShipmentPayHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{204}
}

func (x *ShipmentPayHash) GetShipmentOrderId() int64 {
	if x != nil {
		return x.ShipmentOrderId
	}
	return 0
}

func (x *ShipmentPayHash) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *ShipmentPayHash) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *ShipmentPayHash) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

func (x *ShipmentPayHash) GetResultHash() string {
	if x != nil {
		return x.ResultHash
	}
	return ""
}

func (x *ShipmentPayHash) GetResultUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ResultUploadAt
	}
	return nil
}

type GetShipmentPayHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentPayHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64              `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64              `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentPayHashResp) Reset() {
	*x = GetShipmentPayHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentPayHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentPayHashResp) ProtoMessage() {}

func (x *GetShipmentPayHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentPayHashResp.ProtoReflect.Descriptor instead.
func (*GetShipmentPayHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{205}
}

func (x *GetShipmentPayHashResp) GetList() []*ShipmentPayHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentPayHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentPayHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentPayHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetShipmentFactoringHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId         int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	FactoringOrderIds []int64  `protobuf:"varint,2,rep,packed,name=factoringOrderIds,proto3" json:"factoringOrderIds"`
	FactoringOrderNos []string `protobuf:"bytes,3,rep,name=factoringOrderNos,proto3" json:"factoringOrderNos"`
}

func (x *GetShipmentFactoringHashReq) Reset() {
	*x = GetShipmentFactoringHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentFactoringHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentFactoringHashReq) ProtoMessage() {}

func (x *GetShipmentFactoringHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentFactoringHashReq.ProtoReflect.Descriptor instead.
func (*GetShipmentFactoringHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{206}
}

func (x *GetShipmentFactoringHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetShipmentFactoringHashReq) GetFactoringOrderIds() []int64 {
	if x != nil {
		return x.FactoringOrderIds
	}
	return nil
}

func (x *GetShipmentFactoringHashReq) GetFactoringOrderNos() []string {
	if x != nil {
		return x.FactoringOrderNos
	}
	return nil
}

type ShipmentFactoringHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FactoringOrderId int64                  `protobuf:"varint,1,opt,name=factoringOrderId,proto3" json:"factoringOrderId"`
	FactoringOrderNo string                 `protobuf:"bytes,2,opt,name=factoringOrderNo,proto3" json:"factoringOrderNo"`
	ApplyHash        string                 `protobuf:"bytes,3,opt,name=applyHash,proto3" json:"applyHash"`
	ApplyUploadAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=applyUploadAt,proto3" json:"applyUploadAt"`
	ResultHash       string                 `protobuf:"bytes,5,opt,name=resultHash,proto3" json:"resultHash"`
	ResultUploadAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=resultUploadAt,proto3" json:"resultUploadAt"`
	PayBackHash      string                 `protobuf:"bytes,7,opt,name=payBackHash,proto3" json:"payBackHash"`
	PayBackUploadAt  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=payBackUploadAt,proto3" json:"payBackUploadAt"`
}

func (x *ShipmentFactoringHash) Reset() {
	*x = ShipmentFactoringHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentFactoringHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentFactoringHash) ProtoMessage() {}

func (x *ShipmentFactoringHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentFactoringHash.ProtoReflect.Descriptor instead.
func (*ShipmentFactoringHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{207}
}

func (x *ShipmentFactoringHash) GetFactoringOrderId() int64 {
	if x != nil {
		return x.FactoringOrderId
	}
	return 0
}

func (x *ShipmentFactoringHash) GetFactoringOrderNo() string {
	if x != nil {
		return x.FactoringOrderNo
	}
	return ""
}

func (x *ShipmentFactoringHash) GetApplyHash() string {
	if x != nil {
		return x.ApplyHash
	}
	return ""
}

func (x *ShipmentFactoringHash) GetApplyUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApplyUploadAt
	}
	return nil
}

func (x *ShipmentFactoringHash) GetResultHash() string {
	if x != nil {
		return x.ResultHash
	}
	return ""
}

func (x *ShipmentFactoringHash) GetResultUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ResultUploadAt
	}
	return nil
}

func (x *ShipmentFactoringHash) GetPayBackHash() string {
	if x != nil {
		return x.PayBackHash
	}
	return ""
}

func (x *ShipmentFactoringHash) GetPayBackUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PayBackUploadAt
	}
	return nil
}

type GetShipmentFactoringHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentFactoringHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                    `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                    `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                    `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentFactoringHashResp) Reset() {
	*x = GetShipmentFactoringHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentFactoringHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentFactoringHashResp) ProtoMessage() {}

func (x *GetShipmentFactoringHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentFactoringHashResp.ProtoReflect.Descriptor instead.
func (*GetShipmentFactoringHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{208}
}

func (x *GetShipmentFactoringHashResp) GetList() []*ShipmentFactoringHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentFactoringHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentFactoringHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentFactoringHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListMessageHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId  int64   `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MessageIds []int64 `protobuf:"varint,2,rep,packed,name=messageIds,proto3" json:"messageIds"`
}

func (x *ListMessageHashReq) Reset() {
	*x = ListMessageHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMessageHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessageHashReq) ProtoMessage() {}

func (x *ListMessageHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessageHashReq.ProtoReflect.Descriptor instead.
func (*ListMessageHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{209}
}

func (x *ListMessageHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListMessageHashReq) GetMessageIds() []int64 {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

type MessageListHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainMessageId int64                  `protobuf:"varint,1,opt,name=uploadChainMessageId,proto3" json:"uploadChainMessageId"`
	MessageId            int64                  `protobuf:"varint,2,opt,name=messageId,proto3" json:"messageId"`
	InfoHash             string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *MessageListHash) Reset() {
	*x = MessageListHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageListHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageListHash) ProtoMessage() {}

func (x *MessageListHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageListHash.ProtoReflect.Descriptor instead.
func (*MessageListHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{210}
}

func (x *MessageListHash) GetUploadChainMessageId() int64 {
	if x != nil {
		return x.UploadChainMessageId
	}
	return 0
}

func (x *MessageListHash) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *MessageListHash) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *MessageListHash) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

type ListMessageHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*MessageListHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64              `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64              `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListMessageHashResp) Reset() {
	*x = ListMessageHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMessageHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessageHashResp) ProtoMessage() {}

func (x *ListMessageHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessageHashResp.ProtoReflect.Descriptor instead.
func (*ListMessageHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{211}
}

func (x *ListMessageHashResp) GetList() []*MessageListHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListMessageHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListMessageHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMessageHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetShipmentRankMedicineDataYearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId int64 `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	//报表的起止日期必填
	StartAt   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=startAt,proto3" json:"startAt"`
	EndAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=endAt,proto3" json:"endAt"`
	RankCount int64                  `protobuf:"varint,5,opt,name=rankCount,proto3" json:"rankCount"`
	//显示哪家医疗机构的排名数据
	MiId int64 `protobuf:"varint,6,opt,name=miId,proto3" json:"miId"`
}

func (x *GetShipmentRankMedicineDataYearReq) Reset() {
	*x = GetShipmentRankMedicineDataYearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentRankMedicineDataYearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentRankMedicineDataYearReq) ProtoMessage() {}

func (x *GetShipmentRankMedicineDataYearReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentRankMedicineDataYearReq.ProtoReflect.Descriptor instead.
func (*GetShipmentRankMedicineDataYearReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{212}
}

func (x *GetShipmentRankMedicineDataYearReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetShipmentRankMedicineDataYearReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetShipmentRankMedicineDataYearReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *GetShipmentRankMedicineDataYearReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *GetShipmentRankMedicineDataYearReq) GetRankCount() int64 {
	if x != nil {
		return x.RankCount
	}
	return 0
}

func (x *GetShipmentRankMedicineDataYearReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

type ShipmentRankMedicineDataYear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank int64 `protobuf:"varint,1,opt,name=rank,proto3" json:"rank"`
	//本年配送计划同步金额 分
	ShipmentPlanAmount int64  `protobuf:"varint,2,opt,name=shipmentPlanAmount,proto3" json:"shipmentPlanAmount"`
	MedicineName       string `protobuf:"bytes,3,opt,name=medicineName,proto3" json:"medicineName"`
}

func (x *ShipmentRankMedicineDataYear) Reset() {
	*x = ShipmentRankMedicineDataYear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentRankMedicineDataYear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentRankMedicineDataYear) ProtoMessage() {}

func (x *ShipmentRankMedicineDataYear) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentRankMedicineDataYear.ProtoReflect.Descriptor instead.
func (*ShipmentRankMedicineDataYear) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{213}
}

func (x *ShipmentRankMedicineDataYear) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ShipmentRankMedicineDataYear) GetShipmentPlanAmount() int64 {
	if x != nil {
		return x.ShipmentPlanAmount
	}
	return 0
}

func (x *ShipmentRankMedicineDataYear) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

type GetShipmentRankMedicineDataYearResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentRankMedicineDataYear `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                           `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                           `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                           `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentRankMedicineDataYearResp) Reset() {
	*x = GetShipmentRankMedicineDataYearResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentRankMedicineDataYearResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentRankMedicineDataYearResp) ProtoMessage() {}

func (x *GetShipmentRankMedicineDataYearResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentRankMedicineDataYearResp.ProtoReflect.Descriptor instead.
func (*GetShipmentRankMedicineDataYearResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{214}
}

func (x *GetShipmentRankMedicineDataYearResp) GetList() []*ShipmentRankMedicineDataYear {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentRankMedicineDataYearResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentRankMedicineDataYearResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentRankMedicineDataYearResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetShipmentRankCompanyDataYearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId int64 `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	//报表的起止日期必填
	StartAt   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=startAt,proto3" json:"startAt"`
	EndAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=endAt,proto3" json:"endAt"`
	RankCount int64                  `protobuf:"varint,5,opt,name=rankCount,proto3" json:"rankCount"`
	//需要展示的药品数量
	MedicineCount int64 `protobuf:"varint,6,opt,name=medicineCount,proto3" json:"medicineCount"`
	//显示哪家医疗机构的排名数据
	MiId int64 `protobuf:"varint,7,opt,name=miId,proto3" json:"miId"`
}

func (x *GetShipmentRankCompanyDataYearReq) Reset() {
	*x = GetShipmentRankCompanyDataYearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentRankCompanyDataYearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentRankCompanyDataYearReq) ProtoMessage() {}

func (x *GetShipmentRankCompanyDataYearReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentRankCompanyDataYearReq.ProtoReflect.Descriptor instead.
func (*GetShipmentRankCompanyDataYearReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{215}
}

func (x *GetShipmentRankCompanyDataYearReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetShipmentRankCompanyDataYearReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetShipmentRankCompanyDataYearReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *GetShipmentRankCompanyDataYearReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *GetShipmentRankCompanyDataYearReq) GetRankCount() int64 {
	if x != nil {
		return x.RankCount
	}
	return 0
}

func (x *GetShipmentRankCompanyDataYearReq) GetMedicineCount() int64 {
	if x != nil {
		return x.MedicineCount
	}
	return 0
}

func (x *GetShipmentRankCompanyDataYearReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

type ShipmentRankCompanyMedicine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName string `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
}

func (x *ShipmentRankCompanyMedicine) Reset() {
	*x = ShipmentRankCompanyMedicine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentRankCompanyMedicine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentRankCompanyMedicine) ProtoMessage() {}

func (x *ShipmentRankCompanyMedicine) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentRankCompanyMedicine.ProtoReflect.Descriptor instead.
func (*ShipmentRankCompanyMedicine) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{216}
}

func (x *ShipmentRankCompanyMedicine) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

type ShipmentRankCompanyDataYear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank               int64                          `protobuf:"varint,1,opt,name=rank,proto3" json:"rank"`
	ComName            string                         `protobuf:"bytes,2,opt,name=comName,proto3" json:"comName"`
	ComCode            string                         `protobuf:"bytes,3,opt,name=comCode,proto3" json:"comCode"`
	ShipmentPlanAmount int64                          `protobuf:"varint,4,opt,name=shipmentPlanAmount,proto3" json:"shipmentPlanAmount"`
	Province           string                         `protobuf:"bytes,5,opt,name=province,proto3" json:"province"`
	City               string                         `protobuf:"bytes,6,opt,name=city,proto3" json:"city"`
	Zone               string                         `protobuf:"bytes,7,opt,name=zone,proto3" json:"zone"`
	Medicines          []*ShipmentRankCompanyMedicine `protobuf:"bytes,8,rep,name=medicines,proto3" json:"medicines"`
}

func (x *ShipmentRankCompanyDataYear) Reset() {
	*x = ShipmentRankCompanyDataYear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentRankCompanyDataYear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentRankCompanyDataYear) ProtoMessage() {}

func (x *ShipmentRankCompanyDataYear) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentRankCompanyDataYear.ProtoReflect.Descriptor instead.
func (*ShipmentRankCompanyDataYear) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{217}
}

func (x *ShipmentRankCompanyDataYear) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ShipmentRankCompanyDataYear) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

func (x *ShipmentRankCompanyDataYear) GetComCode() string {
	if x != nil {
		return x.ComCode
	}
	return ""
}

func (x *ShipmentRankCompanyDataYear) GetShipmentPlanAmount() int64 {
	if x != nil {
		return x.ShipmentPlanAmount
	}
	return 0
}

func (x *ShipmentRankCompanyDataYear) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ShipmentRankCompanyDataYear) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ShipmentRankCompanyDataYear) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ShipmentRankCompanyDataYear) GetMedicines() []*ShipmentRankCompanyMedicine {
	if x != nil {
		return x.Medicines
	}
	return nil
}

type GetShipmentRankCompanyDataYearResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ShipmentRankCompanyDataYear `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                          `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                          `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                          `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentRankCompanyDataYearResp) Reset() {
	*x = GetShipmentRankCompanyDataYearResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentRankCompanyDataYearResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentRankCompanyDataYearResp) ProtoMessage() {}

func (x *GetShipmentRankCompanyDataYearResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentRankCompanyDataYearResp.ProtoReflect.Descriptor instead.
func (*GetShipmentRankCompanyDataYearResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{218}
}

func (x *GetShipmentRankCompanyDataYearResp) GetList() []*ShipmentRankCompanyDataYear {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentRankCompanyDataYearResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentRankCompanyDataYearResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentRankCompanyDataYearResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetRankMiReceiveYearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId int64 `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	//0表示当前前年 -1为去年
	YearOffset int64 `protobuf:"varint,3,opt,name=yearOffset,proto3" json:"yearOffset"`
	//报表的起止日期必填
	RankCount int64 `protobuf:"varint,4,opt,name=rankCount,proto3" json:"rankCount"`
}

func (x *GetRankMiReceiveYearReq) Reset() {
	*x = GetRankMiReceiveYearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankMiReceiveYearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankMiReceiveYearReq) ProtoMessage() {}

func (x *GetRankMiReceiveYearReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankMiReceiveYearReq.ProtoReflect.Descriptor instead.
func (*GetRankMiReceiveYearReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{219}
}

func (x *GetRankMiReceiveYearReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetRankMiReceiveYearReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetRankMiReceiveYearReq) GetYearOffset() int64 {
	if x != nil {
		return x.YearOffset
	}
	return 0
}

func (x *GetRankMiReceiveYearReq) GetRankCount() int64 {
	if x != nil {
		return x.RankCount
	}
	return 0
}

type RankMiReceiveYear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank                       int64                       `protobuf:"varint,1,opt,name=rank,proto3" json:"rank"`
	MiName                     string                      `protobuf:"bytes,2,opt,name=miName,proto3" json:"miName"`
	ShipmentOrderReceiveAmount int64                       `protobuf:"varint,3,opt,name=shipmentOrderReceiveAmount,proto3" json:"shipmentOrderReceiveAmount"`
	ShipmentOrderMonthReports  []*ShipmentOrderMonthReport `protobuf:"bytes,4,rep,name=shipmentOrderMonthReports,proto3" json:"shipmentOrderMonthReports"`
}

func (x *RankMiReceiveYear) Reset() {
	*x = RankMiReceiveYear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankMiReceiveYear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankMiReceiveYear) ProtoMessage() {}

func (x *RankMiReceiveYear) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankMiReceiveYear.ProtoReflect.Descriptor instead.
func (*RankMiReceiveYear) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{220}
}

func (x *RankMiReceiveYear) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RankMiReceiveYear) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *RankMiReceiveYear) GetShipmentOrderReceiveAmount() int64 {
	if x != nil {
		return x.ShipmentOrderReceiveAmount
	}
	return 0
}

func (x *RankMiReceiveYear) GetShipmentOrderMonthReports() []*ShipmentOrderMonthReport {
	if x != nil {
		return x.ShipmentOrderMonthReports
	}
	return nil
}

type GetRankMiReceiveYearResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*RankMiReceiveYear `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetRankMiReceiveYearResp) Reset() {
	*x = GetRankMiReceiveYearResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankMiReceiveYearResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankMiReceiveYearResp) ProtoMessage() {}

func (x *GetRankMiReceiveYearResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankMiReceiveYearResp.ProtoReflect.Descriptor instead.
func (*GetRankMiReceiveYearResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{221}
}

func (x *GetRankMiReceiveYearResp) GetList() []*RankMiReceiveYear {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetRankMiReceiveYearResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetRankMiReceiveYearResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetRankMiReceiveYearResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetRankComReceiveYearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId int64 `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	//0表示当前前年 -1为去年
	YearOffset int64 `protobuf:"varint,3,opt,name=yearOffset,proto3" json:"yearOffset"`
	//报表的起止日期必填
	RankCount int64 `protobuf:"varint,4,opt,name=rankCount,proto3" json:"rankCount"`
}

func (x *GetRankComReceiveYearReq) Reset() {
	*x = GetRankComReceiveYearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankComReceiveYearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankComReceiveYearReq) ProtoMessage() {}

func (x *GetRankComReceiveYearReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankComReceiveYearReq.ProtoReflect.Descriptor instead.
func (*GetRankComReceiveYearReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{222}
}

func (x *GetRankComReceiveYearReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetRankComReceiveYearReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetRankComReceiveYearReq) GetYearOffset() int64 {
	if x != nil {
		return x.YearOffset
	}
	return 0
}

func (x *GetRankComReceiveYearReq) GetRankCount() int64 {
	if x != nil {
		return x.RankCount
	}
	return 0
}

type RankComReceiveYear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank                     int64  `protobuf:"varint,1,opt,name=rank,proto3" json:"rank"`
	CompanyName              string `protobuf:"bytes,2,opt,name=companyName,proto3" json:"companyName"`
	ShipmentPlanReceiveCount int64  `protobuf:"varint,3,opt,name=shipmentPlanReceiveCount,proto3" json:"shipmentPlanReceiveCount"`
	ShipmentPlanNotSentCount int64  `protobuf:"varint,4,opt,name=shipmentPlanNotSentCount,proto3" json:"shipmentPlanNotSentCount"`
}

func (x *RankComReceiveYear) Reset() {
	*x = RankComReceiveYear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankComReceiveYear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankComReceiveYear) ProtoMessage() {}

func (x *RankComReceiveYear) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankComReceiveYear.ProtoReflect.Descriptor instead.
func (*RankComReceiveYear) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{223}
}

func (x *RankComReceiveYear) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RankComReceiveYear) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *RankComReceiveYear) GetShipmentPlanReceiveCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveCount
	}
	return 0
}

func (x *RankComReceiveYear) GetShipmentPlanNotSentCount() int64 {
	if x != nil {
		return x.ShipmentPlanNotSentCount
	}
	return 0
}

type GetRankComReceiveYearResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*RankComReceiveYear `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                 `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                 `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetRankComReceiveYearResp) Reset() {
	*x = GetRankComReceiveYearResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankComReceiveYearResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankComReceiveYearResp) ProtoMessage() {}

func (x *GetRankComReceiveYearResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankComReceiveYearResp.ProtoReflect.Descriptor instead.
func (*GetRankComReceiveYearResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{224}
}

func (x *GetRankComReceiveYearResp) GetList() []*RankComReceiveYear {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetRankComReceiveYearResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetRankComReceiveYearResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetRankComReceiveYearResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetRankMiPaidYearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId int64 `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	//0表示当前前年 -1为去年
	YearOffset int64 `protobuf:"varint,3,opt,name=yearOffset,proto3" json:"yearOffset"`
	//报表的起止日期必填
	RankCount int64 `protobuf:"varint,4,opt,name=rankCount,proto3" json:"rankCount"`
}

func (x *GetRankMiPaidYearReq) Reset() {
	*x = GetRankMiPaidYearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankMiPaidYearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankMiPaidYearReq) ProtoMessage() {}

func (x *GetRankMiPaidYearReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankMiPaidYearReq.ProtoReflect.Descriptor instead.
func (*GetRankMiPaidYearReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{225}
}

func (x *GetRankMiPaidYearReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetRankMiPaidYearReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetRankMiPaidYearReq) GetYearOffset() int64 {
	if x != nil {
		return x.YearOffset
	}
	return 0
}

func (x *GetRankMiPaidYearReq) GetRankCount() int64 {
	if x != nil {
		return x.RankCount
	}
	return 0
}

type RankMiPaidYear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank                          int64  `protobuf:"varint,1,opt,name=rank,proto3" json:"rank"`
	MiName                        string `protobuf:"bytes,2,opt,name=miName,proto3" json:"miName"`
	ShipmentOrderPaidAmount       int64  `protobuf:"varint,3,opt,name=shipmentOrderPaidAmount,proto3" json:"shipmentOrderPaidAmount"`
	ShipmentOrderNormalPayAmount  int64  `protobuf:"varint,4,opt,name=shipmentOrderNormalPayAmount,proto3" json:"shipmentOrderNormalPayAmount"`
	ShipmentOrderSpecialPayAmount int64  `protobuf:"varint,5,opt,name=shipmentOrderSpecialPayAmount,proto3" json:"shipmentOrderSpecialPayAmount"`
}

func (x *RankMiPaidYear) Reset() {
	*x = RankMiPaidYear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankMiPaidYear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankMiPaidYear) ProtoMessage() {}

func (x *RankMiPaidYear) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankMiPaidYear.ProtoReflect.Descriptor instead.
func (*RankMiPaidYear) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{226}
}

func (x *RankMiPaidYear) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RankMiPaidYear) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *RankMiPaidYear) GetShipmentOrderPaidAmount() int64 {
	if x != nil {
		return x.ShipmentOrderPaidAmount
	}
	return 0
}

func (x *RankMiPaidYear) GetShipmentOrderNormalPayAmount() int64 {
	if x != nil {
		return x.ShipmentOrderNormalPayAmount
	}
	return 0
}

func (x *RankMiPaidYear) GetShipmentOrderSpecialPayAmount() int64 {
	if x != nil {
		return x.ShipmentOrderSpecialPayAmount
	}
	return 0
}

type GetRankMiPaidYearResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*RankMiPaidYear `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64             `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64             `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetRankMiPaidYearResp) Reset() {
	*x = GetRankMiPaidYearResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankMiPaidYearResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankMiPaidYearResp) ProtoMessage() {}

func (x *GetRankMiPaidYearResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankMiPaidYearResp.ProtoReflect.Descriptor instead.
func (*GetRankMiPaidYearResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{227}
}

func (x *GetRankMiPaidYearResp) GetList() []*RankMiPaidYear {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetRankMiPaidYearResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetRankMiPaidYearResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetRankMiPaidYearResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetRankMedicineYearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId int64 `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	//0表示当前前年 -1为去年
	YearOffset int64 `protobuf:"varint,3,opt,name=yearOffset,proto3" json:"yearOffset"`
	//报表的起止日期必填
	RankCount int64 `protobuf:"varint,4,opt,name=rankCount,proto3" json:"rankCount"`
}

func (x *GetRankMedicineYearReq) Reset() {
	*x = GetRankMedicineYearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankMedicineYearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankMedicineYearReq) ProtoMessage() {}

func (x *GetRankMedicineYearReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankMedicineYearReq.ProtoReflect.Descriptor instead.
func (*GetRankMedicineYearReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{228}
}

func (x *GetRankMedicineYearReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetRankMedicineYearReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetRankMedicineYearReq) GetYearOffset() int64 {
	if x != nil {
		return x.YearOffset
	}
	return 0
}

func (x *GetRankMedicineYearReq) GetRankCount() int64 {
	if x != nil {
		return x.RankCount
	}
	return 0
}

type RankMedicineYear struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank                         int64  `protobuf:"varint,1,opt,name=rank,proto3" json:"rank"`
	MedicineName                 string `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	ShipmentPlanReceiveUnitCount int64  `protobuf:"varint,3,opt,name=shipmentPlanReceiveUnitCount,proto3" json:"shipmentPlanReceiveUnitCount"`
}

func (x *RankMedicineYear) Reset() {
	*x = RankMedicineYear{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankMedicineYear) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankMedicineYear) ProtoMessage() {}

func (x *RankMedicineYear) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankMedicineYear.ProtoReflect.Descriptor instead.
func (*RankMedicineYear) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{229}
}

func (x *RankMedicineYear) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RankMedicineYear) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *RankMedicineYear) GetShipmentPlanReceiveUnitCount() int64 {
	if x != nil {
		return x.ShipmentPlanReceiveUnitCount
	}
	return 0
}

type GetRankMedicineYearResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*RankMedicineYear `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64               `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64               `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64               `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetRankMedicineYearResp) Reset() {
	*x = GetRankMedicineYearResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankMedicineYearResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankMedicineYearResp) ProtoMessage() {}

func (x *GetRankMedicineYearResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankMedicineYearResp.ProtoReflect.Descriptor instead.
func (*GetRankMedicineYearResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{230}
}

func (x *GetRankMedicineYearResp) GetList() []*RankMedicineYear {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetRankMedicineYearResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetRankMedicineYearResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetRankMedicineYearResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetMIBDashboardBaseInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	//指定获取哪个医保局的订单报表数据，目前不支持不同医保局混合统计
	MibId    int64  `protobuf:"varint,2,opt,name=mibId,proto3" json:"mibId"`
	Province string `protobuf:"bytes,3,opt,name=province,proto3" json:"province"`
	City     string `protobuf:"bytes,4,opt,name=city,proto3" json:"city"`
}

func (x *GetMIBDashboardBaseInfoReq) Reset() {
	*x = GetMIBDashboardBaseInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMIBDashboardBaseInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMIBDashboardBaseInfoReq) ProtoMessage() {}

func (x *GetMIBDashboardBaseInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMIBDashboardBaseInfoReq.ProtoReflect.Descriptor instead.
func (*GetMIBDashboardBaseInfoReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{231}
}

func (x *GetMIBDashboardBaseInfoReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetMIBDashboardBaseInfoReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *GetMIBDashboardBaseInfoReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *GetMIBDashboardBaseInfoReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

type GetMIBDashboardBaseInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Companies []*ListCompanyVo `protobuf:"bytes,1,rep,name=companies,proto3" json:"companies"`
	Mis       []*ListMiVo      `protobuf:"bytes,2,rep,name=mis,proto3" json:"mis"`
}

func (x *GetMIBDashboardBaseInfoResp) Reset() {
	*x = GetMIBDashboardBaseInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMIBDashboardBaseInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMIBDashboardBaseInfoResp) ProtoMessage() {}

func (x *GetMIBDashboardBaseInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMIBDashboardBaseInfoResp.ProtoReflect.Descriptor instead.
func (*GetMIBDashboardBaseInfoResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{232}
}

func (x *GetMIBDashboardBaseInfoResp) GetCompanies() []*ListCompanyVo {
	if x != nil {
		return x.Companies
	}
	return nil
}

func (x *GetMIBDashboardBaseInfoResp) GetMis() []*ListMiVo {
	if x != nil {
		return x.Mis
	}
	return nil
}

type ListCompanyBindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId   int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	CompanyName string   `protobuf:"bytes,2,opt,name=companyName,proto3" json:"companyName"`
	CompanyCode string   `protobuf:"bytes,3,opt,name=companyCode,proto3" json:"companyCode"`
	Page        *Page    `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
	LinkTypes   []string `protobuf:"bytes,5,rep,name=linkTypes,proto3" json:"linkTypes"`
}

func (x *ListCompanyBindReq) Reset() {
	*x = ListCompanyBindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompanyBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyBindReq) ProtoMessage() {}

func (x *ListCompanyBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyBindReq.ProtoReflect.Descriptor instead.
func (*ListCompanyBindReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{233}
}

func (x *ListCompanyBindReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListCompanyBindReq) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *ListCompanyBindReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *ListCompanyBindReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListCompanyBindReq) GetLinkTypes() []string {
	if x != nil {
		return x.LinkTypes
	}
	return nil
}

type ListCompanyBindResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ListCompanyBindVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListCompanyBindResp) Reset() {
	*x = ListCompanyBindResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompanyBindResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyBindResp) ProtoMessage() {}

func (x *ListCompanyBindResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyBindResp.ProtoReflect.Descriptor instead.
func (*ListCompanyBindResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{234}
}

func (x *ListCompanyBindResp) GetList() []*ListCompanyBindVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListCompanyBindResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListCompanyBindResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCompanyBindResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListCompanyBindVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyName     string `protobuf:"bytes,1,opt,name=companyName,proto3" json:"companyName"`
	CompanyCode     string `protobuf:"bytes,2,opt,name=companyCode,proto3" json:"companyCode"`
	CompanyBindJson string `protobuf:"bytes,3,opt,name=companyBindJson,proto3" json:"companyBindJson"`
}

func (x *ListCompanyBindVo) Reset() {
	*x = ListCompanyBindVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompanyBindVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyBindVo) ProtoMessage() {}

func (x *ListCompanyBindVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyBindVo.ProtoReflect.Descriptor instead.
func (*ListCompanyBindVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{235}
}

func (x *ListCompanyBindVo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *ListCompanyBindVo) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *ListCompanyBindVo) GetCompanyBindJson() string {
	if x != nil {
		return x.CompanyBindJson
	}
	return ""
}

type ListMiBindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MiName    string   `protobuf:"bytes,2,opt,name=miName,proto3" json:"miName"`
	MiCode    string   `protobuf:"bytes,3,opt,name=miCode,proto3" json:"miCode"`
	Page      *Page    `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
	LinkTypes []string `protobuf:"bytes,5,rep,name=linkTypes,proto3" json:"linkTypes"`
}

func (x *ListMiBindReq) Reset() {
	*x = ListMiBindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMiBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMiBindReq) ProtoMessage() {}

func (x *ListMiBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMiBindReq.ProtoReflect.Descriptor instead.
func (*ListMiBindReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{236}
}

func (x *ListMiBindReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListMiBindReq) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListMiBindReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ListMiBindReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListMiBindReq) GetLinkTypes() []string {
	if x != nil {
		return x.LinkTypes
	}
	return nil
}

type ListMiBindResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ListMiBindBindVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64               `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64               `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64               `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListMiBindResp) Reset() {
	*x = ListMiBindResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMiBindResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMiBindResp) ProtoMessage() {}

func (x *ListMiBindResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMiBindResp.ProtoReflect.Descriptor instead.
func (*ListMiBindResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{237}
}

func (x *ListMiBindResp) GetList() []*ListMiBindBindVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListMiBindResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListMiBindResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMiBindResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListMiBindBindVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiName     string `protobuf:"bytes,1,opt,name=miName,proto3" json:"miName"`
	MiCode     string `protobuf:"bytes,2,opt,name=miCode,proto3" json:"miCode"`
	MiBindJson string `protobuf:"bytes,3,opt,name=miBindJson,proto3" json:"miBindJson"`
}

func (x *ListMiBindBindVo) Reset() {
	*x = ListMiBindBindVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMiBindBindVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMiBindBindVo) ProtoMessage() {}

func (x *ListMiBindBindVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMiBindBindVo.ProtoReflect.Descriptor instead.
func (*ListMiBindBindVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{238}
}

func (x *ListMiBindBindVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListMiBindBindVo) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ListMiBindBindVo) GetMiBindJson() string {
	if x != nil {
		return x.MiBindJson
	}
	return ""
}

type ListMedicineBindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId    int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MedicineName string   `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode string   `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
	Page         *Page    `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
	LinkTypes    []string `protobuf:"bytes,5,rep,name=linkTypes,proto3" json:"linkTypes"`
}

func (x *ListMedicineBindReq) Reset() {
	*x = ListMedicineBindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMedicineBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMedicineBindReq) ProtoMessage() {}

func (x *ListMedicineBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMedicineBindReq.ProtoReflect.Descriptor instead.
func (*ListMedicineBindReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{239}
}

func (x *ListMedicineBindReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListMedicineBindReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ListMedicineBindReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ListMedicineBindReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListMedicineBindReq) GetLinkTypes() []string {
	if x != nil {
		return x.LinkTypes
	}
	return nil
}

type ListMedicineBindResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ListMedicineBindVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                 `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                 `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ListMedicineBindResp) Reset() {
	*x = ListMedicineBindResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMedicineBindResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMedicineBindResp) ProtoMessage() {}

func (x *ListMedicineBindResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMedicineBindResp.ProtoReflect.Descriptor instead.
func (*ListMedicineBindResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{240}
}

func (x *ListMedicineBindResp) GetList() []*ListMedicineBindVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListMedicineBindResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListMedicineBindResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMedicineBindResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ListMedicineBindVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName     string `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode     string `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineBindJson string `protobuf:"bytes,3,opt,name=medicineBindJson,proto3" json:"medicineBindJson"`
	//药品规格（如20mg,2ml:200ug）
	MedicineSpecification string `protobuf:"bytes,6,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	Manufacturer          string `protobuf:"bytes,7,opt,name=manufacturer,proto3" json:"manufacturer"`
	//包装单位
	MedicineUnit string `protobuf:"bytes,8,opt,name=medicineUnit,proto3" json:"medicineUnit"`
	//剂型（如片剂）
	MedicineForm string `protobuf:"bytes,9,opt,name=medicineForm,proto3" json:"medicineForm"`
	//药品包装(如盒，支，瓶)
	MedicinePackage string `protobuf:"bytes,10,opt,name=medicinePackage,proto3" json:"medicinePackage"`
}

func (x *ListMedicineBindVo) Reset() {
	*x = ListMedicineBindVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMedicineBindVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMedicineBindVo) ProtoMessage() {}

func (x *ListMedicineBindVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMedicineBindVo.ProtoReflect.Descriptor instead.
func (*ListMedicineBindVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{241}
}

func (x *ListMedicineBindVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ListMedicineBindVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ListMedicineBindVo) GetMedicineBindJson() string {
	if x != nil {
		return x.MedicineBindJson
	}
	return ""
}

func (x *ListMedicineBindVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *ListMedicineBindVo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *ListMedicineBindVo) GetMedicineUnit() string {
	if x != nil {
		return x.MedicineUnit
	}
	return ""
}

func (x *ListMedicineBindVo) GetMedicineForm() string {
	if x != nil {
		return x.MedicineForm
	}
	return ""
}

func (x *ListMedicineBindVo) GetMedicinePackage() string {
	if x != nil {
		return x.MedicinePackage
	}
	return ""
}

type CompanyBindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64               `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	Param     []*CompanyBindParam `protobuf:"bytes,2,rep,name=param,proto3" json:"param"`
}

func (x *CompanyBindReq) Reset() {
	*x = CompanyBindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyBindReq) ProtoMessage() {}

func (x *CompanyBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyBindReq.ProtoReflect.Descriptor instead.
func (*CompanyBindReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{242}
}

func (x *CompanyBindReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CompanyBindReq) GetParam() []*CompanyBindParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type CompanyBindParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindId          int64  `protobuf:"varint,2,opt,name=bindId,proto3" json:"bindId"`
	CompanyCode     string `protobuf:"bytes,3,opt,name=companyCode,proto3" json:"companyCode"`
	CompanyLinkCode string `protobuf:"bytes,4,opt,name=companyLinkCode,proto3" json:"companyLinkCode"`
	LinkType        string `protobuf:"bytes,5,opt,name=linkType,proto3" json:"linkType"`
}

func (x *CompanyBindParam) Reset() {
	*x = CompanyBindParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyBindParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyBindParam) ProtoMessage() {}

func (x *CompanyBindParam) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyBindParam.ProtoReflect.Descriptor instead.
func (*CompanyBindParam) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{243}
}

func (x *CompanyBindParam) GetBindId() int64 {
	if x != nil {
		return x.BindId
	}
	return 0
}

func (x *CompanyBindParam) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *CompanyBindParam) GetCompanyLinkCode() string {
	if x != nil {
		return x.CompanyLinkCode
	}
	return ""
}

func (x *CompanyBindParam) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

type CompanyBindResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CompanyBindResp) Reset() {
	*x = CompanyBindResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyBindResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyBindResp) ProtoMessage() {}

func (x *CompanyBindResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyBindResp.ProtoReflect.Descriptor instead.
func (*CompanyBindResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{244}
}

func (x *CompanyBindResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type MiBindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64          `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	Param     []*MiBindParam `protobuf:"bytes,2,rep,name=param,proto3" json:"param"`
}

func (x *MiBindReq) Reset() {
	*x = MiBindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiBindReq) ProtoMessage() {}

func (x *MiBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiBindReq.ProtoReflect.Descriptor instead.
func (*MiBindReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{245}
}

func (x *MiBindReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *MiBindReq) GetParam() []*MiBindParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type MiBindParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindId     int64  `protobuf:"varint,2,opt,name=bindId,proto3" json:"bindId"`
	MiCode     string `protobuf:"bytes,3,opt,name=miCode,proto3" json:"miCode"`
	MiLinkCode string `protobuf:"bytes,4,opt,name=miLinkCode,proto3" json:"miLinkCode"`
	LinkType   string `protobuf:"bytes,5,opt,name=linkType,proto3" json:"linkType"`
}

func (x *MiBindParam) Reset() {
	*x = MiBindParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiBindParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiBindParam) ProtoMessage() {}

func (x *MiBindParam) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiBindParam.ProtoReflect.Descriptor instead.
func (*MiBindParam) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{246}
}

func (x *MiBindParam) GetBindId() int64 {
	if x != nil {
		return x.BindId
	}
	return 0
}

func (x *MiBindParam) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *MiBindParam) GetMiLinkCode() string {
	if x != nil {
		return x.MiLinkCode
	}
	return ""
}

func (x *MiBindParam) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

type MiBindResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *MiBindResp) Reset() {
	*x = MiBindResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiBindResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiBindResp) ProtoMessage() {}

func (x *MiBindResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiBindResp.ProtoReflect.Descriptor instead.
func (*MiBindResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{247}
}

func (x *MiBindResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type MedicineBindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64                `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	Param     []*MedicineBindParam `protobuf:"bytes,2,rep,name=param,proto3" json:"param"`
}

func (x *MedicineBindReq) Reset() {
	*x = MedicineBindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineBindReq) ProtoMessage() {}

func (x *MedicineBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineBindReq.ProtoReflect.Descriptor instead.
func (*MedicineBindReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{248}
}

func (x *MedicineBindReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *MedicineBindReq) GetParam() []*MedicineBindParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type MedicineBindParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindId           int64  `protobuf:"varint,2,opt,name=bindId,proto3" json:"bindId"`
	MedicineCode     string `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineLinkCode string `protobuf:"bytes,4,opt,name=medicineLinkCode,proto3" json:"medicineLinkCode"`
	LinkType         string `protobuf:"bytes,5,opt,name=linkType,proto3" json:"linkType"`
}

func (x *MedicineBindParam) Reset() {
	*x = MedicineBindParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineBindParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineBindParam) ProtoMessage() {}

func (x *MedicineBindParam) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineBindParam.ProtoReflect.Descriptor instead.
func (*MedicineBindParam) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{249}
}

func (x *MedicineBindParam) GetBindId() int64 {
	if x != nil {
		return x.BindId
	}
	return 0
}

func (x *MedicineBindParam) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *MedicineBindParam) GetMedicineLinkCode() string {
	if x != nil {
		return x.MedicineLinkCode
	}
	return ""
}

func (x *MedicineBindParam) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

type MedicineBindResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *MedicineBindResp) Reset() {
	*x = MedicineBindResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicineBindResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicineBindResp) ProtoMessage() {}

func (x *MedicineBindResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicineBindResp.ProtoReflect.Descriptor instead.
func (*MedicineBindResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{250}
}

func (x *MedicineBindResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type ResetContractReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId       int64                  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	Param           []*ResetContractParam  `protobuf:"bytes,2,rep,name=param,proto3" json:"param"`
	OldContractId   int64                  `protobuf:"varint,3,opt,name=oldContractId,proto3" json:"oldContractId"`
	ContractNo      string                 `protobuf:"bytes,4,opt,name=contractNo,proto3" json:"contractNo"`
	TenderCompany   string                 `protobuf:"bytes,5,opt,name=tenderCompany,proto3" json:"tenderCompany"`
	MedicineId      int64                  `protobuf:"varint,6,opt,name=medicineId,proto3" json:"medicineId"`
	CompanyId       int64                  `protobuf:"varint,7,opt,name=companyId,proto3" json:"companyId"`
	MibId           int64                  `protobuf:"varint,8,opt,name=mibId,proto3" json:"mibId"`
	MedicinePrice   int64                  `protobuf:"varint,9,opt,name=medicinePrice,proto3" json:"medicinePrice"`
	MedicineReceive int64                  `protobuf:"varint,10,opt,name=medicineReceive,proto3" json:"medicineReceive"`
	TotalAmount     int64                  `protobuf:"varint,11,opt,name=totalAmount,proto3" json:"totalAmount"`
	StartAt         *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=startAt,proto3" json:"startAt"`
	EndAt           *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=endAt,proto3" json:"endAt"`
	Creator         int64                  `protobuf:"varint,14,opt,name=creator,proto3" json:"creator"`
}

func (x *ResetContractReq) Reset() {
	*x = ResetContractReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetContractReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetContractReq) ProtoMessage() {}

func (x *ResetContractReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetContractReq.ProtoReflect.Descriptor instead.
func (*ResetContractReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{251}
}

func (x *ResetContractReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ResetContractReq) GetParam() []*ResetContractParam {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *ResetContractReq) GetOldContractId() int64 {
	if x != nil {
		return x.OldContractId
	}
	return 0
}

func (x *ResetContractReq) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *ResetContractReq) GetTenderCompany() string {
	if x != nil {
		return x.TenderCompany
	}
	return ""
}

func (x *ResetContractReq) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *ResetContractReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ResetContractReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ResetContractReq) GetMedicinePrice() int64 {
	if x != nil {
		return x.MedicinePrice
	}
	return 0
}

func (x *ResetContractReq) GetMedicineReceive() int64 {
	if x != nil {
		return x.MedicineReceive
	}
	return 0
}

func (x *ResetContractReq) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *ResetContractReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ResetContractReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *ResetContractReq) GetCreator() int64 {
	if x != nil {
		return x.Creator
	}
	return 0
}

type ResetContractParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId            int64 `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	MedicineAmount  int64 `protobuf:"varint,2,opt,name=medicineAmount,proto3" json:"medicineAmount"`
	MedicineSent    int64 `protobuf:"varint,3,opt,name=medicineSent,proto3" json:"medicineSent"`
	MedicineReceive int64 `protobuf:"varint,4,opt,name=medicineReceive,proto3" json:"medicineReceive"`
}

func (x *ResetContractParam) Reset() {
	*x = ResetContractParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetContractParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetContractParam) ProtoMessage() {}

func (x *ResetContractParam) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetContractParam.ProtoReflect.Descriptor instead.
func (*ResetContractParam) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{252}
}

func (x *ResetContractParam) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *ResetContractParam) GetMedicineAmount() int64 {
	if x != nil {
		return x.MedicineAmount
	}
	return 0
}

func (x *ResetContractParam) GetMedicineSent() int64 {
	if x != nil {
		return x.MedicineSent
	}
	return 0
}

func (x *ResetContractParam) GetMedicineReceive() int64 {
	if x != nil {
		return x.MedicineReceive
	}
	return 0
}

type ResetContractResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *ResetContractResp) Reset() {
	*x = ResetContractResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetContractResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetContractResp) ProtoMessage() {}

func (x *ResetContractResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetContractResp.ProtoReflect.Descriptor instead.
func (*ResetContractResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{253}
}

func (x *ResetContractResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type SplitToPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List         []*SplitToPlan `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	ManagerId    int64          `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	TpOrderNo    string         `protobuf:"bytes,3,opt,name=tpOrderNo,proto3" json:"tpOrderNo"`
	CurrentTotal int64          `protobuf:"varint,4,opt,name=currentTotal,proto3" json:"currentTotal"`
}

func (x *SplitToPlanReq) Reset() {
	*x = SplitToPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitToPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitToPlanReq) ProtoMessage() {}

func (x *SplitToPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitToPlanReq.ProtoReflect.Descriptor instead.
func (*SplitToPlanReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{254}
}

func (x *SplitToPlanReq) GetList() []*SplitToPlan {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *SplitToPlanReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *SplitToPlanReq) GetTpOrderNo() string {
	if x != nil {
		return x.TpOrderNo
	}
	return ""
}

func (x *SplitToPlanReq) GetCurrentTotal() int64 {
	if x != nil {
		return x.CurrentTotal
	}
	return 0
}

type SplitToPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineCode     string                 `protobuf:"bytes,1,opt,name=medicineCode,proto3" json:"medicineCode"`
	ComCode          string                 `protobuf:"bytes,2,opt,name=comCode,proto3" json:"comCode"`
	MiCode           string                 `protobuf:"bytes,3,opt,name=miCode,proto3" json:"miCode"`
	ContractMiId     int64                  `protobuf:"varint,4,opt,name=contractMiId,proto3" json:"contractMiId"`
	TpCode           string                 `protobuf:"bytes,5,opt,name=tpCode,proto3" json:"tpCode"`
	TpOrderNo        string                 `protobuf:"bytes,6,opt,name=tpOrderNo,proto3" json:"tpOrderNo"`
	TpOrderTitle     string                 `protobuf:"bytes,7,opt,name=tpOrderTitle,proto3" json:"tpOrderTitle"`
	TpSentAmount     int64                  `protobuf:"varint,8,opt,name=TpSentAmount,proto3" json:"TpSentAmount"`
	ShipmentAmount   int64                  `protobuf:"varint,9,opt,name=shipmentAmount,proto3" json:"shipmentAmount"`
	OrderAmount      int64                  `protobuf:"varint,10,opt,name=orderAmount,proto3" json:"orderAmount"`
	SendAmount       int64                  `protobuf:"varint,11,opt,name=sendAmount,proto3" json:"sendAmount"`
	SendDeadlineWarn *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=sendDeadlineWarn,proto3" json:"sendDeadlineWarn"`
	SendDeadLine     *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=sendDeadLine,proto3" json:"sendDeadLine"`
}

func (x *SplitToPlan) Reset() {
	*x = SplitToPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitToPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitToPlan) ProtoMessage() {}

func (x *SplitToPlan) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitToPlan.ProtoReflect.Descriptor instead.
func (*SplitToPlan) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{255}
}

func (x *SplitToPlan) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *SplitToPlan) GetComCode() string {
	if x != nil {
		return x.ComCode
	}
	return ""
}

func (x *SplitToPlan) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *SplitToPlan) GetContractMiId() int64 {
	if x != nil {
		return x.ContractMiId
	}
	return 0
}

func (x *SplitToPlan) GetTpCode() string {
	if x != nil {
		return x.TpCode
	}
	return ""
}

func (x *SplitToPlan) GetTpOrderNo() string {
	if x != nil {
		return x.TpOrderNo
	}
	return ""
}

func (x *SplitToPlan) GetTpOrderTitle() string {
	if x != nil {
		return x.TpOrderTitle
	}
	return ""
}

func (x *SplitToPlan) GetTpSentAmount() int64 {
	if x != nil {
		return x.TpSentAmount
	}
	return 0
}

func (x *SplitToPlan) GetShipmentAmount() int64 {
	if x != nil {
		return x.ShipmentAmount
	}
	return 0
}

func (x *SplitToPlan) GetOrderAmount() int64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *SplitToPlan) GetSendAmount() int64 {
	if x != nil {
		return x.SendAmount
	}
	return 0
}

func (x *SplitToPlan) GetSendDeadlineWarn() *timestamppb.Timestamp {
	if x != nil {
		return x.SendDeadlineWarn
	}
	return nil
}

func (x *SplitToPlan) GetSendDeadLine() *timestamppb.Timestamp {
	if x != nil {
		return x.SendDeadLine
	}
	return nil
}

type SplitToPlanResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *SplitToPlanResp) Reset() {
	*x = SplitToPlanResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitToPlanResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitToPlanResp) ProtoMessage() {}

func (x *SplitToPlanResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitToPlanResp.ProtoReflect.Descriptor instead.
func (*SplitToPlanResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{256}
}

func (x *SplitToPlanResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

// ListZC
type ListZCReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZcStatus     string                 `protobuf:"bytes,1,opt,name=zcStatus,proto3" json:"zcStatus"`
	TpOrderNo    string                 `protobuf:"bytes,2,opt,name=tpOrderNo,proto3" json:"tpOrderNo"`
	MedicineName string                 `protobuf:"bytes,3,opt,name=medicineName,proto3" json:"medicineName"`
	MiName       string                 `protobuf:"bytes,4,opt,name=miName,proto3" json:"miName"`
	Start        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start,proto3" json:"start"`
	End          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end,proto3" json:"end"`
	ManagerId    int64                  `protobuf:"varint,7,opt,name=managerId,proto3" json:"managerId"`
	Page         *Page                  `protobuf:"bytes,8,opt,name=page,proto3" json:"page"`
	MiId         int64                  `protobuf:"varint,9,opt,name=miId,proto3" json:"miId"`
	ComId        int64                  `protobuf:"varint,10,opt,name=comId,proto3" json:"comId"`
	ComName      string                 `protobuf:"bytes,11,opt,name=comName,proto3" json:"comName"`
	ColumnName   string                 `protobuf:"bytes,12,opt,name=columnName,proto3" json:"columnName"`
	SortType     string                 `protobuf:"bytes,13,opt,name=sortType,proto3" json:"sortType"`
}

func (x *ListZCReq) Reset() {
	*x = ListZCReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListZCReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListZCReq) ProtoMessage() {}

func (x *ListZCReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListZCReq.ProtoReflect.Descriptor instead.
func (*ListZCReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{257}
}

func (x *ListZCReq) GetZcStatus() string {
	if x != nil {
		return x.ZcStatus
	}
	return ""
}

func (x *ListZCReq) GetTpOrderNo() string {
	if x != nil {
		return x.TpOrderNo
	}
	return ""
}

func (x *ListZCReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ListZCReq) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListZCReq) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ListZCReq) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *ListZCReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListZCReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListZCReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *ListZCReq) GetComId() int64 {
	if x != nil {
		return x.ComId
	}
	return 0
}

func (x *ListZCReq) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

func (x *ListZCReq) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *ListZCReq) GetSortType() string {
	if x != nil {
		return x.SortType
	}
	return ""
}

type CreateZCReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractNo     string `protobuf:"bytes,1,opt,name=contractNo,proto3" json:"contractNo"`
	ShipmentAmount int64  `protobuf:"varint,2,opt,name=shipmentAmount,proto3" json:"shipmentAmount"`
	//创建哪个医院的招采需求
	MiId int64 `protobuf:"varint,3,opt,name=miId,proto3" json:"miId"`
	//哪个账号创建
	ManagerId    int64  `protobuf:"varint,4,opt,name=managerId,proto3" json:"managerId"`
	MedicineCode string `protobuf:"bytes,5,opt,name=medicineCode,proto3" json:"medicineCode"`
}

func (x *CreateZCReq) Reset() {
	*x = CreateZCReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateZCReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateZCReq) ProtoMessage() {}

func (x *CreateZCReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateZCReq.ProtoReflect.Descriptor instead.
func (*CreateZCReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{258}
}

func (x *CreateZCReq) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *CreateZCReq) GetShipmentAmount() int64 {
	if x != nil {
		return x.ShipmentAmount
	}
	return 0
}

func (x *CreateZCReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *CreateZCReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CreateZCReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

type DeleteZCReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TpOrderNo string `protobuf:"bytes,1,opt,name=tpOrderNo,proto3" json:"tpOrderNo"`
	//校验是否可以删除
	MiId      int64 `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
	ManagerId int64 `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *DeleteZCReq) Reset() {
	*x = DeleteZCReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteZCReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteZCReq) ProtoMessage() {}

func (x *DeleteZCReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteZCReq.ProtoReflect.Descriptor instead.
func (*DeleteZCReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{259}
}

func (x *DeleteZCReq) GetTpOrderNo() string {
	if x != nil {
		return x.TpOrderNo
	}
	return ""
}

func (x *DeleteZCReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *DeleteZCReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type DeleteZCResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteZCResp) Reset() {
	*x = DeleteZCResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteZCResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteZCResp) ProtoMessage() {}

func (x *DeleteZCResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteZCResp.ProtoReflect.Descriptor instead.
func (*DeleteZCResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{260}
}

type CreateZCResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateZCResp) Reset() {
	*x = CreateZCResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateZCResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateZCResp) ProtoMessage() {}

func (x *CreateZCResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateZCResp.ProtoReflect.Descriptor instead.
func (*CreateZCResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{261}
}

type ListZCResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total      int64       `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	PageSize   int64       `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64       `protobuf:"varint,3,opt,name=pageNumber,proto3" json:"pageNumber"`
	List       []*ListZCVo `protobuf:"bytes,4,rep,name=list,proto3" json:"list"`
	WaitNum    int64       `protobuf:"varint,5,opt,name=waitNum,proto3" json:"waitNum"`
}

func (x *ListZCResp) Reset() {
	*x = ListZCResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListZCResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListZCResp) ProtoMessage() {}

func (x *ListZCResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListZCResp.ProtoReflect.Descriptor instead.
func (*ListZCResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{262}
}

func (x *ListZCResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListZCResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListZCResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *ListZCResp) GetList() []*ListZCVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListZCResp) GetWaitNum() int64 {
	if x != nil {
		return x.WaitNum
	}
	return 0
}

type ListZCVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TpOrderNo             string                 `protobuf:"bytes,1,opt,name=tpOrderNo,proto3" json:"tpOrderNo"`
	TpTime                *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=tpTime,proto3" json:"tpTime"`
	MiName                string                 `protobuf:"bytes,3,opt,name=miName,proto3" json:"miName"`
	MiCode                string                 `protobuf:"bytes,4,opt,name=miCode,proto3" json:"miCode"`
	MedicineName          string                 `protobuf:"bytes,5,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string                 `protobuf:"bytes,6,opt,name=medicineCode,proto3" json:"medicineCode"`
	ComCode               string                 `protobuf:"bytes,7,opt,name=comCode,proto3" json:"comCode"`
	ComName               string                 `protobuf:"bytes,8,opt,name=comName,proto3" json:"comName"`
	MedicineSpecification string                 `protobuf:"bytes,9,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	UnitPrice             int64                  `protobuf:"varint,10,opt,name=unitPrice,proto3" json:"unitPrice"`
	OrderAmount           int64                  `protobuf:"varint,11,opt,name=orderAmount,proto3" json:"orderAmount"`
	ShipmentAmount        int64                  `protobuf:"varint,12,opt,name=shipmentAmount,proto3" json:"shipmentAmount"`
	PlanAmount            int64                  `protobuf:"varint,13,opt,name=planAmount,proto3" json:"planAmount"`
	SentAmount            int64                  `protobuf:"varint,14,opt,name=sentAmount,proto3" json:"sentAmount"`
	ReceivedAmount        int64                  `protobuf:"varint,15,opt,name=receivedAmount,proto3" json:"receivedAmount"`
	ReturnAmount          int64                  `protobuf:"varint,16,opt,name=returnAmount,proto3" json:"returnAmount"`
	SendDeadlineWarn      *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=sendDeadlineWarn,proto3" json:"sendDeadlineWarn"`
	SendDeadline          *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=sendDeadline,proto3" json:"sendDeadline"`
	ContractMiId          int64                  `protobuf:"varint,19,opt,name=contractMiId,proto3" json:"contractMiId"`
	TpCode                string                 `protobuf:"bytes,20,opt,name=tpCode,proto3" json:"tpCode"`
	TpOrderTitle          string                 `protobuf:"bytes,21,opt,name=tpOrderTitle,proto3" json:"tpOrderTitle"`
	TpSentAmount          int64                  `protobuf:"varint,22,opt,name=tpSentAmount,proto3" json:"tpSentAmount"`
	MedicineId            int64                  `protobuf:"varint,23,opt,name=medicineId,proto3" json:"medicineId"`
	MedicineForm          string                 `protobuf:"bytes,24,opt,name=medicineForm,proto3" json:"medicineForm"`
	MedicineUnit          string                 `protobuf:"bytes,25,opt,name=medicineUnit,proto3" json:"medicineUnit"`
	CalculateRate         int64                  `protobuf:"varint,26,opt,name=calculateRate,proto3" json:"calculateRate"`
	Manufacturer          string                 `protobuf:"bytes,27,opt,name=manufacturer,proto3" json:"manufacturer"`
	ZcStatus              string                 `protobuf:"bytes,28,opt,name=zcStatus,proto3" json:"zcStatus"`
}

func (x *ListZCVo) Reset() {
	*x = ListZCVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListZCVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListZCVo) ProtoMessage() {}

func (x *ListZCVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListZCVo.ProtoReflect.Descriptor instead.
func (*ListZCVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{263}
}

func (x *ListZCVo) GetTpOrderNo() string {
	if x != nil {
		return x.TpOrderNo
	}
	return ""
}

func (x *ListZCVo) GetTpTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TpTime
	}
	return nil
}

func (x *ListZCVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ListZCVo) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ListZCVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ListZCVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ListZCVo) GetComCode() string {
	if x != nil {
		return x.ComCode
	}
	return ""
}

func (x *ListZCVo) GetComName() string {
	if x != nil {
		return x.ComName
	}
	return ""
}

func (x *ListZCVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *ListZCVo) GetUnitPrice() int64 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *ListZCVo) GetOrderAmount() int64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *ListZCVo) GetShipmentAmount() int64 {
	if x != nil {
		return x.ShipmentAmount
	}
	return 0
}

func (x *ListZCVo) GetPlanAmount() int64 {
	if x != nil {
		return x.PlanAmount
	}
	return 0
}

func (x *ListZCVo) GetSentAmount() int64 {
	if x != nil {
		return x.SentAmount
	}
	return 0
}

func (x *ListZCVo) GetReceivedAmount() int64 {
	if x != nil {
		return x.ReceivedAmount
	}
	return 0
}

func (x *ListZCVo) GetReturnAmount() int64 {
	if x != nil {
		return x.ReturnAmount
	}
	return 0
}

func (x *ListZCVo) GetSendDeadlineWarn() *timestamppb.Timestamp {
	if x != nil {
		return x.SendDeadlineWarn
	}
	return nil
}

func (x *ListZCVo) GetSendDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.SendDeadline
	}
	return nil
}

func (x *ListZCVo) GetContractMiId() int64 {
	if x != nil {
		return x.ContractMiId
	}
	return 0
}

func (x *ListZCVo) GetTpCode() string {
	if x != nil {
		return x.TpCode
	}
	return ""
}

func (x *ListZCVo) GetTpOrderTitle() string {
	if x != nil {
		return x.TpOrderTitle
	}
	return ""
}

func (x *ListZCVo) GetTpSentAmount() int64 {
	if x != nil {
		return x.TpSentAmount
	}
	return 0
}

func (x *ListZCVo) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *ListZCVo) GetMedicineForm() string {
	if x != nil {
		return x.MedicineForm
	}
	return ""
}

func (x *ListZCVo) GetMedicineUnit() string {
	if x != nil {
		return x.MedicineUnit
	}
	return ""
}

func (x *ListZCVo) GetCalculateRate() int64 {
	if x != nil {
		return x.CalculateRate
	}
	return 0
}

func (x *ListZCVo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *ListZCVo) GetZcStatus() string {
	if x != nil {
		return x.ZcStatus
	}
	return ""
}

// DetailSupplement
type DetailSupplementReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineId   int64 `protobuf:"varint,1,opt,name=medicineId,proto3" json:"medicineId"`
	ContractMiId int64 `protobuf:"varint,2,opt,name=contractMiId,proto3" json:"contractMiId"`
	ManagerId    int64 `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *DetailSupplementReq) Reset() {
	*x = DetailSupplementReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailSupplementReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailSupplementReq) ProtoMessage() {}

func (x *DetailSupplementReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailSupplementReq.ProtoReflect.Descriptor instead.
func (*DetailSupplementReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{264}
}

func (x *DetailSupplementReq) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *DetailSupplementReq) GetContractMiId() int64 {
	if x != nil {
		return x.ContractMiId
	}
	return 0
}

func (x *DetailSupplementReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type DetailSupplementResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagName    string `protobuf:"bytes,1,opt,name=tagName,proto3" json:"tagName"`
	ContractNo string `protobuf:"bytes,2,opt,name=contractNo,proto3" json:"contractNo"`
}

func (x *DetailSupplementResp) Reset() {
	*x = DetailSupplementResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailSupplementResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailSupplementResp) ProtoMessage() {}

func (x *DetailSupplementResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailSupplementResp.ProtoReflect.Descriptor instead.
func (*DetailSupplementResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{265}
}

func (x *DetailSupplementResp) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *DetailSupplementResp) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

// DetailPlanList
type DetailPlanListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TpOrderNo string `protobuf:"bytes,1,opt,name=tpOrderNo,proto3" json:"tpOrderNo"`
	ManagerId int64  `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *DetailPlanListReq) Reset() {
	*x = DetailPlanListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailPlanListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailPlanListReq) ProtoMessage() {}

func (x *DetailPlanListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailPlanListReq.ProtoReflect.Descriptor instead.
func (*DetailPlanListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{266}
}

func (x *DetailPlanListReq) GetTpOrderNo() string {
	if x != nil {
		return x.TpOrderNo
	}
	return ""
}

func (x *DetailPlanListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type DetailPlanListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*DetailPlanList `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
}

func (x *DetailPlanListResp) Reset() {
	*x = DetailPlanListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailPlanListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailPlanListResp) ProtoMessage() {}

func (x *DetailPlanListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailPlanListResp.ProtoReflect.Descriptor instead.
func (*DetailPlanListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{267}
}

func (x *DetailPlanListResp) GetList() []*DetailPlanList {
	if x != nil {
		return x.List
	}
	return nil
}

type DetailPlanList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNo        string                 `protobuf:"bytes,1,opt,name=orderNo,proto3" json:"orderNo"`
	ShipmentNo     string                 `protobuf:"bytes,2,opt,name=shipmentNo,proto3" json:"shipmentNo"`
	ShipmentAmount int64                  `protobuf:"varint,3,opt,name=shipmentAmount,proto3" json:"shipmentAmount"`
	SentAmount     int64                  `protobuf:"varint,4,opt,name=sentAmount,proto3" json:"sentAmount"`
	ReceivedAmount int64                  `protobuf:"varint,5,opt,name=receivedAmount,proto3" json:"receivedAmount"`
	ReturnAmount   int64                  `protobuf:"varint,6,opt,name=returnAmount,proto3" json:"returnAmount"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt"`
}

func (x *DetailPlanList) Reset() {
	*x = DetailPlanList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailPlanList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailPlanList) ProtoMessage() {}

func (x *DetailPlanList) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailPlanList.ProtoReflect.Descriptor instead.
func (*DetailPlanList) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{268}
}

func (x *DetailPlanList) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *DetailPlanList) GetShipmentNo() string {
	if x != nil {
		return x.ShipmentNo
	}
	return ""
}

func (x *DetailPlanList) GetShipmentAmount() int64 {
	if x != nil {
		return x.ShipmentAmount
	}
	return 0
}

func (x *DetailPlanList) GetSentAmount() int64 {
	if x != nil {
		return x.SentAmount
	}
	return 0
}

func (x *DetailPlanList) GetReceivedAmount() int64 {
	if x != nil {
		return x.ReceivedAmount
	}
	return 0
}

func (x *DetailPlanList) GetReturnAmount() int64 {
	if x != nil {
		return x.ReturnAmount
	}
	return 0
}

func (x *DetailPlanList) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type ContractCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List      []*ContractParam `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	ManagerId int64            `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
}

func (x *ContractCreateReq) Reset() {
	*x = ContractCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCreateReq) ProtoMessage() {}

func (x *ContractCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCreateReq.ProtoReflect.Descriptor instead.
func (*ContractCreateReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{269}
}

func (x *ContractCreateReq) GetList() []*ContractParam {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ContractCreateReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ContractParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenderCompany string                 `protobuf:"bytes,1,opt,name=tenderCompany,proto3" json:"tenderCompany"`
	MedicineId    int64                  `protobuf:"varint,2,opt,name=medicineId,proto3" json:"medicineId"`
	CompanyId     int64                  `protobuf:"varint,3,opt,name=companyId,proto3" json:"companyId"`
	MedicinePrice int64                  `protobuf:"varint,4,opt,name=medicinePrice,proto3" json:"medicinePrice"`
	TotalAmount   int64                  `protobuf:"varint,5,opt,name=totalAmount,proto3" json:"totalAmount"`
	StartAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=startAt,proto3" json:"startAt"`
	EndAt         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=endAt,proto3" json:"endAt"`
	ConMiList     []*ContractMiParam     `protobuf:"bytes,8,rep,name=conMiList,proto3" json:"conMiList"`
}

func (x *ContractParam) Reset() {
	*x = ContractParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractParam) ProtoMessage() {}

func (x *ContractParam) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractParam.ProtoReflect.Descriptor instead.
func (*ContractParam) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{270}
}

func (x *ContractParam) GetTenderCompany() string {
	if x != nil {
		return x.TenderCompany
	}
	return ""
}

func (x *ContractParam) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *ContractParam) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ContractParam) GetMedicinePrice() int64 {
	if x != nil {
		return x.MedicinePrice
	}
	return 0
}

func (x *ContractParam) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *ContractParam) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ContractParam) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *ContractParam) GetConMiList() []*ContractMiParam {
	if x != nil {
		return x.ConMiList
	}
	return nil
}

type ContractMiParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId           int64 `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	MedicineAmount int64 `protobuf:"varint,2,opt,name=medicineAmount,proto3" json:"medicineAmount"`
}

func (x *ContractMiParam) Reset() {
	*x = ContractMiParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractMiParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractMiParam) ProtoMessage() {}

func (x *ContractMiParam) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractMiParam.ProtoReflect.Descriptor instead.
func (*ContractMiParam) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{271}
}

func (x *ContractMiParam) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *ContractMiParam) GetMedicineAmount() int64 {
	if x != nil {
		return x.MedicineAmount
	}
	return 0
}

type ContractCreateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *ContractCreateResp) Reset() {
	*x = ContractCreateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractCreateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCreateResp) ProtoMessage() {}

func (x *ContractCreateResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCreateResp.ProtoReflect.Descriptor instead.
func (*ContractCreateResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{272}
}

func (x *ContractCreateResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type ReceivePlansReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List      []*ReceivePlans `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	ComId     int64           `protobuf:"varint,2,opt,name=comId,proto3" json:"comId"`
	ManagerId int64           `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *ReceivePlansReq) Reset() {
	*x = ReceivePlansReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivePlansReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivePlansReq) ProtoMessage() {}

func (x *ReceivePlansReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivePlansReq.ProtoReflect.Descriptor instead.
func (*ReceivePlansReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{273}
}

func (x *ReceivePlansReq) GetList() []*ReceivePlans {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ReceivePlansReq) GetComId() int64 {
	if x != nil {
		return x.ComId
	}
	return 0
}

func (x *ReceivePlansReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ReceivePlans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractMiId int64  `protobuf:"varint,1,opt,name=contractMiId,proto3" json:"contractMiId"`
	TpOrderNo    string `protobuf:"bytes,2,opt,name=tpOrderNo,proto3" json:"tpOrderNo"`
}

func (x *ReceivePlans) Reset() {
	*x = ReceivePlans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivePlans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivePlans) ProtoMessage() {}

func (x *ReceivePlans) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivePlans.ProtoReflect.Descriptor instead.
func (*ReceivePlans) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{274}
}

func (x *ReceivePlans) GetContractMiId() int64 {
	if x != nil {
		return x.ContractMiId
	}
	return 0
}

func (x *ReceivePlans) GetTpOrderNo() string {
	if x != nil {
		return x.TpOrderNo
	}
	return ""
}

type ReceivePlansResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *ReceivePlansResp) Reset() {
	*x = ReceivePlansResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivePlansResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivePlansResp) ProtoMessage() {}

func (x *ReceivePlansResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivePlansResp.ProtoReflect.Descriptor instead.
func (*ReceivePlansResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{275}
}

func (x *ReceivePlansResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type RemovePlansReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNos  []string `protobuf:"bytes,1,rep,name=orderNos,proto3" json:"orderNos"`
	ComId     int64    `protobuf:"varint,2,opt,name=comId,proto3" json:"comId"`
	ManagerId int64    `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
	TpOrderNo string   `protobuf:"bytes,4,opt,name=tpOrderNo,proto3" json:"tpOrderNo"`
}

func (x *RemovePlansReq) Reset() {
	*x = RemovePlansReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePlansReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePlansReq) ProtoMessage() {}

func (x *RemovePlansReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePlansReq.ProtoReflect.Descriptor instead.
func (*RemovePlansReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{276}
}

func (x *RemovePlansReq) GetOrderNos() []string {
	if x != nil {
		return x.OrderNos
	}
	return nil
}

func (x *RemovePlansReq) GetComId() int64 {
	if x != nil {
		return x.ComId
	}
	return 0
}

func (x *RemovePlansReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *RemovePlansReq) GetTpOrderNo() string {
	if x != nil {
		return x.TpOrderNo
	}
	return ""
}

type RemovePlansResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *RemovePlansResp) Reset() {
	*x = RemovePlansResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePlansResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePlansResp) ProtoMessage() {}

func (x *RemovePlansResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePlansResp.ProtoReflect.Descriptor instead.
func (*RemovePlansResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{277}
}

func (x *RemovePlansResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type ContractRemoveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId int64 `protobuf:"varint,1,opt,name=contractId,proto3" json:"contractId"`
	ManagerId  int64 `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *ContractRemoveReq) Reset() {
	*x = ContractRemoveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractRemoveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractRemoveReq) ProtoMessage() {}

func (x *ContractRemoveReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractRemoveReq.ProtoReflect.Descriptor instead.
func (*ContractRemoveReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{278}
}

func (x *ContractRemoveReq) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *ContractRemoveReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ContractRemoveResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *ContractRemoveResp) Reset() {
	*x = ContractRemoveResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractRemoveResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractRemoveResp) ProtoMessage() {}

func (x *ContractRemoveResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractRemoveResp.ProtoReflect.Descriptor instead.
func (*ContractRemoveResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{279}
}

func (x *ContractRemoveResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type ContractStopReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId int64 `protobuf:"varint,1,opt,name=contractId,proto3" json:"contractId"`
	ManagerId  int64 `protobuf:"varint,3,opt,name=managerId,proto3" json:"managerId"`
}

func (x *ContractStopReq) Reset() {
	*x = ContractStopReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractStopReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractStopReq) ProtoMessage() {}

func (x *ContractStopReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractStopReq.ProtoReflect.Descriptor instead.
func (*ContractStopReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{280}
}

func (x *ContractStopReq) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *ContractStopReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ContractStopResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *ContractStopResp) Reset() {
	*x = ContractStopResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractStopResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractStopResp) ProtoMessage() {}

func (x *ContractStopResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractStopResp.ProtoReflect.Descriptor instead.
func (*ContractStopResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{281}
}

func (x *ContractStopResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type ContractEditReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId       int64                  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ConMiList       []*EditContractMi      `protobuf:"bytes,2,rep,name=conMiList,proto3" json:"conMiList"`
	ContractId      int64                  `protobuf:"varint,3,opt,name=contractId,proto3" json:"contractId"`
	ContractNo      string                 `protobuf:"bytes,4,opt,name=contractNo,proto3" json:"contractNo"`
	TenderCompany   string                 `protobuf:"bytes,5,opt,name=tenderCompany,proto3" json:"tenderCompany"`
	MedicineId      int64                  `protobuf:"varint,6,opt,name=medicineId,proto3" json:"medicineId"`
	CompanyId       int64                  `protobuf:"varint,7,opt,name=companyId,proto3" json:"companyId"`
	MibId           int64                  `protobuf:"varint,8,opt,name=mibId,proto3" json:"mibId"`
	MedicinePrice   int64                  `protobuf:"varint,9,opt,name=medicinePrice,proto3" json:"medicinePrice"`
	MedicineReceive int64                  `protobuf:"varint,10,opt,name=medicineReceive,proto3" json:"medicineReceive"`
	TotalAmount     int64                  `protobuf:"varint,11,opt,name=totalAmount,proto3" json:"totalAmount"`
	StartAt         *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=startAt,proto3" json:"startAt"`
	EndAt           *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=endAt,proto3" json:"endAt"`
	Creator         int64                  `protobuf:"varint,14,opt,name=creator,proto3" json:"creator"`
	MedicineCode    string                 `protobuf:"bytes,15,opt,name=medicineCode,proto3" json:"medicineCode"`
	CompanyCode     string                 `protobuf:"bytes,16,opt,name=companyCode,proto3" json:"companyCode"`
	ActiveStatus    string                 `protobuf:"bytes,17,opt,name=activeStatus,proto3" json:"activeStatus"`
}

func (x *ContractEditReq) Reset() {
	*x = ContractEditReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractEditReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractEditReq) ProtoMessage() {}

func (x *ContractEditReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractEditReq.ProtoReflect.Descriptor instead.
func (*ContractEditReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{282}
}

func (x *ContractEditReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ContractEditReq) GetConMiList() []*EditContractMi {
	if x != nil {
		return x.ConMiList
	}
	return nil
}

func (x *ContractEditReq) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *ContractEditReq) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *ContractEditReq) GetTenderCompany() string {
	if x != nil {
		return x.TenderCompany
	}
	return ""
}

func (x *ContractEditReq) GetMedicineId() int64 {
	if x != nil {
		return x.MedicineId
	}
	return 0
}

func (x *ContractEditReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ContractEditReq) GetMibId() int64 {
	if x != nil {
		return x.MibId
	}
	return 0
}

func (x *ContractEditReq) GetMedicinePrice() int64 {
	if x != nil {
		return x.MedicinePrice
	}
	return 0
}

func (x *ContractEditReq) GetMedicineReceive() int64 {
	if x != nil {
		return x.MedicineReceive
	}
	return 0
}

func (x *ContractEditReq) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *ContractEditReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *ContractEditReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *ContractEditReq) GetCreator() int64 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *ContractEditReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ContractEditReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *ContractEditReq) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

type EditContractMi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiId            int64  `protobuf:"varint,1,opt,name=miId,proto3" json:"miId"`
	MedicineAmount  int64  `protobuf:"varint,2,opt,name=medicineAmount,proto3" json:"medicineAmount"`
	MedicineSent    int64  `protobuf:"varint,3,opt,name=medicineSent,proto3" json:"medicineSent"`
	MedicineReceive int64  `protobuf:"varint,4,opt,name=medicineReceive,proto3" json:"medicineReceive"`
	MiCode          string `protobuf:"bytes,5,opt,name=miCode,proto3" json:"miCode"`
	ContractId      int64  `protobuf:"varint,6,opt,name=contractId,proto3" json:"contractId"`
	ContractMiId    int64  `protobuf:"varint,7,opt,name=contractMiId,proto3" json:"contractMiId"`
}

func (x *EditContractMi) Reset() {
	*x = EditContractMi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditContractMi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditContractMi) ProtoMessage() {}

func (x *EditContractMi) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditContractMi.ProtoReflect.Descriptor instead.
func (*EditContractMi) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{283}
}

func (x *EditContractMi) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *EditContractMi) GetMedicineAmount() int64 {
	if x != nil {
		return x.MedicineAmount
	}
	return 0
}

func (x *EditContractMi) GetMedicineSent() int64 {
	if x != nil {
		return x.MedicineSent
	}
	return 0
}

func (x *EditContractMi) GetMedicineReceive() int64 {
	if x != nil {
		return x.MedicineReceive
	}
	return 0
}

func (x *EditContractMi) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *EditContractMi) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *EditContractMi) GetContractMiId() int64 {
	if x != nil {
		return x.ContractMiId
	}
	return 0
}

type ContractEditResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *ContractEditResp) Reset() {
	*x = ContractEditResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractEditResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractEditResp) ProtoMessage() {}

func (x *ContractEditResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractEditResp.ProtoReflect.Descriptor instead.
func (*ContractEditResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{284}
}

func (x *ContractEditResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

// 合同药品国家规则 列表
type ContractProportionListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId    int64                  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	StartDate    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=startDate,proto3" json:"startDate"`
	EndDate      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=endDate,proto3" json:"endDate"`
	TagId        int64                  `protobuf:"varint,4,opt,name=tagId,proto3" json:"tagId"`
	MedicineCode string                 `protobuf:"bytes,5,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineName string                 `protobuf:"bytes,6,opt,name=medicineName,proto3" json:"medicineName"`
	ContractNo   string                 `protobuf:"bytes,7,opt,name=contractNo,proto3" json:"contractNo"`
	Page         *Page                  `protobuf:"bytes,8,opt,name=page,proto3" json:"page"`
}

func (x *ContractProportionListReq) Reset() {
	*x = ContractProportionListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractProportionListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractProportionListReq) ProtoMessage() {}

func (x *ContractProportionListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractProportionListReq.ProtoReflect.Descriptor instead.
func (*ContractProportionListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{285}
}

func (x *ContractProportionListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ContractProportionListReq) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ContractProportionListReq) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ContractProportionListReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *ContractProportionListReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ContractProportionListReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ContractProportionListReq) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *ContractProportionListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ContractProportionListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ContractProportionListVo `protobuf:"bytes,4,rep,name=list,proto3" json:"list"`
	Total      int64                       `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	PageSize   int64                       `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                       `protobuf:"varint,3,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ContractProportionListResp) Reset() {
	*x = ContractProportionListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractProportionListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractProportionListResp) ProtoMessage() {}

func (x *ContractProportionListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractProportionListResp.ProtoReflect.Descriptor instead.
func (*ContractProportionListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{286}
}

func (x *ContractProportionListResp) GetList() []*ContractProportionListVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ContractProportionListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ContractProportionListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ContractProportionListResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ContractProportionListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractNo    string `protobuf:"bytes,1,opt,name=contractNo,proto3" json:"contractNo"`
	MedicineName  string `protobuf:"bytes,2,opt,name=medicineName,proto3" json:"medicineName"`
	Specification string `protobuf:"bytes,3,opt,name=specification,proto3" json:"specification"`
	Proportion    int64  `protobuf:"varint,4,opt,name=proportion,proto3" json:"proportion"`
	ProportionKey string `protobuf:"bytes,5,opt,name=proportion_key,json=proportionKey,proto3" json:"proportion_key"`
	TagName       string `protobuf:"bytes,6,opt,name=tagName,proto3" json:"tagName"`
	ProportionId  int64  `protobuf:"varint,7,opt,name=proportionId,proto3" json:"proportionId"`
}

func (x *ContractProportionListVo) Reset() {
	*x = ContractProportionListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractProportionListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractProportionListVo) ProtoMessage() {}

func (x *ContractProportionListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractProportionListVo.ProtoReflect.Descriptor instead.
func (*ContractProportionListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{287}
}

func (x *ContractProportionListVo) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *ContractProportionListVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ContractProportionListVo) GetSpecification() string {
	if x != nil {
		return x.Specification
	}
	return ""
}

func (x *ContractProportionListVo) GetProportion() int64 {
	if x != nil {
		return x.Proportion
	}
	return 0
}

func (x *ContractProportionListVo) GetProportionKey() string {
	if x != nil {
		return x.ProportionKey
	}
	return ""
}

func (x *ContractProportionListVo) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *ContractProportionListVo) GetProportionId() int64 {
	if x != nil {
		return x.ProportionId
	}
	return 0
}

// 合同药品国家规则 修改
type ContractProportionUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId    int64 `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	ProportionId int64 `protobuf:"varint,7,opt,name=proportionId,proto3" json:"proportionId"`
	Proportion   int64 `protobuf:"varint,4,opt,name=proportion,proto3" json:"proportion"`
}

func (x *ContractProportionUpdateReq) Reset() {
	*x = ContractProportionUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractProportionUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractProportionUpdateReq) ProtoMessage() {}

func (x *ContractProportionUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractProportionUpdateReq.ProtoReflect.Descriptor instead.
func (*ContractProportionUpdateReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{288}
}

func (x *ContractProportionUpdateReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ContractProportionUpdateReq) GetProportionId() int64 {
	if x != nil {
		return x.ProportionId
	}
	return 0
}

func (x *ContractProportionUpdateReq) GetProportion() int64 {
	if x != nil {
		return x.Proportion
	}
	return 0
}

type ContractProportionUpdateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *ContractProportionUpdateResp) Reset() {
	*x = ContractProportionUpdateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractProportionUpdateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractProportionUpdateResp) ProtoMessage() {}

func (x *ContractProportionUpdateResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractProportionUpdateResp.ProtoReflect.Descriptor instead.
func (*ContractProportionUpdateResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{289}
}

func (x *ContractProportionUpdateResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type ReturnZoneListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64                  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=startDate,proto3" json:"startDate"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=endDate,proto3" json:"endDate"`
	TagId     int64                  `protobuf:"varint,4,opt,name=tagId,proto3" json:"tagId"`
	Page      *Page                  `protobuf:"bytes,8,opt,name=page,proto3" json:"page"`
}

func (x *ReturnZoneListReq) Reset() {
	*x = ReturnZoneListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnZoneListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnZoneListReq) ProtoMessage() {}

func (x *ReturnZoneListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnZoneListReq.ProtoReflect.Descriptor instead.
func (*ReturnZoneListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{290}
}

func (x *ReturnZoneListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ReturnZoneListReq) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ReturnZoneListReq) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ReturnZoneListReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *ReturnZoneListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ReturnZoneListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List         []*ReturnZoneListVo `protobuf:"bytes,4,rep,name=list,proto3" json:"list"`
	Total        int64               `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	PageSize     int64               `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber   int64               `protobuf:"varint,3,opt,name=pageNumber,proto3" json:"pageNumber"`
	ContractSum  int64               `protobuf:"varint,5,opt,name=contractSum,proto3" json:"contractSum"`
	PlanSum      int64               `protobuf:"varint,6,opt,name=planSum,proto3" json:"planSum"`
	SentSum      int64               `protobuf:"varint,7,opt,name=sentSum,proto3" json:"sentSum"`
	PaidSum      int64               `protobuf:"varint,8,opt,name=paidSum,proto3" json:"paidSum"`
	Price        int64               `protobuf:"varint,9,opt,name=price,proto3" json:"price"`
	PaidDaysSum  int64               `protobuf:"varint,10,opt,name=paidDaysSum,proto3" json:"paidDaysSum"`
	PaidCountSum int64               `protobuf:"varint,11,opt,name=paidCountSum,proto3" json:"paidCountSum"`
}

func (x *ReturnZoneListResp) Reset() {
	*x = ReturnZoneListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnZoneListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnZoneListResp) ProtoMessage() {}

func (x *ReturnZoneListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnZoneListResp.ProtoReflect.Descriptor instead.
func (*ReturnZoneListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{291}
}

func (x *ReturnZoneListResp) GetList() []*ReturnZoneListVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ReturnZoneListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ReturnZoneListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ReturnZoneListResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *ReturnZoneListResp) GetContractSum() int64 {
	if x != nil {
		return x.ContractSum
	}
	return 0
}

func (x *ReturnZoneListResp) GetPlanSum() int64 {
	if x != nil {
		return x.PlanSum
	}
	return 0
}

func (x *ReturnZoneListResp) GetSentSum() int64 {
	if x != nil {
		return x.SentSum
	}
	return 0
}

func (x *ReturnZoneListResp) GetPaidSum() int64 {
	if x != nil {
		return x.PaidSum
	}
	return 0
}

func (x *ReturnZoneListResp) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ReturnZoneListResp) GetPaidDaysSum() int64 {
	if x != nil {
		return x.PaidDaysSum
	}
	return 0
}

func (x *ReturnZoneListResp) GetPaidCountSum() int64 {
	if x != nil {
		return x.PaidCountSum
	}
	return 0
}

type ReturnZoneListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagName      string `protobuf:"bytes,1,opt,name=tagName,proto3" json:"tagName"`
	Province     string `protobuf:"bytes,2,opt,name=province,proto3" json:"province"`
	City         string `protobuf:"bytes,3,opt,name=city,proto3" json:"city"`
	Zone         string `protobuf:"bytes,4,opt,name=zone,proto3" json:"zone"`
	ContractSum  int64  `protobuf:"varint,5,opt,name=contractSum,proto3" json:"contractSum"`
	PlanSum      int64  `protobuf:"varint,6,opt,name=planSum,proto3" json:"planSum"`
	SentSum      int64  `protobuf:"varint,7,opt,name=sentSum,proto3" json:"sentSum"`
	PaidSum      int64  `protobuf:"varint,8,opt,name=paidSum,proto3" json:"paidSum"`
	Price        int64  `protobuf:"varint,9,opt,name=price,proto3" json:"price"`
	PaidDaysSum  int64  `protobuf:"varint,10,opt,name=paidDaysSum,proto3" json:"paidDaysSum"`
	PaidCountSum int64  `protobuf:"varint,11,opt,name=paidCountSum,proto3" json:"paidCountSum"`
	AreaCode     string `protobuf:"bytes,12,opt,name=areaCode,proto3" json:"areaCode"`
	AreaName     string `protobuf:"bytes,13,opt,name=areaName,proto3" json:"areaName"`
}

func (x *ReturnZoneListVo) Reset() {
	*x = ReturnZoneListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnZoneListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnZoneListVo) ProtoMessage() {}

func (x *ReturnZoneListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnZoneListVo.ProtoReflect.Descriptor instead.
func (*ReturnZoneListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{292}
}

func (x *ReturnZoneListVo) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *ReturnZoneListVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ReturnZoneListVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ReturnZoneListVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ReturnZoneListVo) GetContractSum() int64 {
	if x != nil {
		return x.ContractSum
	}
	return 0
}

func (x *ReturnZoneListVo) GetPlanSum() int64 {
	if x != nil {
		return x.PlanSum
	}
	return 0
}

func (x *ReturnZoneListVo) GetSentSum() int64 {
	if x != nil {
		return x.SentSum
	}
	return 0
}

func (x *ReturnZoneListVo) GetPaidSum() int64 {
	if x != nil {
		return x.PaidSum
	}
	return 0
}

func (x *ReturnZoneListVo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ReturnZoneListVo) GetPaidDaysSum() int64 {
	if x != nil {
		return x.PaidDaysSum
	}
	return 0
}

func (x *ReturnZoneListVo) GetPaidCountSum() int64 {
	if x != nil {
		return x.PaidCountSum
	}
	return 0
}

func (x *ReturnZoneListVo) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

func (x *ReturnZoneListVo) GetAreaName() string {
	if x != nil {
		return x.AreaName
	}
	return ""
}

type ReturnMiListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64                  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	StartDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=startDate,proto3" json:"startDate"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=endDate,proto3" json:"endDate"`
	TagId     int64                  `protobuf:"varint,4,opt,name=tagId,proto3" json:"tagId"`
	MiCode    string                 `protobuf:"bytes,5,opt,name=miCode,proto3" json:"miCode"`
	Province  string                 `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City      string                 `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone      string                 `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
	Page      *Page                  `protobuf:"bytes,9,opt,name=page,proto3" json:"page"`
	AreaCode  string                 `protobuf:"bytes,10,opt,name=areaCode,proto3" json:"areaCode"`
}

func (x *ReturnMiListReq) Reset() {
	*x = ReturnMiListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnMiListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnMiListReq) ProtoMessage() {}

func (x *ReturnMiListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnMiListReq.ProtoReflect.Descriptor instead.
func (*ReturnMiListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{293}
}

func (x *ReturnMiListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ReturnMiListReq) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ReturnMiListReq) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ReturnMiListReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *ReturnMiListReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ReturnMiListReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ReturnMiListReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ReturnMiListReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ReturnMiListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ReturnMiListReq) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

type ReturnMiListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ReturnMiListVo `protobuf:"bytes,4,rep,name=list,proto3" json:"list"`
	Total      int64             `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	PageSize   int64             `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64             `protobuf:"varint,3,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ReturnMiListResp) Reset() {
	*x = ReturnMiListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnMiListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnMiListResp) ProtoMessage() {}

func (x *ReturnMiListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnMiListResp.ProtoReflect.Descriptor instead.
func (*ReturnMiListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{294}
}

func (x *ReturnMiListResp) GetList() []*ReturnMiListVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ReturnMiListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ReturnMiListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ReturnMiListResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ReturnMiListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagName      string `protobuf:"bytes,1,opt,name=tagName,proto3" json:"tagName"`
	Province     string `protobuf:"bytes,2,opt,name=province,proto3" json:"province"`
	City         string `protobuf:"bytes,3,opt,name=city,proto3" json:"city"`
	Zone         string `protobuf:"bytes,4,opt,name=zone,proto3" json:"zone"`
	ContractSum  int64  `protobuf:"varint,5,opt,name=contractSum,proto3" json:"contractSum"`
	PlanSum      int64  `protobuf:"varint,6,opt,name=planSum,proto3" json:"planSum"`
	SentSum      int64  `protobuf:"varint,7,opt,name=sentSum,proto3" json:"sentSum"`
	PaidSum      int64  `protobuf:"varint,8,opt,name=paidSum,proto3" json:"paidSum"`
	Price        int64  `protobuf:"varint,9,opt,name=price,proto3" json:"price"`
	MiName       string `protobuf:"bytes,10,opt,name=miName,proto3" json:"miName"`
	PaidDaysSum  int64  `protobuf:"varint,11,opt,name=paidDaysSum,proto3" json:"paidDaysSum"`
	PaidCountSum int64  `protobuf:"varint,12,opt,name=paidCountSum,proto3" json:"paidCountSum"`
	AreaCode     string `protobuf:"bytes,13,opt,name=areaCode,proto3" json:"areaCode"`
	AreaName     string `protobuf:"bytes,14,opt,name=areaName,proto3" json:"areaName"`
}

func (x *ReturnMiListVo) Reset() {
	*x = ReturnMiListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnMiListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnMiListVo) ProtoMessage() {}

func (x *ReturnMiListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnMiListVo.ProtoReflect.Descriptor instead.
func (*ReturnMiListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{295}
}

func (x *ReturnMiListVo) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *ReturnMiListVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ReturnMiListVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ReturnMiListVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ReturnMiListVo) GetContractSum() int64 {
	if x != nil {
		return x.ContractSum
	}
	return 0
}

func (x *ReturnMiListVo) GetPlanSum() int64 {
	if x != nil {
		return x.PlanSum
	}
	return 0
}

func (x *ReturnMiListVo) GetSentSum() int64 {
	if x != nil {
		return x.SentSum
	}
	return 0
}

func (x *ReturnMiListVo) GetPaidSum() int64 {
	if x != nil {
		return x.PaidSum
	}
	return 0
}

func (x *ReturnMiListVo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ReturnMiListVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ReturnMiListVo) GetPaidDaysSum() int64 {
	if x != nil {
		return x.PaidDaysSum
	}
	return 0
}

func (x *ReturnMiListVo) GetPaidCountSum() int64 {
	if x != nil {
		return x.PaidCountSum
	}
	return 0
}

func (x *ReturnMiListVo) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

func (x *ReturnMiListVo) GetAreaName() string {
	if x != nil {
		return x.AreaName
	}
	return ""
}

type ReturnMiMedicineListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId    int64                  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	StartDate    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=startDate,proto3" json:"startDate"`
	EndDate      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=endDate,proto3" json:"endDate"`
	TagId        int64                  `protobuf:"varint,4,opt,name=tagId,proto3" json:"tagId"`
	MiCode       string                 `protobuf:"bytes,5,opt,name=miCode,proto3" json:"miCode"`
	Province     string                 `protobuf:"bytes,6,opt,name=province,proto3" json:"province"`
	City         string                 `protobuf:"bytes,7,opt,name=city,proto3" json:"city"`
	Zone         string                 `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone"`
	Page         *Page                  `protobuf:"bytes,9,opt,name=page,proto3" json:"page"`
	MedicineCode string                 `protobuf:"bytes,10,opt,name=medicineCode,proto3" json:"medicineCode"`
	AreaCode     string                 `protobuf:"bytes,11,opt,name=areaCode,proto3" json:"areaCode"`
}

func (x *ReturnMiMedicineListReq) Reset() {
	*x = ReturnMiMedicineListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnMiMedicineListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnMiMedicineListReq) ProtoMessage() {}

func (x *ReturnMiMedicineListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnMiMedicineListReq.ProtoReflect.Descriptor instead.
func (*ReturnMiMedicineListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{296}
}

func (x *ReturnMiMedicineListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ReturnMiMedicineListReq) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ReturnMiMedicineListReq) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ReturnMiMedicineListReq) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *ReturnMiMedicineListReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ReturnMiMedicineListReq) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ReturnMiMedicineListReq) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ReturnMiMedicineListReq) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ReturnMiMedicineListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ReturnMiMedicineListReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ReturnMiMedicineListReq) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

type ReturnMiMedicineListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ReturnMiMedicineListVo `protobuf:"bytes,4,rep,name=list,proto3" json:"list"`
	Total      int64                     `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	PageSize   int64                     `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                     `protobuf:"varint,3,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ReturnMiMedicineListResp) Reset() {
	*x = ReturnMiMedicineListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnMiMedicineListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnMiMedicineListResp) ProtoMessage() {}

func (x *ReturnMiMedicineListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnMiMedicineListResp.ProtoReflect.Descriptor instead.
func (*ReturnMiMedicineListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{297}
}

func (x *ReturnMiMedicineListResp) GetList() []*ReturnMiMedicineListVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ReturnMiMedicineListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ReturnMiMedicineListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ReturnMiMedicineListResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ReturnMiMedicineListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagName        string `protobuf:"bytes,1,opt,name=tagName,proto3" json:"tagName"`
	ContractNo     string `protobuf:"bytes,2,opt,name=contractNo,proto3" json:"contractNo"`
	Province       string `protobuf:"bytes,3,opt,name=province,proto3" json:"province"`
	City           string `protobuf:"bytes,4,opt,name=city,proto3" json:"city"`
	Zone           string `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone"`
	MiName         string `protobuf:"bytes,6,opt,name=miName,proto3" json:"miName"`
	MedicineName   string `protobuf:"bytes,7,opt,name=medicineName,proto3" json:"medicineName"`
	Specification  string `protobuf:"bytes,8,opt,name=specification,proto3" json:"specification"`
	MedicineCode   string `protobuf:"bytes,9,opt,name=medicineCode,proto3" json:"medicineCode"`
	ContractAmount int64  `protobuf:"varint,10,opt,name=contractAmount,proto3" json:"contractAmount"`
	PlanAmount     int64  `protobuf:"varint,11,opt,name=planAmount,proto3" json:"planAmount"`
	SentAmount     int64  `protobuf:"varint,12,opt,name=sentAmount,proto3" json:"sentAmount"`
	PaidAmount     int64  `protobuf:"varint,13,opt,name=paidAmount,proto3" json:"paidAmount"`
	PaidCount      int64  `protobuf:"varint,14,opt,name=paidCount,proto3" json:"paidCount"`
	PaidDays       int64  `protobuf:"varint,15,opt,name=paidDays,proto3" json:"paidDays"`
	Price          int64  `protobuf:"varint,16,opt,name=price,proto3" json:"price"`
	AreaName       string `protobuf:"bytes,17,opt,name=areaName,proto3" json:"areaName"`
	AreaCode       string `protobuf:"bytes,18,opt,name=areaCode,proto3" json:"areaCode"`
}

func (x *ReturnMiMedicineListVo) Reset() {
	*x = ReturnMiMedicineListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnMiMedicineListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnMiMedicineListVo) ProtoMessage() {}

func (x *ReturnMiMedicineListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnMiMedicineListVo.ProtoReflect.Descriptor instead.
func (*ReturnMiMedicineListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{298}
}

func (x *ReturnMiMedicineListVo) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *ReturnMiMedicineListVo) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *ReturnMiMedicineListVo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ReturnMiMedicineListVo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ReturnMiMedicineListVo) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *ReturnMiMedicineListVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *ReturnMiMedicineListVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ReturnMiMedicineListVo) GetSpecification() string {
	if x != nil {
		return x.Specification
	}
	return ""
}

func (x *ReturnMiMedicineListVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ReturnMiMedicineListVo) GetContractAmount() int64 {
	if x != nil {
		return x.ContractAmount
	}
	return 0
}

func (x *ReturnMiMedicineListVo) GetPlanAmount() int64 {
	if x != nil {
		return x.PlanAmount
	}
	return 0
}

func (x *ReturnMiMedicineListVo) GetSentAmount() int64 {
	if x != nil {
		return x.SentAmount
	}
	return 0
}

func (x *ReturnMiMedicineListVo) GetPaidAmount() int64 {
	if x != nil {
		return x.PaidAmount
	}
	return 0
}

func (x *ReturnMiMedicineListVo) GetPaidCount() int64 {
	if x != nil {
		return x.PaidCount
	}
	return 0
}

func (x *ReturnMiMedicineListVo) GetPaidDays() int64 {
	if x != nil {
		return x.PaidDays
	}
	return 0
}

func (x *ReturnMiMedicineListVo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ReturnMiMedicineListVo) GetAreaName() string {
	if x != nil {
		return x.AreaName
	}
	return ""
}

func (x *ReturnMiMedicineListVo) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

//区域相关 start
type CreateAreaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	AreaName  string `protobuf:"bytes,2,opt,name=areaName,proto3" json:"areaName"`
	AreaCode  string `protobuf:"bytes,3,opt,name=areaCode,proto3" json:"areaCode"`
}

func (x *CreateAreaReq) Reset() {
	*x = CreateAreaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAreaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAreaReq) ProtoMessage() {}

func (x *CreateAreaReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAreaReq.ProtoReflect.Descriptor instead.
func (*CreateAreaReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{299}
}

func (x *CreateAreaReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *CreateAreaReq) GetAreaName() string {
	if x != nil {
		return x.AreaName
	}
	return ""
}

func (x *CreateAreaReq) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

type CreateAreaResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *CreateAreaResp) Reset() {
	*x = CreateAreaResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAreaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAreaResp) ProtoMessage() {}

func (x *CreateAreaResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAreaResp.ProtoReflect.Descriptor instead.
func (*CreateAreaResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{300}
}

func (x *CreateAreaResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type EditAreaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	AreaId    int64  `protobuf:"varint,2,opt,name=areaId,proto3" json:"areaId"`
	AreaName  string `protobuf:"bytes,3,opt,name=areaName,proto3" json:"areaName"`
}

func (x *EditAreaReq) Reset() {
	*x = EditAreaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditAreaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditAreaReq) ProtoMessage() {}

func (x *EditAreaReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditAreaReq.ProtoReflect.Descriptor instead.
func (*EditAreaReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{301}
}

func (x *EditAreaReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *EditAreaReq) GetAreaId() int64 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *EditAreaReq) GetAreaName() string {
	if x != nil {
		return x.AreaName
	}
	return ""
}

type EditAreaResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *EditAreaResp) Reset() {
	*x = EditAreaResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditAreaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditAreaResp) ProtoMessage() {}

func (x *EditAreaResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditAreaResp.ProtoReflect.Descriptor instead.
func (*EditAreaResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{302}
}

func (x *EditAreaResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type DeleteAreaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	AreaCode  string `protobuf:"bytes,2,opt,name=areaCode,proto3" json:"areaCode"`
}

func (x *DeleteAreaReq) Reset() {
	*x = DeleteAreaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAreaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAreaReq) ProtoMessage() {}

func (x *DeleteAreaReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAreaReq.ProtoReflect.Descriptor instead.
func (*DeleteAreaReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{303}
}

func (x *DeleteAreaReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *DeleteAreaReq) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

type DeleteAreaResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *DeleteAreaResp) Reset() {
	*x = DeleteAreaResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAreaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAreaResp) ProtoMessage() {}

func (x *DeleteAreaResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAreaResp.ProtoReflect.Descriptor instead.
func (*DeleteAreaResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{304}
}

func (x *DeleteAreaResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type ListAreaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	Page      *Page  `protobuf:"bytes,2,opt,name=page,proto3" json:"page"`
	AreaName  string `protobuf:"bytes,3,opt,name=areaName,proto3" json:"areaName"`
	AreaCode  string `protobuf:"bytes,4,opt,name=areaCode,proto3" json:"areaCode"`
}

func (x *ListAreaReq) Reset() {
	*x = ListAreaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAreaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAreaReq) ProtoMessage() {}

func (x *ListAreaReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAreaReq.ProtoReflect.Descriptor instead.
func (*ListAreaReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{305}
}

func (x *ListAreaReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ListAreaReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListAreaReq) GetAreaName() string {
	if x != nil {
		return x.AreaName
	}
	return ""
}

func (x *ListAreaReq) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

type ListAreaResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total      int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	PageSize   int64         `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64         `protobuf:"varint,3,opt,name=pageNumber,proto3" json:"pageNumber"`
	List       []*ListAreaVo `protobuf:"bytes,4,rep,name=list,proto3" json:"list"`
}

func (x *ListAreaResp) Reset() {
	*x = ListAreaResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAreaResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAreaResp) ProtoMessage() {}

func (x *ListAreaResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAreaResp.ProtoReflect.Descriptor instead.
func (*ListAreaResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{306}
}

func (x *ListAreaResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListAreaResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAreaResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *ListAreaResp) GetList() []*ListAreaVo {
	if x != nil {
		return x.List
	}
	return nil
}

type ListAreaVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaName   string                 `protobuf:"bytes,1,opt,name=areaName,proto3" json:"areaName"`
	AreaCode   string                 `protobuf:"bytes,2,opt,name=areaCode,proto3" json:"areaCode"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updateTime,proto3" json:"updateTime"`
	AreaId     int64                  `protobuf:"varint,4,opt,name=areaId,proto3" json:"areaId"`
	MiCount    int64                  `protobuf:"varint,5,opt,name=miCount,proto3" json:"miCount"`
}

func (x *ListAreaVo) Reset() {
	*x = ListAreaVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAreaVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAreaVo) ProtoMessage() {}

func (x *ListAreaVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAreaVo.ProtoReflect.Descriptor instead.
func (*ListAreaVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{307}
}

func (x *ListAreaVo) GetAreaName() string {
	if x != nil {
		return x.AreaName
	}
	return ""
}

func (x *ListAreaVo) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

func (x *ListAreaVo) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ListAreaVo) GetAreaId() int64 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *ListAreaVo) GetMiCount() int64 {
	if x != nil {
		return x.MiCount
	}
	return 0
}

type MiContractIdsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page          *Page   `protobuf:"bytes,1,opt,name=page,proto3" json:"page"`
	UserId        int64   `protobuf:"varint,2,opt,name=userId,proto3" json:"userId"`
	ComIds        []int64 `protobuf:"varint,3,rep,packed,name=comIds,proto3" json:"comIds"`
	MiIds         []int64 `protobuf:"varint,4,rep,packed,name=miIds,proto3" json:"miIds"`
	MiContractIds []int64 `protobuf:"varint,5,rep,packed,name=miContractIds,proto3" json:"miContractIds"`
}

func (x *MiContractIdsReq) Reset() {
	*x = MiContractIdsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiContractIdsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiContractIdsReq) ProtoMessage() {}

func (x *MiContractIdsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiContractIdsReq.ProtoReflect.Descriptor instead.
func (*MiContractIdsReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{308}
}

func (x *MiContractIdsReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *MiContractIdsReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MiContractIdsReq) GetComIds() []int64 {
	if x != nil {
		return x.ComIds
	}
	return nil
}

func (x *MiContractIdsReq) GetMiIds() []int64 {
	if x != nil {
		return x.MiIds
	}
	return nil
}

func (x *MiContractIdsReq) GetMiContractIds() []int64 {
	if x != nil {
		return x.MiContractIds
	}
	return nil
}

type ListContractsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  *Page             `protobuf:"bytes,1,opt,name=page,proto3" json:"page"`
	Total int64             `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	List  []*ContractListVo `protobuf:"bytes,3,rep,name=list,proto3" json:"list"`
}

func (x *ListContractsResp) Reset() {
	*x = ListContractsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContractsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContractsResp) ProtoMessage() {}

func (x *ListContractsResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContractsResp.ProtoReflect.Descriptor instead.
func (*ListContractsResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{309}
}

func (x *ListContractsResp) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListContractsResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListContractsResp) GetList() []*ContractListVo {
	if x != nil {
		return x.List
	}
	return nil
}

type StockSyncReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param        []*StockSyncParam `protobuf:"bytes,1,rep,name=param,proto3" json:"param"`
	ManagerId    int64             `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	OrgId        int64             `protobuf:"varint,3,opt,name=orgId,proto3" json:"orgId"`
	PlatFormType string            `protobuf:"bytes,4,opt,name=platFormType,proto3" json:"platFormType"`
}

func (x *StockSyncReq) Reset() {
	*x = StockSyncReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockSyncReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockSyncReq) ProtoMessage() {}

func (x *StockSyncReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockSyncReq.ProtoReflect.Descriptor instead.
func (*StockSyncReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{310}
}

func (x *StockSyncReq) GetParam() []*StockSyncParam {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *StockSyncReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *StockSyncReq) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *StockSyncReq) GetPlatFormType() string {
	if x != nil {
		return x.PlatFormType
	}
	return ""
}

type StockSyncParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineLinkCode string                 `protobuf:"bytes,1,opt,name=medicineLinkCode,proto3" json:"medicineLinkCode"`
	MedicineLinkName string                 `protobuf:"bytes,2,opt,name=medicineLinkName,proto3" json:"medicineLinkName"`
	WarehouseCode    string                 `protobuf:"bytes,3,opt,name=warehouseCode,proto3" json:"warehouseCode"`
	ChangeType       string                 `protobuf:"bytes,4,opt,name=changeType,proto3" json:"changeType"`
	StockNum         int32                  `protobuf:"varint,5,opt,name=stockNum,proto3" json:"stockNum"`
	Num              int32                  `protobuf:"zigzag32,6,opt,name=num,proto3" json:"num"`
	ChangeTime       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=changeTime,proto3" json:"changeTime"`
}

func (x *StockSyncParam) Reset() {
	*x = StockSyncParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockSyncParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockSyncParam) ProtoMessage() {}

func (x *StockSyncParam) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockSyncParam.ProtoReflect.Descriptor instead.
func (*StockSyncParam) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{311}
}

func (x *StockSyncParam) GetMedicineLinkCode() string {
	if x != nil {
		return x.MedicineLinkCode
	}
	return ""
}

func (x *StockSyncParam) GetMedicineLinkName() string {
	if x != nil {
		return x.MedicineLinkName
	}
	return ""
}

func (x *StockSyncParam) GetWarehouseCode() string {
	if x != nil {
		return x.WarehouseCode
	}
	return ""
}

func (x *StockSyncParam) GetChangeType() string {
	if x != nil {
		return x.ChangeType
	}
	return ""
}

func (x *StockSyncParam) GetStockNum() int32 {
	if x != nil {
		return x.StockNum
	}
	return 0
}

func (x *StockSyncParam) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *StockSyncParam) GetChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

type StockSyncResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *StockSyncResp) Reset() {
	*x = StockSyncResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockSyncResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockSyncResp) ProtoMessage() {}

func (x *StockSyncResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockSyncResp.ProtoReflect.Descriptor instead.
func (*StockSyncResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{312}
}

func (x *StockSyncResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type ComStockMedicineBindListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         *Page  `protobuf:"bytes,1,opt,name=page,proto3" json:"page"`
	ManagerId    int64  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	MedicineCode string `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineName string `protobuf:"bytes,4,opt,name=medicineName,proto3" json:"medicineName"`
	CompanyId    int64  `protobuf:"varint,5,opt,name=companyId,proto3" json:"companyId"`
}

func (x *ComStockMedicineBindListReq) Reset() {
	*x = ComStockMedicineBindListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComStockMedicineBindListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComStockMedicineBindListReq) ProtoMessage() {}

func (x *ComStockMedicineBindListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComStockMedicineBindListReq.ProtoReflect.Descriptor instead.
func (*ComStockMedicineBindListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{313}
}

func (x *ComStockMedicineBindListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ComStockMedicineBindListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ComStockMedicineBindListReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ComStockMedicineBindListReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ComStockMedicineBindListReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

type ComStockMedicineBindListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ComStockMedicineBindListVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                         `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                         `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                         `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ComStockMedicineBindListResp) Reset() {
	*x = ComStockMedicineBindListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComStockMedicineBindListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComStockMedicineBindListResp) ProtoMessage() {}

func (x *ComStockMedicineBindListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComStockMedicineBindListResp.ProtoReflect.Descriptor instead.
func (*ComStockMedicineBindListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{314}
}

func (x *ComStockMedicineBindListResp) GetList() []*ComStockMedicineBindListVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ComStockMedicineBindListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ComStockMedicineBindListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ComStockMedicineBindListResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ComStockMedicineBindListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName     string `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode     string `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineLinkName string `protobuf:"bytes,3,opt,name=medicineLinkName,proto3" json:"medicineLinkName"`
	BindId           int64  `protobuf:"varint,4,opt,name=bindId,proto3" json:"bindId"`
	CompanyCode      string `protobuf:"bytes,5,opt,name=companyCode,proto3" json:"companyCode"`
	//药品规格（如20mg,2ml:200ug）
	MedicineSpecification string `protobuf:"bytes,6,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	Manufacturer          string `protobuf:"bytes,7,opt,name=manufacturer,proto3" json:"manufacturer"`
	//包装单位
	MedicineUnit string `protobuf:"bytes,8,opt,name=medicineUnit,proto3" json:"medicineUnit"`
	//剂型（如片剂）
	MedicineForm string `protobuf:"bytes,9,opt,name=medicineForm,proto3" json:"medicineForm"`
	//药品包装(如盒，支，瓶)
	MedicinePackage string `protobuf:"bytes,10,opt,name=medicinePackage,proto3" json:"medicinePackage"`
}

func (x *ComStockMedicineBindListVo) Reset() {
	*x = ComStockMedicineBindListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComStockMedicineBindListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComStockMedicineBindListVo) ProtoMessage() {}

func (x *ComStockMedicineBindListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComStockMedicineBindListVo.ProtoReflect.Descriptor instead.
func (*ComStockMedicineBindListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{315}
}

func (x *ComStockMedicineBindListVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ComStockMedicineBindListVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ComStockMedicineBindListVo) GetMedicineLinkName() string {
	if x != nil {
		return x.MedicineLinkName
	}
	return ""
}

func (x *ComStockMedicineBindListVo) GetBindId() int64 {
	if x != nil {
		return x.BindId
	}
	return 0
}

func (x *ComStockMedicineBindListVo) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *ComStockMedicineBindListVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *ComStockMedicineBindListVo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *ComStockMedicineBindListVo) GetMedicineUnit() string {
	if x != nil {
		return x.MedicineUnit
	}
	return ""
}

func (x *ComStockMedicineBindListVo) GetMedicineForm() string {
	if x != nil {
		return x.MedicineForm
	}
	return ""
}

func (x *ComStockMedicineBindListVo) GetMedicinePackage() string {
	if x != nil {
		return x.MedicinePackage
	}
	return ""
}

type MiStockMedicineBindListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         *Page  `protobuf:"bytes,1,opt,name=page,proto3" json:"page"`
	ManagerId    int64  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	MedicineCode string `protobuf:"bytes,3,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineName string `protobuf:"bytes,4,opt,name=medicineName,proto3" json:"medicineName"`
	MiId         int64  `protobuf:"varint,5,opt,name=miId,proto3" json:"miId"`
}

func (x *MiStockMedicineBindListReq) Reset() {
	*x = MiStockMedicineBindListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiStockMedicineBindListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiStockMedicineBindListReq) ProtoMessage() {}

func (x *MiStockMedicineBindListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiStockMedicineBindListReq.ProtoReflect.Descriptor instead.
func (*MiStockMedicineBindListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{316}
}

func (x *MiStockMedicineBindListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *MiStockMedicineBindListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *MiStockMedicineBindListReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *MiStockMedicineBindListReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *MiStockMedicineBindListReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

type MiStockMedicineBindListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*MiStockMedicineBindListVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                        `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                        `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                        `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *MiStockMedicineBindListResp) Reset() {
	*x = MiStockMedicineBindListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiStockMedicineBindListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiStockMedicineBindListResp) ProtoMessage() {}

func (x *MiStockMedicineBindListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiStockMedicineBindListResp.ProtoReflect.Descriptor instead.
func (*MiStockMedicineBindListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{317}
}

func (x *MiStockMedicineBindListResp) GetList() []*MiStockMedicineBindListVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *MiStockMedicineBindListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MiStockMedicineBindListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *MiStockMedicineBindListResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type MiStockMedicineBindListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName     string `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode     string `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineLinkName string `protobuf:"bytes,3,opt,name=medicineLinkName,proto3" json:"medicineLinkName"`
	BindId           int64  `protobuf:"varint,4,opt,name=bindId,proto3" json:"bindId"`
	MiCode           string `protobuf:"bytes,5,opt,name=miCode,proto3" json:"miCode"`
	//药品规格（如20mg,2ml:200ug）
	MedicineSpecification string `protobuf:"bytes,6,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	Manufacturer          string `protobuf:"bytes,7,opt,name=manufacturer,proto3" json:"manufacturer"`
	//包装单位
	MedicineUnit string `protobuf:"bytes,8,opt,name=medicineUnit,proto3" json:"medicineUnit"`
	//剂型（如片剂）
	MedicineForm string `protobuf:"bytes,9,opt,name=medicineForm,proto3" json:"medicineForm"`
	//药品包装(如盒，支，瓶)
	MedicinePackage string `protobuf:"bytes,10,opt,name=medicinePackage,proto3" json:"medicinePackage"`
}

func (x *MiStockMedicineBindListVo) Reset() {
	*x = MiStockMedicineBindListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiStockMedicineBindListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiStockMedicineBindListVo) ProtoMessage() {}

func (x *MiStockMedicineBindListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiStockMedicineBindListVo.ProtoReflect.Descriptor instead.
func (*MiStockMedicineBindListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{318}
}

func (x *MiStockMedicineBindListVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *MiStockMedicineBindListVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *MiStockMedicineBindListVo) GetMedicineLinkName() string {
	if x != nil {
		return x.MedicineLinkName
	}
	return ""
}

func (x *MiStockMedicineBindListVo) GetBindId() int64 {
	if x != nil {
		return x.BindId
	}
	return 0
}

func (x *MiStockMedicineBindListVo) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *MiStockMedicineBindListVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *MiStockMedicineBindListVo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *MiStockMedicineBindListVo) GetMedicineUnit() string {
	if x != nil {
		return x.MedicineUnit
	}
	return ""
}

func (x *MiStockMedicineBindListVo) GetMedicineForm() string {
	if x != nil {
		return x.MedicineForm
	}
	return ""
}

func (x *MiStockMedicineBindListVo) GetMedicinePackage() string {
	if x != nil {
		return x.MedicinePackage
	}
	return ""
}

type ComStockMedicineBindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId        int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MedicineCode     string `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineName     string `protobuf:"bytes,3,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineLinkCode string `protobuf:"bytes,4,opt,name=medicineLinkCode,proto3" json:"medicineLinkCode"`
	CompanyId        int64  `protobuf:"varint,5,opt,name=companyId,proto3" json:"companyId"`
	BindId           int64  `protobuf:"varint,6,opt,name=bindId,proto3" json:"bindId"`
	OldLinkCode      string `protobuf:"bytes,7,opt,name=oldLinkCode,proto3" json:"oldLinkCode"`
}

func (x *ComStockMedicineBindReq) Reset() {
	*x = ComStockMedicineBindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComStockMedicineBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComStockMedicineBindReq) ProtoMessage() {}

func (x *ComStockMedicineBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComStockMedicineBindReq.ProtoReflect.Descriptor instead.
func (*ComStockMedicineBindReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{319}
}

func (x *ComStockMedicineBindReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ComStockMedicineBindReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *ComStockMedicineBindReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ComStockMedicineBindReq) GetMedicineLinkCode() string {
	if x != nil {
		return x.MedicineLinkCode
	}
	return ""
}

func (x *ComStockMedicineBindReq) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ComStockMedicineBindReq) GetBindId() int64 {
	if x != nil {
		return x.BindId
	}
	return 0
}

func (x *ComStockMedicineBindReq) GetOldLinkCode() string {
	if x != nil {
		return x.OldLinkCode
	}
	return ""
}

type ComStockMedicineBindResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *ComStockMedicineBindResp) Reset() {
	*x = ComStockMedicineBindResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComStockMedicineBindResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComStockMedicineBindResp) ProtoMessage() {}

func (x *ComStockMedicineBindResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComStockMedicineBindResp.ProtoReflect.Descriptor instead.
func (*ComStockMedicineBindResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{320}
}

func (x *ComStockMedicineBindResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type MiStockMedicineBindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManagerId        int64  `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	MedicineCode     string `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	MedicineName     string `protobuf:"bytes,3,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineLinkCode string `protobuf:"bytes,4,opt,name=medicineLinkCode,proto3" json:"medicineLinkCode"`
	MiId             int64  `protobuf:"varint,5,opt,name=miId,proto3" json:"miId"`
	BindId           int64  `protobuf:"varint,6,opt,name=bindId,proto3" json:"bindId"`
	OldLinkCode      string `protobuf:"bytes,7,opt,name=oldLinkCode,proto3" json:"oldLinkCode"`
}

func (x *MiStockMedicineBindReq) Reset() {
	*x = MiStockMedicineBindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiStockMedicineBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiStockMedicineBindReq) ProtoMessage() {}

func (x *MiStockMedicineBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiStockMedicineBindReq.ProtoReflect.Descriptor instead.
func (*MiStockMedicineBindReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{321}
}

func (x *MiStockMedicineBindReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *MiStockMedicineBindReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *MiStockMedicineBindReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *MiStockMedicineBindReq) GetMedicineLinkCode() string {
	if x != nil {
		return x.MedicineLinkCode
	}
	return ""
}

func (x *MiStockMedicineBindReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *MiStockMedicineBindReq) GetBindId() int64 {
	if x != nil {
		return x.BindId
	}
	return 0
}

func (x *MiStockMedicineBindReq) GetOldLinkCode() string {
	if x != nil {
		return x.OldLinkCode
	}
	return ""
}

type MiStockMedicineBindResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int64 `protobuf:"varint,1,opt,name=result,proto3" json:"result"`
}

func (x *MiStockMedicineBindResp) Reset() {
	*x = MiStockMedicineBindResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiStockMedicineBindResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiStockMedicineBindResp) ProtoMessage() {}

func (x *MiStockMedicineBindResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiStockMedicineBindResp.ProtoReflect.Descriptor instead.
func (*MiStockMedicineBindResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{322}
}

func (x *MiStockMedicineBindResp) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

type StockListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page          *Page                  `protobuf:"bytes,1,opt,name=page,proto3" json:"page"`
	ManagerId     int64                  `protobuf:"varint,2,opt,name=managerId,proto3" json:"managerId"`
	ContractNo    string                 `protobuf:"bytes,3,opt,name=contractNo,proto3" json:"contractNo"`
	MedicineName  string                 `protobuf:"bytes,4,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode  string                 `protobuf:"bytes,5,opt,name=medicineCode,proto3" json:"medicineCode"`
	MiId          int64                  `protobuf:"varint,6,opt,name=miId,proto3" json:"miId"`
	ComId         int64                  `protobuf:"varint,7,opt,name=comId,proto3" json:"comId"`
	StartAt       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=startAt,proto3" json:"startAt"`
	EndAt         *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=endAt,proto3" json:"endAt"`
	TenderCompany string                 `protobuf:"bytes,10,opt,name=tenderCompany,proto3" json:"tenderCompany"`
	CompanyName   string                 `protobuf:"bytes,11,opt,name=companyName,proto3" json:"companyName"`
	CompanyCode   string                 `protobuf:"bytes,12,opt,name=companyCode,proto3" json:"companyCode"`
	MiName        string                 `protobuf:"bytes,13,opt,name=miName,proto3" json:"miName"`
	MiCode        string                 `protobuf:"bytes,14,opt,name=miCode,proto3" json:"miCode"`
}

func (x *StockListReq) Reset() {
	*x = StockListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockListReq) ProtoMessage() {}

func (x *StockListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockListReq.ProtoReflect.Descriptor instead.
func (*StockListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{323}
}

func (x *StockListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *StockListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *StockListReq) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *StockListReq) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *StockListReq) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *StockListReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *StockListReq) GetComId() int64 {
	if x != nil {
		return x.ComId
	}
	return 0
}

func (x *StockListReq) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *StockListReq) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *StockListReq) GetTenderCompany() string {
	if x != nil {
		return x.TenderCompany
	}
	return ""
}

func (x *StockListReq) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *StockListReq) GetCompanyCode() string {
	if x != nil {
		return x.CompanyCode
	}
	return ""
}

func (x *StockListReq) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *StockListReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

type StockListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*StockListVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64          `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64          `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *StockListResp) Reset() {
	*x = StockListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockListResp) ProtoMessage() {}

func (x *StockListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockListResp.ProtoReflect.Descriptor instead.
func (*StockListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{324}
}

func (x *StockListResp) GetList() []*StockListVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *StockListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *StockListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *StockListResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type StockListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName          string                 `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode          string                 `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	ContractNo            string                 `protobuf:"bytes,3,opt,name=contractNo,proto3" json:"contractNo"`
	TenderCompany         string                 `protobuf:"bytes,4,opt,name=tenderCompany,proto3" json:"tenderCompany"`
	CompanyName           string                 `protobuf:"bytes,5,opt,name=companyName,proto3" json:"companyName"`
	ComStockNum           int32                  `protobuf:"varint,6,opt,name=comStockNum,proto3" json:"comStockNum"`
	MiName                string                 `protobuf:"bytes,7,opt,name=miName,proto3" json:"miName"`
	MiStockNum            int32                  `protobuf:"varint,8,opt,name=miStockNum,proto3" json:"miStockNum"`
	MedicineSpecification string                 `protobuf:"bytes,9,opt,name=medicineSpecification,proto3" json:"medicineSpecification"`
	ContractStartAt       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=contractStartAt,proto3" json:"contractStartAt"`
	ContractEndAt         *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=contractEndAt,proto3" json:"contractEndAt"`
	ComStockUpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=comStockUpdatedAt,proto3" json:"comStockUpdatedAt"`
	MiStockUpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=miStockUpdatedAt,proto3" json:"miStockUpdatedAt"`
}

func (x *StockListVo) Reset() {
	*x = StockListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockListVo) ProtoMessage() {}

func (x *StockListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockListVo.ProtoReflect.Descriptor instead.
func (*StockListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{325}
}

func (x *StockListVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *StockListVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *StockListVo) GetContractNo() string {
	if x != nil {
		return x.ContractNo
	}
	return ""
}

func (x *StockListVo) GetTenderCompany() string {
	if x != nil {
		return x.TenderCompany
	}
	return ""
}

func (x *StockListVo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *StockListVo) GetComStockNum() int32 {
	if x != nil {
		return x.ComStockNum
	}
	return 0
}

func (x *StockListVo) GetMiName() string {
	if x != nil {
		return x.MiName
	}
	return ""
}

func (x *StockListVo) GetMiStockNum() int32 {
	if x != nil {
		return x.MiStockNum
	}
	return 0
}

func (x *StockListVo) GetMedicineSpecification() string {
	if x != nil {
		return x.MedicineSpecification
	}
	return ""
}

func (x *StockListVo) GetContractStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ContractStartAt
	}
	return nil
}

func (x *StockListVo) GetContractEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ContractEndAt
	}
	return nil
}

func (x *StockListVo) GetComStockUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ComStockUpdatedAt
	}
	return nil
}

func (x *StockListVo) GetMiStockUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.MiStockUpdatedAt
	}
	return nil
}

type GetInfoHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoId    int64    `protobuf:"varint,1,opt,name=infoId,proto3" json:"infoId"`
	LinkCodes []string `protobuf:"bytes,2,rep,name=linkCodes,proto3" json:"linkCodes"`
	LinkType  string   `protobuf:"bytes,3,opt,name=linkType,proto3" json:"linkType"`
}

func (x *GetInfoHashReq) Reset() {
	*x = GetInfoHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoHashReq) ProtoMessage() {}

func (x *GetInfoHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoHashReq.ProtoReflect.Descriptor instead.
func (*GetInfoHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{326}
}

func (x *GetInfoHashReq) GetInfoId() int64 {
	if x != nil {
		return x.InfoId
	}
	return 0
}

func (x *GetInfoHashReq) GetLinkCodes() []string {
	if x != nil {
		return x.LinkCodes
	}
	return nil
}

func (x *GetInfoHashReq) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

type InfoHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoId       int64                  `protobuf:"varint,1,opt,name=infoId,proto3" json:"infoId"`
	LinkCode     string                 `protobuf:"bytes,2,opt,name=linkCode,proto3" json:"linkCode"`
	LinkType     string                 `protobuf:"bytes,3,opt,name=linkType,proto3" json:"linkType"`
	InfoHash     string                 `protobuf:"bytes,4,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *InfoHash) Reset() {
	*x = InfoHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoHash) ProtoMessage() {}

func (x *InfoHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoHash.ProtoReflect.Descriptor instead.
func (*InfoHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{327}
}

func (x *InfoHash) GetInfoId() int64 {
	if x != nil {
		return x.InfoId
	}
	return 0
}

func (x *InfoHash) GetLinkCode() string {
	if x != nil {
		return x.LinkCode
	}
	return ""
}

func (x *InfoHash) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

func (x *InfoHash) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *InfoHash) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

type GetInfoHashRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*InfoHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64       `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64       `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64       `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetInfoHashRsp) Reset() {
	*x = GetInfoHashRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoHashRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoHashRsp) ProtoMessage() {}

func (x *GetInfoHashRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoHashRsp.ProtoReflect.Descriptor instead.
func (*GetInfoHashRsp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{328}
}

func (x *GetInfoHashRsp) GetList() []*InfoHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetInfoHashRsp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetInfoHashRsp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetInfoHashRsp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetFactoringAgreerefHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//谁在请求 按照搜索账号控制显示范围
	ManagerId            int64    `protobuf:"varint,1,opt,name=managerId,proto3" json:"managerId"`
	FactoringAgreerefIds []int64  `protobuf:"varint,2,rep,packed,name=factoringAgreerefIds,proto3" json:"factoringAgreerefIds"`
	Agreerefs            []string `protobuf:"bytes,3,rep,name=agreerefs,proto3" json:"agreerefs"`
}

func (x *GetFactoringAgreerefHashReq) Reset() {
	*x = GetFactoringAgreerefHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFactoringAgreerefHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFactoringAgreerefHashReq) ProtoMessage() {}

func (x *GetFactoringAgreerefHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFactoringAgreerefHashReq.ProtoReflect.Descriptor instead.
func (*GetFactoringAgreerefHashReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{329}
}

func (x *GetFactoringAgreerefHashReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *GetFactoringAgreerefHashReq) GetFactoringAgreerefIds() []int64 {
	if x != nil {
		return x.FactoringAgreerefIds
	}
	return nil
}

func (x *GetFactoringAgreerefHashReq) GetAgreerefs() []string {
	if x != nil {
		return x.Agreerefs
	}
	return nil
}

type FactoringAgreerefHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FactoringAgreerefIds int64                  `protobuf:"varint,1,opt,name=factoringAgreerefIds,proto3" json:"factoringAgreerefIds"`
	Agreeref             string                 `protobuf:"bytes,2,opt,name=agreeref,proto3" json:"agreeref"`
	InfoHash             string                 `protobuf:"bytes,3,opt,name=infoHash,proto3" json:"infoHash"`
	InfoUploadAt         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=infoUploadAt,proto3" json:"infoUploadAt"`
}

func (x *FactoringAgreerefHash) Reset() {
	*x = FactoringAgreerefHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactoringAgreerefHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactoringAgreerefHash) ProtoMessage() {}

func (x *FactoringAgreerefHash) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactoringAgreerefHash.ProtoReflect.Descriptor instead.
func (*FactoringAgreerefHash) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{330}
}

func (x *FactoringAgreerefHash) GetFactoringAgreerefIds() int64 {
	if x != nil {
		return x.FactoringAgreerefIds
	}
	return 0
}

func (x *FactoringAgreerefHash) GetAgreeref() string {
	if x != nil {
		return x.Agreeref
	}
	return ""
}

func (x *FactoringAgreerefHash) GetInfoHash() string {
	if x != nil {
		return x.InfoHash
	}
	return ""
}

func (x *FactoringAgreerefHash) GetInfoUploadAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InfoUploadAt
	}
	return nil
}

type GetFactoringAgreerefHashResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*FactoringAgreerefHash `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                    `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                    `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                    `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetFactoringAgreerefHashResp) Reset() {
	*x = GetFactoringAgreerefHashResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFactoringAgreerefHashResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFactoringAgreerefHashResp) ProtoMessage() {}

func (x *GetFactoringAgreerefHashResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFactoringAgreerefHashResp.ProtoReflect.Descriptor instead.
func (*GetFactoringAgreerefHashResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{331}
}

func (x *GetFactoringAgreerefHashResp) GetList() []*FactoringAgreerefHash {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetFactoringAgreerefHashResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetFactoringAgreerefHashResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetFactoringAgreerefHashResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ShipmentRankDataYearReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year      int64 `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	MiId      int64 `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
	Page      *Page `protobuf:"bytes,3,opt,name=page,proto3" json:"page"`
	ManagerId int64 `protobuf:"varint,4,opt,name=managerId,proto3" json:"managerId"`
}

func (x *ShipmentRankDataYearReq) Reset() {
	*x = ShipmentRankDataYearReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentRankDataYearReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentRankDataYearReq) ProtoMessage() {}

func (x *ShipmentRankDataYearReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentRankDataYearReq.ProtoReflect.Descriptor instead.
func (*ShipmentRankDataYearReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{332}
}

func (x *ShipmentRankDataYearReq) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ShipmentRankDataYearReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *ShipmentRankDataYearReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ShipmentRankDataYearReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type ShipmentMedicineRankDataYearResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vo         []*ShipmentMedicineRankDataYearVo `protobuf:"bytes,1,rep,name=vo,proto3" json:"vo"`
	Total      int64                             `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                             `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                             `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ShipmentMedicineRankDataYearResp) Reset() {
	*x = ShipmentMedicineRankDataYearResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentMedicineRankDataYearResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentMedicineRankDataYearResp) ProtoMessage() {}

func (x *ShipmentMedicineRankDataYearResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentMedicineRankDataYearResp.ProtoReflect.Descriptor instead.
func (*ShipmentMedicineRankDataYearResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{333}
}

func (x *ShipmentMedicineRankDataYearResp) GetVo() []*ShipmentMedicineRankDataYearVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *ShipmentMedicineRankDataYearResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ShipmentMedicineRankDataYearResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ShipmentMedicineRankDataYearResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ShipmentMedicineRankDataYearVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName string `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineNum  int64  `protobuf:"varint,2,opt,name=medicineNum,proto3" json:"medicineNum"`
}

func (x *ShipmentMedicineRankDataYearVo) Reset() {
	*x = ShipmentMedicineRankDataYearVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentMedicineRankDataYearVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentMedicineRankDataYearVo) ProtoMessage() {}

func (x *ShipmentMedicineRankDataYearVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentMedicineRankDataYearVo.ProtoReflect.Descriptor instead.
func (*ShipmentMedicineRankDataYearVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{334}
}

func (x *ShipmentMedicineRankDataYearVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *ShipmentMedicineRankDataYearVo) GetMedicineNum() int64 {
	if x != nil {
		return x.MedicineNum
	}
	return 0
}

type ShipmentCompanyRankDataYearResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vo         []*ShipmentCompanyRankDataYearVo `protobuf:"bytes,1,rep,name=vo,proto3" json:"vo"`
	Total      int64                            `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                            `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                            `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ShipmentCompanyRankDataYearResp) Reset() {
	*x = ShipmentCompanyRankDataYearResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentCompanyRankDataYearResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentCompanyRankDataYearResp) ProtoMessage() {}

func (x *ShipmentCompanyRankDataYearResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentCompanyRankDataYearResp.ProtoReflect.Descriptor instead.
func (*ShipmentCompanyRankDataYearResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{335}
}

func (x *ShipmentCompanyRankDataYearResp) GetVo() []*ShipmentCompanyRankDataYearVo {
	if x != nil {
		return x.Vo
	}
	return nil
}

func (x *ShipmentCompanyRankDataYearResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ShipmentCompanyRankDataYearResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ShipmentCompanyRankDataYearResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ShipmentCompanyRankDataYearVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyName string `protobuf:"bytes,1,opt,name=companyName,proto3" json:"companyName"`
	Amount      int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount"`
}

func (x *ShipmentCompanyRankDataYearVo) Reset() {
	*x = ShipmentCompanyRankDataYearVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipmentCompanyRankDataYearVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipmentCompanyRankDataYearVo) ProtoMessage() {}

func (x *ShipmentCompanyRankDataYearVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipmentCompanyRankDataYearVo.ProtoReflect.Descriptor instead.
func (*ShipmentCompanyRankDataYearVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{336}
}

func (x *ShipmentCompanyRankDataYearVo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *ShipmentCompanyRankDataYearVo) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type GetShipmentLogisticsListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComId     int64 `protobuf:"varint,1,opt,name=comId,proto3" json:"comId"`
	MiId      int64 `protobuf:"varint,2,opt,name=miId,proto3" json:"miId"`
	Page      *Page `protobuf:"bytes,3,opt,name=page,proto3" json:"page"`
	ManagerId int64 `protobuf:"varint,4,opt,name=managerId,proto3" json:"managerId"`
}

func (x *GetShipmentLogisticsListReq) Reset() {
	*x = GetShipmentLogisticsListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentLogisticsListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentLogisticsListReq) ProtoMessage() {}

func (x *GetShipmentLogisticsListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentLogisticsListReq.ProtoReflect.Descriptor instead.
func (*GetShipmentLogisticsListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{337}
}

func (x *GetShipmentLogisticsListReq) GetComId() int64 {
	if x != nil {
		return x.ComId
	}
	return 0
}

func (x *GetShipmentLogisticsListReq) GetMiId() int64 {
	if x != nil {
		return x.MiId
	}
	return 0
}

func (x *GetShipmentLogisticsListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetShipmentLogisticsListReq) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

type GetShipmentLogisticsListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*GetShipmentLogisticsListVo `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                         `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                         `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                         `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *GetShipmentLogisticsListResp) Reset() {
	*x = GetShipmentLogisticsListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentLogisticsListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentLogisticsListResp) ProtoMessage() {}

func (x *GetShipmentLogisticsListResp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentLogisticsListResp.ProtoReflect.Descriptor instead.
func (*GetShipmentLogisticsListResp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{338}
}

func (x *GetShipmentLogisticsListResp) GetList() []*GetShipmentLogisticsListVo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetShipmentLogisticsListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetShipmentLogisticsListResp) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetShipmentLogisticsListResp) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type GetShipmentLogisticsListVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicineName    string                 `protobuf:"bytes,1,opt,name=medicineName,proto3" json:"medicineName"`
	MedicineCode    string                 `protobuf:"bytes,2,opt,name=medicineCode,proto3" json:"medicineCode"`
	ShipmentStatus  string                 `protobuf:"bytes,3,opt,name=shipmentStatus,proto3" json:"shipmentStatus"`
	ReceiveDeadline *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=receiveDeadline,proto3" json:"receiveDeadline"`
}

func (x *GetShipmentLogisticsListVo) Reset() {
	*x = GetShipmentLogisticsListVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShipmentLogisticsListVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShipmentLogisticsListVo) ProtoMessage() {}

func (x *GetShipmentLogisticsListVo) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShipmentLogisticsListVo.ProtoReflect.Descriptor instead.
func (*GetShipmentLogisticsListVo) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{339}
}

func (x *GetShipmentLogisticsListVo) GetMedicineName() string {
	if x != nil {
		return x.MedicineName
	}
	return ""
}

func (x *GetShipmentLogisticsListVo) GetMedicineCode() string {
	if x != nil {
		return x.MedicineCode
	}
	return ""
}

func (x *GetShipmentLogisticsListVo) GetShipmentStatus() string {
	if x != nil {
		return x.ShipmentStatus
	}
	return ""
}

func (x *GetShipmentLogisticsListVo) GetReceiveDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveDeadline
	}
	return nil
}

//============ 月度报销服务 ==========================
type ReimbursementListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year           int64  `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month          int64  `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	MiCode         string `protobuf:"bytes,3,opt,name=miCode,proto3" json:"miCode"`
	MibCode        string `protobuf:"bytes,4,opt,name=mibCode,proto3" json:"mibCode"`
	ApplyReport    int64  `protobuf:"varint,5,opt,name=applyReport,proto3" json:"applyReport"`
	ApprovalReport int64  `protobuf:"varint,6,opt,name=approvalReport,proto3" json:"approvalReport"`
	PayStatus      string `protobuf:"bytes,7,opt,name=payStatus,proto3" json:"payStatus"`
	ApprovalStatus string `protobuf:"bytes,8,opt,name=approvalStatus,proto3" json:"approvalStatus"`
	Page           *Page  `protobuf:"bytes,9,opt,name=page,proto3" json:"page"`
	InsuranceType  string `protobuf:"bytes,10,opt,name=insuranceType,proto3" json:"insuranceType"`
}

func (x *ReimbursementListReq) Reset() {
	*x = ReimbursementListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReimbursementListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReimbursementListReq) ProtoMessage() {}

func (x *ReimbursementListReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReimbursementListReq.ProtoReflect.Descriptor instead.
func (*ReimbursementListReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{340}
}

func (x *ReimbursementListReq) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReimbursementListReq) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ReimbursementListReq) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ReimbursementListReq) GetMibCode() string {
	if x != nil {
		return x.MibCode
	}
	return ""
}

func (x *ReimbursementListReq) GetApplyReport() int64 {
	if x != nil {
		return x.ApplyReport
	}
	return 0
}

func (x *ReimbursementListReq) GetApprovalReport() int64 {
	if x != nil {
		return x.ApprovalReport
	}
	return 0
}

func (x *ReimbursementListReq) GetPayStatus() string {
	if x != nil {
		return x.PayStatus
	}
	return ""
}

func (x *ReimbursementListReq) GetApprovalStatus() string {
	if x != nil {
		return x.ApprovalStatus
	}
	return ""
}

func (x *ReimbursementListReq) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ReimbursementListReq) GetInsuranceType() string {
	if x != nil {
		return x.InsuranceType
	}
	return ""
}

type ReimbursementListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*ReimbursementListBody `protobuf:"bytes,1,rep,name=list,proto3" json:"list"`
	Total      int64                    `protobuf:"varint,2,opt,name=total,proto3" json:"total"`
	PageSize   int64                    `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize"`
	PageNumber int64                    `protobuf:"varint,4,opt,name=pageNumber,proto3" json:"pageNumber"`
}

func (x *ReimbursementListRes) Reset() {
	*x = ReimbursementListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReimbursementListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReimbursementListRes) ProtoMessage() {}

func (x *ReimbursementListRes) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReimbursementListRes.ProtoReflect.Descriptor instead.
func (*ReimbursementListRes) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{341}
}

func (x *ReimbursementListRes) GetList() []*ReimbursementListBody {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ReimbursementListRes) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ReimbursementListRes) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ReimbursementListRes) GetPageNumber() int64 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type ReimbursementListBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year           int64                  `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month          int64                  `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	Mi             string                 `protobuf:"bytes,3,opt,name=mi,proto3" json:"mi"`
	ApplyAmount    int64                  `protobuf:"varint,4,opt,name=applyAmount,proto3" json:"applyAmount"`
	ApprovalAmount int64                  `protobuf:"varint,5,opt,name=approvalAmount,proto3" json:"approvalAmount"`
	FloatAmount    int64                  `protobuf:"varint,6,opt,name=floatAmount,proto3" json:"floatAmount"`
	FixedAmount    int64                  `protobuf:"varint,7,opt,name=fixedAmount,proto3" json:"fixedAmount"`
	ApprovalStatus string                 `protobuf:"bytes,8,opt,name=approvalStatus,proto3" json:"approvalStatus"`
	PayStatus      string                 `protobuf:"bytes,9,opt,name=payStatus,proto3" json:"payStatus"`
	PayErrMsg      string                 `protobuf:"bytes,10,opt,name=payErrMsg,proto3" json:"payErrMsg"`
	BankAccount    string                 `protobuf:"bytes,11,opt,name=bankAccount,proto3" json:"bankAccount"`
	BankOrgName    string                 `protobuf:"bytes,12,opt,name=bankOrgName,proto3" json:"bankOrgName"`
	BankName       string                 `protobuf:"bytes,13,opt,name=bankName,proto3" json:"bankName"`
	ApprovalFile   string                 `protobuf:"bytes,14,opt,name=approvalFile,proto3" json:"approvalFile"`
	ApplyFile      string                 `protobuf:"bytes,15,opt,name=applyFile,proto3" json:"applyFile"`
	PaySuccessTime *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=paySuccessTime,proto3" json:"paySuccessTime"`
	InsuranceType  string                 `protobuf:"bytes,18,opt,name=insuranceType,proto3" json:"insuranceType"`
	FundAmount     int64                  `protobuf:"varint,19,opt,name=fundAmount,proto3" json:"fundAmount"`
}

func (x *ReimbursementListBody) Reset() {
	*x = ReimbursementListBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReimbursementListBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReimbursementListBody) ProtoMessage() {}

func (x *ReimbursementListBody) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReimbursementListBody.ProtoReflect.Descriptor instead.
func (*ReimbursementListBody) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{342}
}

func (x *ReimbursementListBody) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReimbursementListBody) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ReimbursementListBody) GetMi() string {
	if x != nil {
		return x.Mi
	}
	return ""
}

func (x *ReimbursementListBody) GetApplyAmount() int64 {
	if x != nil {
		return x.ApplyAmount
	}
	return 0
}

func (x *ReimbursementListBody) GetApprovalAmount() int64 {
	if x != nil {
		return x.ApprovalAmount
	}
	return 0
}

func (x *ReimbursementListBody) GetFloatAmount() int64 {
	if x != nil {
		return x.FloatAmount
	}
	return 0
}

func (x *ReimbursementListBody) GetFixedAmount() int64 {
	if x != nil {
		return x.FixedAmount
	}
	return 0
}

func (x *ReimbursementListBody) GetApprovalStatus() string {
	if x != nil {
		return x.ApprovalStatus
	}
	return ""
}

func (x *ReimbursementListBody) GetPayStatus() string {
	if x != nil {
		return x.PayStatus
	}
	return ""
}

func (x *ReimbursementListBody) GetPayErrMsg() string {
	if x != nil {
		return x.PayErrMsg
	}
	return ""
}

func (x *ReimbursementListBody) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *ReimbursementListBody) GetBankOrgName() string {
	if x != nil {
		return x.BankOrgName
	}
	return ""
}

func (x *ReimbursementListBody) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *ReimbursementListBody) GetApprovalFile() string {
	if x != nil {
		return x.ApprovalFile
	}
	return ""
}

func (x *ReimbursementListBody) GetApplyFile() string {
	if x != nil {
		return x.ApplyFile
	}
	return ""
}

func (x *ReimbursementListBody) GetPaySuccessTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PaySuccessTime
	}
	return nil
}

func (x *ReimbursementListBody) GetInsuranceType() string {
	if x != nil {
		return x.InsuranceType
	}
	return ""
}

func (x *ReimbursementListBody) GetFundAmount() int64 {
	if x != nil {
		return x.FundAmount
	}
	return 0
}

type ReimbursementUpApplyFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year          int64  `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month         int64  `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	MiCode        string `protobuf:"bytes,3,opt,name=miCode,proto3" json:"miCode"`
	MibCode       string `protobuf:"bytes,4,opt,name=mibCode,proto3" json:"mibCode"`
	File          string `protobuf:"bytes,5,opt,name=file,proto3" json:"file"`
	ManagerId     int64  `protobuf:"varint,6,opt,name=managerId,proto3" json:"managerId"`
	InsuranceType string `protobuf:"bytes,7,opt,name=insuranceType,proto3" json:"insuranceType"`
}

func (x *ReimbursementUpApplyFile) Reset() {
	*x = ReimbursementUpApplyFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReimbursementUpApplyFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReimbursementUpApplyFile) ProtoMessage() {}

func (x *ReimbursementUpApplyFile) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReimbursementUpApplyFile.ProtoReflect.Descriptor instead.
func (*ReimbursementUpApplyFile) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{343}
}

func (x *ReimbursementUpApplyFile) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReimbursementUpApplyFile) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ReimbursementUpApplyFile) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ReimbursementUpApplyFile) GetMibCode() string {
	if x != nil {
		return x.MibCode
	}
	return ""
}

func (x *ReimbursementUpApplyFile) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *ReimbursementUpApplyFile) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ReimbursementUpApplyFile) GetInsuranceType() string {
	if x != nil {
		return x.InsuranceType
	}
	return ""
}

type ReimbursementUpApprovalFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year          int64  `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month         int64  `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	MiCode        string `protobuf:"bytes,3,opt,name=miCode,proto3" json:"miCode"`
	MibCode       string `protobuf:"bytes,4,opt,name=mibCode,proto3" json:"mibCode"`
	File          string `protobuf:"bytes,5,opt,name=file,proto3" json:"file"`
	ManagerId     int64  `protobuf:"varint,6,opt,name=managerId,proto3" json:"managerId"`
	InsuranceType string `protobuf:"bytes,7,opt,name=insuranceType,proto3" json:"insuranceType"`
}

func (x *ReimbursementUpApprovalFile) Reset() {
	*x = ReimbursementUpApprovalFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReimbursementUpApprovalFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReimbursementUpApprovalFile) ProtoMessage() {}

func (x *ReimbursementUpApprovalFile) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReimbursementUpApprovalFile.ProtoReflect.Descriptor instead.
func (*ReimbursementUpApprovalFile) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{344}
}

func (x *ReimbursementUpApprovalFile) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReimbursementUpApprovalFile) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ReimbursementUpApprovalFile) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ReimbursementUpApprovalFile) GetMibCode() string {
	if x != nil {
		return x.MibCode
	}
	return ""
}

func (x *ReimbursementUpApprovalFile) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *ReimbursementUpApprovalFile) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ReimbursementUpApprovalFile) GetInsuranceType() string {
	if x != nil {
		return x.InsuranceType
	}
	return ""
}

type StandardRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
}

func (x *StandardRes) Reset() {
	*x = StandardRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandardRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardRes) ProtoMessage() {}

func (x *StandardRes) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandardRes.ProtoReflect.Descriptor instead.
func (*StandardRes) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{345}
}

func (x *StandardRes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *StandardRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ReimbursementUpApprovalAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year          int64  `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month         int64  `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	MiCode        string `protobuf:"bytes,3,opt,name=miCode,proto3" json:"miCode"`
	MibCode       string `protobuf:"bytes,4,opt,name=mibCode,proto3" json:"mibCode"`
	Amount        int64  `protobuf:"varint,5,opt,name=amount,proto3" json:"amount"`
	ManagerId     int64  `protobuf:"varint,6,opt,name=managerId,proto3" json:"managerId"`
	InsuranceType string `protobuf:"bytes,7,opt,name=insuranceType,proto3" json:"insuranceType"`
	FundAmount    int64  `protobuf:"varint,8,opt,name=fundAmount,proto3" json:"fundAmount"`
}

func (x *ReimbursementUpApprovalAmount) Reset() {
	*x = ReimbursementUpApprovalAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReimbursementUpApprovalAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReimbursementUpApprovalAmount) ProtoMessage() {}

func (x *ReimbursementUpApprovalAmount) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReimbursementUpApprovalAmount.ProtoReflect.Descriptor instead.
func (*ReimbursementUpApprovalAmount) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{346}
}

func (x *ReimbursementUpApprovalAmount) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReimbursementUpApprovalAmount) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ReimbursementUpApprovalAmount) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ReimbursementUpApprovalAmount) GetMibCode() string {
	if x != nil {
		return x.MibCode
	}
	return ""
}

func (x *ReimbursementUpApprovalAmount) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ReimbursementUpApprovalAmount) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ReimbursementUpApprovalAmount) GetInsuranceType() string {
	if x != nil {
		return x.InsuranceType
	}
	return ""
}

func (x *ReimbursementUpApprovalAmount) GetFundAmount() int64 {
	if x != nil {
		return x.FundAmount
	}
	return 0
}

type ReimbursementUpApplyAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year          int64  `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month         int64  `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	MiCode        string `protobuf:"bytes,3,opt,name=miCode,proto3" json:"miCode"`
	Amount        int64  `protobuf:"varint,5,opt,name=amount,proto3" json:"amount"`
	ManagerId     int64  `protobuf:"varint,6,opt,name=managerId,proto3" json:"managerId"`
	InsuranceType string `protobuf:"bytes,7,opt,name=insuranceType,proto3" json:"insuranceType"`
}

func (x *ReimbursementUpApplyAmount) Reset() {
	*x = ReimbursementUpApplyAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReimbursementUpApplyAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReimbursementUpApplyAmount) ProtoMessage() {}

func (x *ReimbursementUpApplyAmount) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReimbursementUpApplyAmount.ProtoReflect.Descriptor instead.
func (*ReimbursementUpApplyAmount) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{347}
}

func (x *ReimbursementUpApplyAmount) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReimbursementUpApplyAmount) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ReimbursementUpApplyAmount) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ReimbursementUpApplyAmount) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ReimbursementUpApplyAmount) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ReimbursementUpApplyAmount) GetInsuranceType() string {
	if x != nil {
		return x.InsuranceType
	}
	return ""
}

type ReimbursementUpExpectApplyAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year          int64  `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month         int64  `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	MiCode        string `protobuf:"bytes,3,opt,name=miCode,proto3" json:"miCode"`
	MibCode       string `protobuf:"bytes,4,opt,name=mibCode,proto3" json:"mibCode"`
	FixedAmount   int64  `protobuf:"varint,5,opt,name=fixedAmount,proto3" json:"fixedAmount"`
	FloatAmount   int64  `protobuf:"varint,6,opt,name=floatAmount,proto3" json:"floatAmount"`
	ManagerId     int64  `protobuf:"varint,7,opt,name=managerId,proto3" json:"managerId"`
	InsuranceType string `protobuf:"bytes,8,opt,name=insuranceType,proto3" json:"insuranceType"`
}

func (x *ReimbursementUpExpectApplyAmount) Reset() {
	*x = ReimbursementUpExpectApplyAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReimbursementUpExpectApplyAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReimbursementUpExpectApplyAmount) ProtoMessage() {}

func (x *ReimbursementUpExpectApplyAmount) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReimbursementUpExpectApplyAmount.ProtoReflect.Descriptor instead.
func (*ReimbursementUpExpectApplyAmount) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{348}
}

func (x *ReimbursementUpExpectApplyAmount) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReimbursementUpExpectApplyAmount) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ReimbursementUpExpectApplyAmount) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ReimbursementUpExpectApplyAmount) GetMibCode() string {
	if x != nil {
		return x.MibCode
	}
	return ""
}

func (x *ReimbursementUpExpectApplyAmount) GetFixedAmount() int64 {
	if x != nil {
		return x.FixedAmount
	}
	return 0
}

func (x *ReimbursementUpExpectApplyAmount) GetFloatAmount() int64 {
	if x != nil {
		return x.FloatAmount
	}
	return 0
}

func (x *ReimbursementUpExpectApplyAmount) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ReimbursementUpExpectApplyAmount) GetInsuranceType() string {
	if x != nil {
		return x.InsuranceType
	}
	return ""
}

type ReimbursementApproval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year          int64  `protobuf:"varint,1,opt,name=year,proto3" json:"year"`
	Month         int64  `protobuf:"varint,2,opt,name=month,proto3" json:"month"`
	MiCode        string `protobuf:"bytes,3,opt,name=miCode,proto3" json:"miCode"`
	ManagerId     int64  `protobuf:"varint,6,opt,name=managerId,proto3" json:"managerId"`
	InsuranceType string `protobuf:"bytes,7,opt,name=insuranceType,proto3" json:"insuranceType"`
}

func (x *ReimbursementApproval) Reset() {
	*x = ReimbursementApproval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReimbursementApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReimbursementApproval) ProtoMessage() {}

func (x *ReimbursementApproval) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReimbursementApproval.ProtoReflect.Descriptor instead.
func (*ReimbursementApproval) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{349}
}

func (x *ReimbursementApproval) GetYear() int64 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ReimbursementApproval) GetMonth() int64 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ReimbursementApproval) GetMiCode() string {
	if x != nil {
		return x.MiCode
	}
	return ""
}

func (x *ReimbursementApproval) GetManagerId() int64 {
	if x != nil {
		return x.ManagerId
	}
	return 0
}

func (x *ReimbursementApproval) GetInsuranceType() string {
	if x != nil {
		return x.InsuranceType
	}
	return ""
}

// 获取 workDay
type GetNextWorkDayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date"`
}

func (x *GetNextWorkDayReq) Reset() {
	*x = GetNextWorkDayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextWorkDayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextWorkDayReq) ProtoMessage() {}

func (x *GetNextWorkDayReq) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextWorkDayReq.ProtoReflect.Descriptor instead.
func (*GetNextWorkDayReq) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{350}
}

func (x *GetNextWorkDayReq) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type GetNextWorkDayRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date"`
}

func (x *GetNextWorkDayRsp) Reset() {
	*x = GetNextWorkDayRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ManagerService_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextWorkDayRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextWorkDayRsp) ProtoMessage() {}

func (x *GetNextWorkDayRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ManagerService_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextWorkDayRsp.ProtoReflect.Descriptor instead.
func (*GetNextWorkDayRsp) Descriptor() ([]byte, []int) {
	return file_ManagerService_proto_rawDescGZIP(), []int{351}
}

func (x *GetNextWorkDayRsp) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

var File_ManagerService_proto protoreflect.FileDescriptor

var file_ManagerService_proto_rawDesc = []byte{
	0x0a, 0x14, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x42, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x5a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x55, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x22, 0x46, 0x0a, 0x10, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69,
	0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x59, 0x0a, 0x11, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0x51, 0x0a, 0x11,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x4a, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x22, 0xa7, 0x04, 0x0a, 0x0f, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30,
	0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x69, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0xf2, 0x07, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64,
	0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4d, 0x69, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x28, 0x0a, 0x0f,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x64,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4d, 0x69, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x12, 0x55, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x04, 0x72, 0x65,
	0x71, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x04, 0x72, 0x65,
	0x71, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xba, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65,
	0x6e, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x22, 0x4b, 0x0a,
	0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x75, 0x0a, 0x11, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d,
	0x69, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x4a, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d,
	0x69, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xaa, 0x05,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x69, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4d, 0x64, 0x35, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x64, 0x35, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x16, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4d, 0x49, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x31, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4d, 0x49, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x49, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4d, 0x49, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc6,
	0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0x2f, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc7, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x46, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x46, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x32, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc6, 0x02, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65,
	0x6e, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22,
	0x7b, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x18,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x72, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x54, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5a, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d,
	0x69, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4d, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xdb, 0x01, 0x0a, 0x0f, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12,
	0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0xfe, 0x03, 0x0a, 0x0e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a,
	0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x17, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56,
	0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xeb, 0x02, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6d, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8b, 0x03, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12,
	0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x7b, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x32, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x55, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x58, 0x0a, 0x18, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x54, 0x61, 0x67, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x19, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x61, 0x67,
	0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x1c,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x5b, 0x0a, 0x1d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x88, 0x01,
	0x0a, 0x0a, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x55, 0x0a, 0x09, 0x54, 0x61, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x60, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x27, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5c, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x61, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x42, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x70, 0x0a, 0x10, 0x54, 0x61, 0x67, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x61, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x11, 0x54, 0x61,
	0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54,
	0x61, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x97, 0x02, 0x0a, 0x0b, 0x54, 0x61, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x56, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6a, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb6, 0x02, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x22,
	0x4c, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x99, 0x02,
	0x0a, 0x0d, 0x54, 0x61, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x56, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12,
	0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x22, 0xbb, 0x01, 0x0a, 0x09, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x69, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x69, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x69, 0x56, 0x6f, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x98, 0x03, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x69, 0x56, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65,
	0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65,
	0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xbd, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x49, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49,
	0x64, 0x22, 0x90, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x49, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x49, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x49,
	0x56, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c,
	0x22, 0x9c, 0x02, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x4d, 0x49,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x29, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x4d, 0x49, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xaf, 0x02, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x26, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x22,
	0x9a, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x8d, 0x01, 0x0a,
	0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x56, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0x58, 0x0a, 0x14,
	0x53, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x15, 0x53, 0x65, 0x6c, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x56, 0x6f, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xeb,
	0x02, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x56, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0x81, 0x02, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x2e, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xb9, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0x2e, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb4, 0x02, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x72, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x70, 0x50, 0x6c,
	0x61, 0x6e, 0x45, 0x72, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x70, 0x50,
	0x6c, 0x61, 0x6e, 0x45, 0x72, 0x72, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0xe7, 0x03, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x45,
	0x72, 0x72, 0x56, 0x6f, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x74, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x70, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x74, 0x70, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d,
	0x73, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x64, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x70, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x74, 0x70, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x33, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x87, 0x05, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x61, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x72, 0x61, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xa1, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x72, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x9d, 0x0a, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x72, 0x56, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x74,
	0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x70,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x65, 0x6e,
	0x64, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x65, 0x6e,
	0x64, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6e,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x69, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0xc5, 0x03, 0x0a, 0x17, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x85,
	0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x69, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd0, 0x04, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x6f, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x70, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x70, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4e, 0x75, 0x6d, 0x12,
	0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x14, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x6d, 0x0a, 0x15, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x77,
	0x61, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x77, 0x61,
	0x69, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x4e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x4e, 0x75, 0x6d, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x75,
	0x6d, 0x22, 0x94, 0x05, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x4d, 0x64, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4d, 0x64, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x75,
	0x74, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x41, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x22, 0xa4, 0x04, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0xc7, 0x03, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x65, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x15, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x16, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a,
	0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6b, 0x0a, 0x17, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x5e, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x79, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x22, 0x68, 0x0a,
	0x10, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4f,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x6e,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x54, 0x77, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x54, 0x77, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6c, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6c, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65,
	0x54, 0x77, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x54,
	0x77, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65,
	0x22, 0xe4, 0x02, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x54,
	0x77, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x54, 0x77,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x12,
	0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xdc, 0x02, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x54, 0x77, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x54, 0x77, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x54, 0x68, 0x72, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x13, 0x0a, 0x11, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x13, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x93, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xc2, 0x01, 0x0a, 0x18, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x41, 0x6c, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79, 0x41, 0x6c, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x62, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x79, 0x59, 0x65, 0x61,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x79, 0x59, 0x65, 0x61, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x79, 0x44, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x62, 0x79, 0x44, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x79, 0x4d, 0x69, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x79, 0x4d, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x43,
	0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79, 0x43, 0x6f, 0x6d, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x22,
	0xd8, 0x01, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69,
	0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x22, 0x91, 0x03, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65,
	0x6e, 0x64, 0x41, 0x74, 0x12, 0x56, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x56, 0x0a, 0x11,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xfd,
	0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x56, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0xf2,
	0x01, 0x0a, 0x0a, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x22, 0x86, 0x03, 0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf2, 0x06, 0x0a,
	0x15, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x64,
	0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d,
	0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x44, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x22, 0xe2, 0x06, 0x0a, 0x17, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x06, 0x6d, 0x69,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c,
	0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53,
	0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74,
	0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0xcb, 0x06, 0x0a, 0x16, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56,
	0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32,
	0x0a, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x06, 0x6d, 0x69, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xb0, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xae, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa3, 0x01, 0x0a, 0x19, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x41, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79, 0x41, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x79,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x79, 0x59, 0x65, 0x61, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x79, 0x59, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x79, 0x44, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79,
	0x44, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x79, 0x4d, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x62, 0x79, 0x4d, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x43, 0x6f, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79, 0x43, 0x6f, 0x6d, 0x22, 0x79, 0x0a,
	0x17, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x49, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x94, 0x03, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e,
	0x64, 0x41, 0x74, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x57, 0x0a, 0x11,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22,
	0x9b, 0x07, 0x0a, 0x16, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x06, 0x6d, 0x69, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x16, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1d, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x42, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x8b, 0x07,
	0x0a, 0x18, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a,
	0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x44, 0x0a, 0x1d, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x50, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a,
	0x1b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3e, 0x0a, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a,
	0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a,
	0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf4, 0x06, 0x0a, 0x17,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x59, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x06, 0x6d, 0x69,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36,
	0x0a, 0x16, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1d, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61,
	0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xb2, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb0, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x59, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa7, 0x01, 0x0a, 0x1d,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x79, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79,
	0x41, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x79, 0x59, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62,
	0x79, 0x59, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x44, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79, 0x44, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x79, 0x4d, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x79, 0x4d, 0x69, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x79, 0x43, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x62, 0x79, 0x43, 0x6f, 0x6d, 0x22, 0x7d, 0x0a, 0x1b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x49,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9d, 0x03, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30,
	0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74,
	0x12, 0x5b, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x5b, 0x0a,
	0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x22, 0xde, 0x05, 0x0a, 0x17, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56,
	0x6f, 0x52, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x12, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x24, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x24, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x23, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x4e, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x23, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xce, 0x05, 0x0a, 0x19, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a,
	0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x13, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61,
	0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x24, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x4e, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x24, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x23, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x23, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x4e, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0xb7, 0x05, 0x0a, 0x18, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69,
	0x62, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x56, 0x6f, 0x52, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x24, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x24, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x23, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x23, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x59, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0xb4, 0x03, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x49,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x46,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45,
	0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x45, 0x6e, 0x64, 0x22, 0x8e, 0x02, 0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x79, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79, 0x41, 0x6c,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x62, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x79, 0x59, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x79, 0x59,
	0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x44, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x62, 0x79, 0x44, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x79, 0x4d,
	0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x79, 0x4d, 0x69, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x79, 0x43, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x79,
	0x43, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x4d, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x22, 0xa1, 0x03, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12,
	0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41,
	0x74, 0x12, 0x5e, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x64, 0x12, 0x5e, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f,
	0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30,
	0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74,
	0x22, 0xd4, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d,
	0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x22, 0xae, 0x08, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69,
	0x62, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x56, 0x6f, 0x52, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x56, 0x6f, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2e, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42,
	0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3a, 0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xac, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x9e, 0x08, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x4a, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d,
	0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x06,
	0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c,
	0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f,
	0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e,
	0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb0, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x87, 0x08, 0x0a, 0x16,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x59, 0x65, 0x61, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x56, 0x6f, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4a, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56,
	0x6f, 0x52, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56,
	0x6f, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2e, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a,
	0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3a, 0x0a, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e,
	0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e,
	0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e,
	0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xf8, 0x03, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x53, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56,
	0x6f, 0x52, 0x06, 0x6d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56,
	0x6f, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x4d, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56,
	0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x53, 0x75, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x5e,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x65, 0x64,
	0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x65,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x69, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x30, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x3d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4e, 0x65, 0x65, 0x64, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x0d,
	0x6e, 0x65, 0x65, 0x64, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x65, 0x65, 0x64, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x52, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x75, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x97, 0x01,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x41, 0x74, 0x22, 0x5c, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x90, 0x01, 0x0a, 0x06, 0x4d, 0x69, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x76, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xae, 0x01, 0x0a,
	0x0c, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a,
	0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22, 0x95, 0x01,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x7a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0xae, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x9e,
	0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x4d, 0x69, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xbc, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4d, 0x69, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e,
	0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22, 0x9d,
	0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4d, 0x69, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x8e,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xa2, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x9c, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x22, 0x9c, 0x05, 0x0a, 0x10,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e,
	0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x42,
	0x0a, 0x0e, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x50, 0x0a, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x54, 0x0a, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x50, 0x0a, 0x15, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x85,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x10, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x73, 0x22, 0xc9, 0x04, 0x0a, 0x11, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x42, 0x0a, 0x0e, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x71, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x50, 0x0a, 0x15, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x54, 0x0a, 0x17,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x50, 0x0a, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xb5, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x73,
	0x22, 0x9b, 0x02, 0x0a, 0x0f, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e,
	0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e,
	0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22, 0x9f,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x97, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x73, 0x22, 0x9b, 0x03, 0x0a, 0x15, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x40, 0x0a, 0x0d, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x42, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x44, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x42, 0x61, 0x63, 0x6b, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x42, 0x61, 0x63, 0x6b,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x32,
	0x0a, 0x14, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c,
	0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22, 0x9c, 0x01, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xf2, 0x01, 0x0a, 0x22,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05,
	0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x69, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64,
	0x22, 0x86, 0x01, 0x0a, 0x1c, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e,
	0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x23, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x40, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x97, 0x02, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x69, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x22,
	0x41, 0x0a, 0x1b, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xa4, 0x02, 0x0a, 0x1b, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x49,
	0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x09,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x22, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x8b, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d,
	0x69, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69,
	0x62, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xe7, 0x01, 0x0a, 0x11, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x66, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x19, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x79, 0x65, 0x61, 0x72, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xc2, 0x01, 0x0a, 0x12, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a,
	0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x18, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x53, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e,
	0x6b, 0x43, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x88, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x50, 0x61, 0x69, 0x64, 0x59,
	0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x79, 0x65,
	0x61, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x79, 0x65, 0x61, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61,
	0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72,
	0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x80, 0x02, 0x0a, 0x0e, 0x52, 0x61, 0x6e,
	0x6b, 0x4d, 0x69, 0x50, 0x61, 0x69, 0x64, 0x59, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1d, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x50, 0x61, 0x69, 0x64, 0x59, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x50, 0x61, 0x69, 0x64, 0x59,
	0x65, 0x61, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x8a, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x59,
	0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x79, 0x65,
	0x61, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x79, 0x65, 0x61, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61,
	0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72,
	0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x52, 0x61, 0x6e,
	0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x59, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x80, 0x01,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x49, 0x42, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69,
	0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x22, 0x86, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x49, 0x42, 0x44, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x56, 0x6f, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a,
	0x03, 0x6d, 0x69, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x69, 0x56, 0x6f, 0x52, 0x03, 0x6d, 0x69, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x69, 0x6e,
	0x64, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x81, 0x01, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x56,
	0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x42, 0x69, 0x6e, 0x64, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x4a, 0x73, 0x6f, 0x6e, 0x22,
	0xa5, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x69, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6e,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x69, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x69,
	0x42, 0x69, 0x6e, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x62, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x69, 0x42, 0x69, 0x6e, 0x64,
	0x42, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x42, 0x69, 0x6e, 0x64,
	0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x42, 0x69,
	0x6e, 0x64, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0xc3, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xa0, 0x01, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x42, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0xd4, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x42, 0x69, 0x6e, 0x64, 0x56, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4a, 0x73,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x28, 0x0a, 0x0f,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x22, 0x66, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x69,
	0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x92,
	0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c,
	0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x29, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5c,
	0x0a, 0x09, 0x4d, 0x69, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x42, 0x69, 0x6e, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x79, 0x0a, 0x0b,
	0x4d, 0x69, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x69, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x69, 0x6e,
	0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x69, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x69, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x24, 0x0a, 0x0a, 0x4d, 0x69, 0x42, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x68, 0x0a,
	0x0f, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x97, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62,
	0x69, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x2a, 0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9e, 0x04,
	0x0a, 0x10, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6c,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f,
	0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65,
	0x6e, 0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x9e,
	0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x22,
	0x2b, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa1, 0x01, 0x0a,
	0x0e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0xf7, 0x03, 0x0a, 0x0b, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4d, 0x69, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x70, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x70, 0x53, 0x65,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x65,
	0x6e, 0x64, 0x44, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x65,
	0x6e, 0x64, 0x44, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x29, 0x0a, 0x0f, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa9, 0x03, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x5a, 0x43,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x7a, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x7a, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xab, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5a, 0x43, 0x52, 0x65,
	0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e,
	0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x5d, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5a, 0x43, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x69, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x0e,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5a, 0x43, 0x52, 0x65, 0x73, 0x70, 0x22, 0x0e,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5a, 0x43, 0x52, 0x65, 0x73, 0x70, 0x22, 0xa6,
	0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x5a, 0x43, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x5a, 0x43, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x77, 0x61, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x77, 0x61, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x22, 0x8c, 0x08, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74,
	0x5a, 0x43, 0x56, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x12, 0x32, 0x0a, 0x06, 0x74, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06,
	0x74, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x6e, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x10,
	0x73, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x57, 0x61, 0x72, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4d, 0x69, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x70, 0x53, 0x65, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x70, 0x53, 0x65,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x7a, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x7a, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x77, 0x0a, 0x13, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x50, 0x0a, 0x14, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e,
	0x6f, 0x22, 0x4f, 0x0a, 0x11, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x48, 0x0a, 0x12, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x98, 0x02, 0x0a,
	0x0e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x64, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe2, 0x02,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e,
	0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x4d, 0x69, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4d, 0x69, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x4d, 0x69, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x4d, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x2c, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x77, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x22, 0x2a, 0x0a, 0x10, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x7e, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x22, 0x29, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x51, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x4f, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x85, 0x05, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x64, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x4d, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4d, 0x69, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x4d, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x62, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e,
	0x64, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x0e, 0x45, 0x64, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x49, 0x64,
	0x22, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x64, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xd1, 0x02, 0x0a,
	0x19, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x22, 0xac, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x89, 0x02, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x1b, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x1c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xe1, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5a,
	0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61,
	0x6e, 0x53, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e,
	0x53, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x69, 0x64, 0x53, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x70, 0x61, 0x69, 0x64, 0x53, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x61, 0x69, 0x64, 0x44, 0x61, 0x79, 0x73, 0x53, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x69, 0x64, 0x44, 0x61, 0x79, 0x73, 0x53, 0x75, 0x6d, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x61, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x75, 0x6d, 0x22, 0xf4, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5a, 0x6f,
	0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x53, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e,
	0x53, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x53,
	0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x69, 0x64, 0x53, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70,
	0x61, 0x69, 0x64, 0x53, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x61, 0x69, 0x64, 0x44, 0x61, 0x79, 0x73, 0x53, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x70, 0x61, 0x69, 0x64, 0x44, 0x61, 0x79, 0x73, 0x53, 0x75, 0x6d, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x61, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd7, 0x02, 0x0a, 0x0f, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x61, 0x67, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x28,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d,
	0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d,
	0x69, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x8a, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x69, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x75, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53,
	0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x75, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x53, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x69, 0x64, 0x53, 0x75,
	0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x69, 0x64, 0x53, 0x75, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x61, 0x69, 0x64, 0x44, 0x61, 0x79, 0x73, 0x53, 0x75, 0x6d, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x69, 0x64, 0x44, 0x61, 0x79, 0x73, 0x53, 0x75, 0x6d,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x03, 0x0a,
	0x17, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x69, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x69, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x69, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xac, 0x04,
	0x0a, 0x16, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x69, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x69, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x69, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x69, 0x64, 0x44, 0x61, 0x79, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x69, 0x64, 0x44, 0x61, 0x79, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x65, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x28, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5f, 0x0a,
	0x0b, 0x45, 0x64, 0x69, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72,
	0x65, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x26,
	0x0a, 0x0c, 0x45, 0x64, 0x69, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x49, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x28, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x0b,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x72, 0x65, 0x61, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb2,
	0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x65, 0x61, 0x56, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65,
	0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65,
	0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x69, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x10, 0x4d, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x49,
	0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x05, 0x6d, 0x69, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0d, 0x6d, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0x87,
	0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53,
	0x79, 0x6e, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x98, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x27, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x1b,
	0x43, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x1c, 0x43, 0x6f,
	0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x96, 0x03, 0x0a,
	0x1a, 0x43, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x1a, 0x4d, 0x69, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x1b, 0x4d, 0x69, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x8b, 0x03, 0x0a, 0x19, 0x4d, 0x69,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x69, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x69, 0x6e,
	0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x28, 0x0a,
	0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x6c, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x32, 0x0a,
	0x18, 0x43, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xf8, 0x01, 0x0a, 0x16, 0x4d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d, 0x69,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6c,
	0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x6c, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x31, 0x0a, 0x17,
	0x4d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xea, 0x03, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x6d, 0x69, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x12, 0x30, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e, 0x64,
	0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x92, 0x01, 0x0a,
	0x0d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0xe7, 0x04, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x15, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x11, 0x63, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x6d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6d, 0x69, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x62, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69,
	0x6e, 0x66, 0x6f, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xb6, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x6e,
	0x66, 0x6f, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x8d, 0x01, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x67, 0x72, 0x65,
	0x65, 0x72, 0x65, 0x66, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x67, 0x72, 0x65, 0x65, 0x72, 0x65, 0x66, 0x49, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x67, 0x72, 0x65, 0x65, 0x72, 0x65, 0x66, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x67, 0x72, 0x65, 0x65, 0x72, 0x65, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x67, 0x72, 0x65, 0x65, 0x72, 0x65, 0x66, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x15,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x67, 0x72, 0x65, 0x65, 0x72, 0x65,
	0x66, 0x48, 0x61, 0x73, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x67, 0x72, 0x65, 0x65, 0x72, 0x65, 0x66, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x67,
	0x72, 0x65, 0x65, 0x72, 0x65, 0x66, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x67, 0x72,
	0x65, 0x65, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x72,
	0x65, 0x65, 0x72, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x74, 0x22, 0xab, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x67, 0x72, 0x65, 0x65, 0x72, 0x65, 0x66, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x39, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x67, 0x72, 0x65, 0x65,
	0x72, 0x65, 0x66, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x89, 0x01, 0x0a, 0x17, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6d,
	0x69, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x20,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3e, 0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x61,
	0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x66, 0x0a, 0x1e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65,
	0x61, 0x72, 0x56, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0xb2, 0x01, 0x0a, 0x1f, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x61,
	0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3d,
	0x0a, 0x02, 0x76, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x56, 0x6f, 0x52, 0x02, 0x76, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x59, 0x0a, 0x1d, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x56, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x69, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x6d, 0x69, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3e, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0xd2, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x6f, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44,
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x22, 0xd2, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x69, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x69, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x14, 0x52, 0x65,
	0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0xef, 0x04, 0x0a, 0x15, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x6d, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x6d, 0x69, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x45, 0x72,
	0x72, 0x4d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x45,
	0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x4f,
	0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61,
	0x6e, 0x6b, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x6e,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x70, 0x61, 0x79,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69,
	0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xce, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x69, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x69, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x33, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xf7, 0x01, 0x0a, 0x1d,
	0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x69, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x69, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75,
	0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x86, 0x02, 0x0a, 0x20, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x62,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x69, 0x62, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x15,
	0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x43, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x22, 0x43, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x44,
	0x61, 0x79, 0x52, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x32, 0xc2, 0x3d, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x08, 0x45, 0x64, 0x69, 0x74, 0x41, 0x72, 0x65,
	0x61, 0x12, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x45, 0x64, 0x69, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1d, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x08, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x4b, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72,
	0x65, 0x61, 0x12, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x0e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5a, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5a, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5a, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x51, 0x0a, 0x0c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x69, 0x0a, 0x14, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x69, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x4d, 0x69, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x69, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6f, 0x0a,
	0x16, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x75,
	0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x73, 0x12, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x08, 0x57, 0x61, 0x69, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x5a, 0x43, 0x52, 0x65, 0x71, 0x1a,
	0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x5a, 0x43, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0b, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1e, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x06, 0x4c,
	0x69, 0x73, 0x74, 0x5a, 0x43, 0x12, 0x19, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x5a, 0x43, 0x52, 0x65, 0x71,
	0x1a, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x5a, 0x43, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5a, 0x43,
	0x12, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5a, 0x43, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5a, 0x43, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5a, 0x43, 0x12,
	0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5a, 0x43, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5a, 0x43, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x10, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x0e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x57, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x21, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x53, 0x74, 0x6f, 0x70, 0x12, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x45, 0x64, 0x69, 0x74, 0x12, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x49, 0x12, 0x26, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4d, 0x49, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x49, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x4d, 0x49, 0x12, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x49, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4d, 0x49, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x24, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x27, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x66, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x12, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x52, 0x65, 0x71, 0x1a,
	0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4d, 0x69, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x0f, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x22, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x0e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x21,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5e, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x14, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f,
	0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x12, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x6c, 0x0a, 0x15, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x61, 0x67, 0x42, 0x79,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x28, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x54, 0x61, 0x67, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x61, 0x67, 0x42,
	0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x78, 0x0a, 0x19, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x07, 0x54, 0x61, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x1c, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x67, 0x12, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x48, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x1c,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0d, 0x54,
	0x61, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61,
	0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x61, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x60, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x25,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a,
	0x06, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x69, 0x12, 0x19, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x69, 0x52,
	0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x69, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45,
	0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x49, 0x12, 0x1b, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4d, 0x49, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d,
	0x49, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x6e, 0x65, 0x4d, 0x49, 0x12, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x4d,
	0x49, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x4d,
	0x49, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x69, 0x12, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0b,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x1e, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12,
	0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x20, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x60, 0x0a, 0x11, 0x53, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x6c,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x54, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x70, 0x50, 0x6c, 0x61, 0x6e,
	0x45, 0x72, 0x72, 0x12, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x45,
	0x72, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x70, 0x50, 0x6c, 0x61,
	0x6e, 0x45, 0x72, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6c, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x72, 0x72, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x72, 0x72, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x23, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x11, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x13, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x75, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x6f, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x6f, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x63, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x27, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x7e, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42,
	0x79, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x2e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x79, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x2f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x79, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x48, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a,
	0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x20,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x22, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x42, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x69, 0x42,
	0x69, 0x6e, 0x64, 0x12, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x69, 0x42, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x69, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3f, 0x0a, 0x06, 0x4d, 0x69, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69,
	0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x42, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x51, 0x0a, 0x0c, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69,
	0x6e, 0x64, 0x12, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79, 0x4d, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x32, 0xe0, 0x04, 0x0a, 0x0c, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x12, 0x75, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2c,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x43, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x14,
	0x43, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65,
	0x42, 0x69, 0x6e, 0x64, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x72, 0x0a, 0x17, 0x4d, 0x69, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2b,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42,
	0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x13, 0x4d,
	0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69,
	0x6e, 0x64, 0x12, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x69, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0xff, 0x0e,
	0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x75, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x79, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x77, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2e,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x59,
	0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x78,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7a, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x2f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x7b, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2f,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x7f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x7d, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x75, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x79, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x2f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x77, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5f, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x75, 0x6d, 0x12, 0x29, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x53, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x50, 0x61, 0x79, 0x12, 0x24, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x50, 0x61, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x65,
	0x64, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x75, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x2c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x32,
	0xee, 0x09, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4d,
	0x69, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x52, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x4d, 0x69, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x69, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x26, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x69, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x63, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x25, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x75, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x59, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x73, 0x70, 0x12, 0x75, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x67, 0x72, 0x65, 0x65, 0x72, 0x65,
	0x66, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x67, 0x72, 0x65, 0x65, 0x72, 0x65, 0x66, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x41, 0x67, 0x72, 0x65, 0x65, 0x72, 0x65, 0x66, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x32, 0xac, 0x09, 0x0a, 0x0b, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x7c, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x59,
	0x65, 0x61, 0x72, 0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x30, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x52, 0x61,
	0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x7a,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72,
	0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x75, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x8a, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x59, 0x65, 0x61, 0x72, 0x12, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x87,
	0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61,
	0x72, 0x12, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x59, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x59, 0x65, 0x61, 0x72,
	0x12, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x4d, 0x69, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x6c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f,
	0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x28, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x59,
	0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x43,
	0x6f, 0x6d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x50, 0x61,
	0x69, 0x64, 0x59, 0x65, 0x61, 0x72, 0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d,
	0x69, 0x50, 0x61, 0x69, 0x64, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x69, 0x50, 0x61, 0x69, 0x64, 0x59, 0x65, 0x61, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x66, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x26, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52,
	0x65, 0x71, 0x1a, 0x27, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x69, 0x6e, 0x65, 0x59, 0x65, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x72, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x4d, 0x49, 0x42, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x49, 0x42, 0x44, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x49, 0x42, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x32,
	0x8c, 0x05, 0x0a, 0x14, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0e,
	0x55, 0x70, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2b,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x1b, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x55, 0x70, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x1a, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x12, 0x58,
	0x0a, 0x0d, 0x55, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1b, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x10, 0x55, 0x70, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1b, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x13, 0x55, 0x70, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x30, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x69, 0x6d, 0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x12, 0x4e,
	0x0a, 0x08, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x25, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x69, 0x6d,
	0x62, 0x75, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x1a, 0x1b, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x32, 0x6b,
	0x0a, 0x11, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x44, 0x61, 0x79, 0x12, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x79, 0x52, 0x73, 0x70, 0x42, 0x27, 0x5a, 0x25, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x00, 0x50, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ManagerService_proto_rawDescOnce sync.Once
	file_ManagerService_proto_rawDescData = file_ManagerService_proto_rawDesc
)

func file_ManagerService_proto_rawDescGZIP() []byte {
	file_ManagerService_proto_rawDescOnce.Do(func() {
		file_ManagerService_proto_rawDescData = protoimpl.X.CompressGZIP(file_ManagerService_proto_rawDescData)
	})
	return file_ManagerService_proto_rawDescData
}

var file_ManagerService_proto_msgTypes = make([]protoimpl.MessageInfo, 352)
var file_ManagerService_proto_goTypes = []interface{}{
	(*Page)(nil),                                // 0: ManagerService.Page
	(*GetContractInfoReq)(nil),                  // 1: ManagerService.GetContractInfoReq
	(*GetContractInfoResp)(nil),                 // 2: ManagerService.GetContractInfoResp
	(*CountContractReq)(nil),                    // 3: ManagerService.CountContractReq
	(*CountContractResp)(nil),                   // 4: ManagerService.CountContractResp
	(*ContractDetailReq)(nil),                   // 5: ManagerService.ContractDetailReq
	(*ContractDetailResp)(nil),                  // 6: ManagerService.ContractDetailResp
	(*ContractDetailVo)(nil),                    // 7: ManagerService.ContractDetailVo
	(*ContractListReq)(nil),                     // 8: ManagerService.ContractListReq
	(*ContractListResp)(nil),                    // 9: ManagerService.ContractListResp
	(*ContractListVo)(nil),                      // 10: ManagerService.ContractListVo
	(*UpCheckContractReq)(nil),                  // 11: ManagerService.UpCheckContractReq
	(*CheckContractParam)(nil),                  // 12: ManagerService.CheckContractParam
	(*CheckContractListResp)(nil),               // 13: ManagerService.CheckContractListResp
	(*ContractMiListReq)(nil),                   // 14: ManagerService.ContractMiListReq
	(*ContractMiListResp)(nil),                  // 15: ManagerService.ContractMiListResp
	(*ContractMiListVo)(nil),                    // 16: ManagerService.ContractMiListVo
	(*CreateOneContractMIReq)(nil),              // 17: ManagerService.CreateOneContractMIReq
	(*CreateOneContractMIResp)(nil),             // 18: ManagerService.CreateOneContractMIResp
	(*UpdateOneContractMIReq)(nil),              // 19: ManagerService.UpdateOneContractMIReq
	(*UpdateOneContractMIResp)(nil),             // 20: ManagerService.UpdateOneContractMIResp
	(*UpdateOneContractReq)(nil),                // 21: ManagerService.UpdateOneContractReq
	(*UpdateOneContractResp)(nil),               // 22: ManagerService.UpdateOneContractResp
	(*BatchOperateContractReq)(nil),             // 23: ManagerService.BatchOperateContractReq
	(*BatchOperateContractResp)(nil),            // 24: ManagerService.BatchOperateContractResp
	(*BatchOperateContract)(nil),                // 25: ManagerService.BatchOperateContract
	(*UpdateContractActiveReq)(nil),             // 26: ManagerService.UpdateContractActiveReq
	(*UpdateContractActiveResp)(nil),            // 27: ManagerService.UpdateContractActiveResp
	(*RefreshContractReq)(nil),                  // 28: ManagerService.RefreshContractReq
	(*RefreshContractResp)(nil),                 // 29: ManagerService.RefreshContractResp
	(*DeleteOneContractReq)(nil),                // 30: ManagerService.DeleteOneContractReq
	(*DeleteOneContractResp)(nil),               // 31: ManagerService.DeleteOneContractResp
	(*DeleteOneContractMiReq)(nil),              // 32: ManagerService.DeleteOneContractMiReq
	(*DeleteOneContractMiResp)(nil),             // 33: ManagerService.DeleteOneContractMiResp
	(*MedicineListReq)(nil),                     // 34: ManagerService.MedicineListReq
	(*MedicineListResp)(nil),                    // 35: ManagerService.MedicineListResp
	(*MedicineListVo)(nil),                      // 36: ManagerService.MedicineListVo
	(*MedicineListForQueryReq)(nil),             // 37: ManagerService.MedicineListForQueryReq
	(*MedicineListForQueryResp)(nil),            // 38: ManagerService.MedicineListForQueryResp
	(*MedicineListForQueryVo)(nil),              // 39: ManagerService.MedicineListForQueryVo
	(*CreateMedicineReq)(nil),                   // 40: ManagerService.CreateMedicineReq
	(*CreateMedicineResp)(nil),                  // 41: ManagerService.CreateMedicineResp
	(*CreateBatchMedicineReq)(nil),              // 42: ManagerService.CreateBatchMedicineReq
	(*CreateBatchMedicineResp)(nil),             // 43: ManagerService.CreateBatchMedicineResp
	(*UpdateMedicineReq)(nil),                   // 44: ManagerService.UpdateMedicineReq
	(*UpdateMedicineResp)(nil),                  // 45: ManagerService.UpdateMedicineResp
	(*UpdateMedicineActiveReq)(nil),             // 46: ManagerService.UpdateMedicineActiveReq
	(*UpdateMedicineActiveResp)(nil),            // 47: ManagerService.UpdateMedicineActiveResp
	(*DeleteMedicineReq)(nil),                   // 48: ManagerService.DeleteMedicineReq
	(*DeleteMedicineResp)(nil),                  // 49: ManagerService.DeleteMedicineResp
	(*SelectTagByMedicineIdReq)(nil),            // 50: ManagerService.SelectTagByMedicineIdReq
	(*SelectTagByMedicineIdResp)(nil),           // 51: ManagerService.SelectTagByMedicineIdResp
	(*SelectInfoByMedicineNamesReq)(nil),        // 52: ManagerService.SelectInfoByMedicineNamesReq
	(*SelectInfoByMedicineNamesResp)(nil),       // 53: ManagerService.SelectInfoByMedicineNamesResp
	(*TagListReq)(nil),                          // 54: ManagerService.TagListReq
	(*TagListResp)(nil),                         // 55: ManagerService.TagListResp
	(*TagListVo)(nil),                           // 56: ManagerService.TagListVo
	(*CreateTagReq)(nil),                        // 57: ManagerService.CreateTagReq
	(*CreateTagResp)(nil),                       // 58: ManagerService.CreateTagResp
	(*UpdateTagReq)(nil),                        // 59: ManagerService.UpdateTagReq
	(*UpdateTagResp)(nil),                       // 60: ManagerService.UpdateTagResp
	(*DeleteTagReq)(nil),                        // 61: ManagerService.DeleteTagReq
	(*DeleteTagResp)(nil),                       // 62: ManagerService.DeleteTagResp
	(*TagDetailListReq)(nil),                    // 63: ManagerService.TagDetailListReq
	(*TagDetailListResp)(nil),                   // 64: ManagerService.TagDetailListResp
	(*TagDetailVo)(nil),                         // 65: ManagerService.TagDetailVo
	(*DeleteTagMedicineReq)(nil),                // 66: ManagerService.DeleteTagMedicineReq
	(*DeleteTagMedicineResp)(nil),               // 67: ManagerService.DeleteTagMedicineResp
	(*CreateTagMedicineReq)(nil),                // 68: ManagerService.CreateTagMedicineReq
	(*CreateTagMedicineResp)(nil),               // 69: ManagerService.CreateTagMedicineResp
	(*CommonMedicineQueryReq)(nil),              // 70: ManagerService.CommonMedicineQueryReq
	(*CommonMedicineQueryResp)(nil),             // 71: ManagerService.CommonMedicineQueryResp
	(*TagMedicineVo)(nil),                       // 72: ManagerService.TagMedicineVo
	(*ListMiReq)(nil),                           // 73: ManagerService.ListMiReq
	(*ListMiResp)(nil),                          // 74: ManagerService.ListMiResp
	(*ListMiVo)(nil),                            // 75: ManagerService.ListMiVo
	(*CommonMIReq)(nil),                         // 76: ManagerService.CommonMIReq
	(*CommonMIResp)(nil),                        // 77: ManagerService.CommonMIResp
	(*CommonMIVo)(nil),                          // 78: ManagerService.CommonMIVo
	(*CreateOneMIReq)(nil),                      // 79: ManagerService.CreateOneMIReq
	(*CreateOneMIResp)(nil),                     // 80: ManagerService.CreateOneMIResp
	(*UpdateMiReq)(nil),                         // 81: ManagerService.UpdateMiReq
	(*UpdateMiResp)(nil),                        // 82: ManagerService.UpdateMiResp
	(*CommonCompanyReq)(nil),                    // 83: ManagerService.CommonCompanyReq
	(*CommonCompanyResp)(nil),                   // 84: ManagerService.CommonCompanyResp
	(*CommonCompanyVo)(nil),                     // 85: ManagerService.CommonCompanyVo
	(*SelCompanyByNamesReq)(nil),                // 86: ManagerService.SelCompanyByNamesReq
	(*SelCompanyByNamesResp)(nil),               // 87: ManagerService.SelCompanyByNamesResp
	(*ListCompanyReq)(nil),                      // 88: ManagerService.ListCompanyReq
	(*ListCompanyResp)(nil),                     // 89: ManagerService.ListCompanyResp
	(*ListCompanyVo)(nil),                       // 90: ManagerService.ListCompanyVo
	(*CreateOneCompanyReq)(nil),                 // 91: ManagerService.CreateOneCompanyReq
	(*CreateOneCompanyResp)(nil),                // 92: ManagerService.CreateOneCompanyResp
	(*UpdateOneCompanyReq)(nil),                 // 93: ManagerService.UpdateOneCompanyReq
	(*UpdateOneCompanyResp)(nil),                // 94: ManagerService.UpdateOneCompanyResp
	(*ListTpPlanErrReq)(nil),                    // 95: ManagerService.ListTpPlanErrReq
	(*ListTpPlanErrResp)(nil),                   // 96: ManagerService.ListTpPlanErrResp
	(*ListTpPlanErrVo)(nil),                     // 97: ManagerService.ListTpPlanErrVo
	(*UpdateErrShipmentPlanReq)(nil),            // 98: ManagerService.UpdateErrShipmentPlanReq
	(*UpdateErrShipmentPlanResp)(nil),           // 99: ManagerService.UpdateErrShipmentPlanResp
	(*ListShipmentPlanReq)(nil),                 // 100: ManagerService.ListShipmentPlanReq
	(*ListShipmentPlanResp)(nil),                // 101: ManagerService.ListShipmentPlanResp
	(*ListShipmentPlanrVo)(nil),                 // 102: ManagerService.ListShipmentPlanrVo
	(*DetailShipmentOrderReq)(nil),              // 103: ManagerService.DetailShipmentOrderReq
	(*DetailShipmentOrderResp)(nil),             // 104: ManagerService.DetailShipmentOrderResp
	(*ListShipmentPlanForOrderReq)(nil),         // 105: ManagerService.ListShipmentPlanForOrderReq
	(*ListShipmentPlanForOrderResp)(nil),        // 106: ManagerService.ListShipmentPlanForOrderResp
	(*ListShipmentPlanForOrderVo)(nil),          // 107: ManagerService.ListShipmentPlanForOrderVo
	(*CountShipmentPlanReq)(nil),                // 108: ManagerService.CountShipmentPlanReq
	(*CountShipmentPlanResp)(nil),               // 109: ManagerService.CountShipmentPlanResp
	(*CreateShipmentOrderReq)(nil),              // 110: ManagerService.CreateShipmentOrderReq
	(*CreateShipmentOrderResp)(nil),             // 111: ManagerService.CreateShipmentOrderResp
	(*ListShipmentOrderReq)(nil),                // 112: ManagerService.ListShipmentOrderReq
	(*ListShipmentOrderResp)(nil),               // 113: ManagerService.ListShipmentOrderResp
	(*ListShipmentOrderVo)(nil),                 // 114: ManagerService.ListShipmentOrderVo
	(*CountShipmentOrderReq)(nil),               // 115: ManagerService.CountShipmentOrderReq
	(*CountShipmentOrderResp)(nil),              // 116: ManagerService.CountShipmentOrderResp
	(*ReceiveShipmentOrderReq)(nil),             // 117: ManagerService.ReceiveShipmentOrderReq
	(*ReceiveShipmentOrderResp)(nil),            // 118: ManagerService.ReceiveShipmentOrderResp
	(*GetContractByShipmentPlanIdReq)(nil),      // 119: ManagerService.GetContractByShipmentPlanIdReq
	(*GetContractByShipmentPlanIdResp)(nil),     // 120: ManagerService.GetContractByShipmentPlanIdResp
	(*InsertConfigsReq)(nil),                    // 121: ManagerService.InsertConfigsReq
	(*UpdateConfigReq)(nil),                     // 122: ManagerService.UpdateConfigReq
	(*DeleteConfigsReq)(nil),                    // 123: ManagerService.DeleteConfigsReq
	(*GetConfigReq)(nil),                        // 124: ManagerService.GetConfigReq
	(*CommonConfig)(nil),                        // 125: ManagerService.CommonConfig
	(*UpdateConfigResp)(nil),                    // 126: ManagerService.UpdateConfigResp
	(*InsertConfigsResp)(nil),                   // 127: ManagerService.InsertConfigsResp
	(*DeleteConfigsResp)(nil),                   // 128: ManagerService.DeleteConfigsResp
	(*GetConfigResp)(nil),                       // 129: ManagerService.GetConfigResp
	(*PlanReportGroupCondition)(nil),            // 130: ManagerService.PlanReportGroupCondition
	(*PlanReportGetCondition)(nil),              // 131: ManagerService.PlanReportGetCondition
	(*GetShipmentPlanReportsReq)(nil),           // 132: ManagerService.GetShipmentPlanReportsReq
	(*CompanyReportVo)(nil),                     // 133: ManagerService.CompanyReportVo
	(*MiReportVo)(nil),                          // 134: ManagerService.MiReportVo
	(*MedicineReportVo)(nil),                    // 135: ManagerService.MedicineReportVo
	(*ShipmentPlanDayReport)(nil),               // 136: ManagerService.ShipmentPlanDayReport
	(*ShipmentPlanMonthReport)(nil),             // 137: ManagerService.ShipmentPlanMonthReport
	(*ShipmentPlanYearReport)(nil),              // 138: ManagerService.ShipmentPlanYearReport
	(*GetShipmentPlanDayReportsResp)(nil),       // 139: ManagerService.GetShipmentPlanDayReportsResp
	(*GetShipmentPlanMonthReportsResp)(nil),     // 140: ManagerService.GetShipmentPlanMonthReportsResp
	(*GetShipmentPlanYearReportsResp)(nil),      // 141: ManagerService.GetShipmentPlanYearReportsResp
	(*OrderReportGroupCondition)(nil),           // 142: ManagerService.OrderReportGroupCondition
	(*OrderReportGetCondition)(nil),             // 143: ManagerService.OrderReportGetCondition
	(*GetShipmentOrderReportsReq)(nil),          // 144: ManagerService.GetShipmentOrderReportsReq
	(*ShipmentOrderDayReport)(nil),              // 145: ManagerService.ShipmentOrderDayReport
	(*ShipmentOrderMonthReport)(nil),            // 146: ManagerService.ShipmentOrderMonthReport
	(*ShipmentOrderYearReport)(nil),             // 147: ManagerService.ShipmentOrderYearReport
	(*GetShipmentOrderDayReportsResp)(nil),      // 148: ManagerService.GetShipmentOrderDayReportsResp
	(*GetShipmentOrderMonthReportsResp)(nil),    // 149: ManagerService.GetShipmentOrderMonthReportsResp
	(*GetShipmentOrderYearReportsResp)(nil),     // 150: ManagerService.GetShipmentOrderYearReportsResp
	(*FactoringReportGroupCondition)(nil),       // 151: ManagerService.FactoringReportGroupCondition
	(*FactoringReportGetCondition)(nil),         // 152: ManagerService.FactoringReportGetCondition
	(*GetFactoringOrderReportsReq)(nil),         // 153: ManagerService.GetFactoringOrderReportsReq
	(*FactoringOrderDayReport)(nil),             // 154: ManagerService.FactoringOrderDayReport
	(*GetFactoringOrderDayReportsResp)(nil),     // 155: ManagerService.GetFactoringOrderDayReportsResp
	(*FactoringOrderMonthReport)(nil),           // 156: ManagerService.FactoringOrderMonthReport
	(*GetFactoringOrderMonthReportsResp)(nil),   // 157: ManagerService.GetFactoringOrderMonthReportsResp
	(*FactoringOrderYearReport)(nil),            // 158: ManagerService.FactoringOrderYearReport
	(*GetFactoringOrderYearReportsResp)(nil),    // 159: ManagerService.GetFactoringOrderYearReportsResp
	(*ContractPlanReportGetCondition)(nil),      // 160: ManagerService.ContractPlanReportGetCondition
	(*ContractPlanReportGroupCondition)(nil),    // 161: ManagerService.ContractPlanReportGroupCondition
	(*GetContractPlanReportsReq)(nil),           // 162: ManagerService.GetContractPlanReportsReq
	(*ContractReportVo)(nil),                    // 163: ManagerService.ContractReportVo
	(*ContractMiReportVo)(nil),                  // 164: ManagerService.ContractMiReportVo
	(*ContractPlanDayReport)(nil),               // 165: ManagerService.ContractPlanDayReport
	(*GetContractPlanDayReportsResp)(nil),       // 166: ManagerService.GetContractPlanDayReportsResp
	(*ContractPlanMonthReport)(nil),             // 167: ManagerService.ContractPlanMonthReport
	(*GetContractPlanMonthReportsResp)(nil),     // 168: ManagerService.GetContractPlanMonthReportsResp
	(*ContractPlanYearReport)(nil),              // 169: ManagerService.ContractPlanYearReport
	(*GetContractPlanYearReportsResp)(nil),      // 170: ManagerService.GetContractPlanYearReportsResp
	(*ContractSum)(nil),                         // 171: ManagerService.ContractSum
	(*GetContractSumResp)(nil),                  // 172: ManagerService.GetContractSumResp
	(*GetValidContractInfoReq)(nil),             // 173: ManagerService.GetValidContractInfoReq
	(*GetCurrentNeedPayReq)(nil),                // 174: ManagerService.GetCurrentNeedPayReq
	(*GetCurrentFactoringApplyReq)(nil),         // 175: ManagerService.GetCurrentFactoringApplyReq
	(*GetValidContractInfoResp)(nil),            // 176: ManagerService.GetValidContractInfoResp
	(*GetCurrentNeedPayResp)(nil),               // 177: ManagerService.GetCurrentNeedPayResp
	(*GetCurrentFactoringApplyResp)(nil),        // 178: ManagerService.GetCurrentFactoringApplyResp
	(*GetCompanyHashReq)(nil),                   // 179: ManagerService.GetCompanyHashReq
	(*GetCompanyHashResp)(nil),                  // 180: ManagerService.GetCompanyHashResp
	(*CompanyHash)(nil),                         // 181: ManagerService.CompanyHash
	(*GetMiHashReq)(nil),                        // 182: ManagerService.GetMiHashReq
	(*MiHash)(nil),                              // 183: ManagerService.MiHash
	(*GetMiHashResp)(nil),                       // 184: ManagerService.GetMiHashResp
	(*GetMedicineReq)(nil),                      // 185: ManagerService.GetMedicineReq
	(*MedicineHash)(nil),                        // 186: ManagerService.MedicineHash
	(*GetMedicineResp)(nil),                     // 187: ManagerService.GetMedicineResp
	(*GetContractHashReq)(nil),                  // 188: ManagerService.GetContractHashReq
	(*ContractHash)(nil),                        // 189: ManagerService.ContractHash
	(*GetContractHashResp)(nil),                 // 190: ManagerService.GetContractHashResp
	(*GetContractMiHashReq)(nil),                // 191: ManagerService.GetContractMiHashReq
	(*ContractMiHash)(nil),                      // 192: ManagerService.ContractMiHash
	(*GetContractMiHashResp)(nil),               // 193: ManagerService.GetContractMiHashResp
	(*GetConfigHashReq)(nil),                    // 194: ManagerService.GetConfigHashReq
	(*ConfigHash)(nil),                          // 195: ManagerService.ConfigHash
	(*GetConfigHashResp)(nil),                   // 196: ManagerService.GetConfigHashResp
	(*GetShipmentPlanHashReq)(nil),              // 197: ManagerService.GetShipmentPlanHashReq
	(*ShipmentPlanHash)(nil),                    // 198: ManagerService.ShipmentPlanHash
	(*GetShipmentPlanHashResp)(nil),             // 199: ManagerService.GetShipmentPlanHashResp
	(*GetShipmentOrderHashReq)(nil),             // 200: ManagerService.GetShipmentOrderHashReq
	(*ShipmentOrderHash)(nil),                   // 201: ManagerService.ShipmentOrderHash
	(*GetShipmentOrderHashResp)(nil),            // 202: ManagerService.GetShipmentOrderHashResp
	(*GetShipmentPayHashReq)(nil),               // 203: ManagerService.GetShipmentPayHashReq
	(*ShipmentPayHash)(nil),                     // 204: ManagerService.ShipmentPayHash
	(*GetShipmentPayHashResp)(nil),              // 205: ManagerService.GetShipmentPayHashResp
	(*GetShipmentFactoringHashReq)(nil),         // 206: ManagerService.GetShipmentFactoringHashReq
	(*ShipmentFactoringHash)(nil),               // 207: ManagerService.ShipmentFactoringHash
	(*GetShipmentFactoringHashResp)(nil),        // 208: ManagerService.GetShipmentFactoringHashResp
	(*ListMessageHashReq)(nil),                  // 209: ManagerService.ListMessageHashReq
	(*MessageListHash)(nil),                     // 210: ManagerService.MessageListHash
	(*ListMessageHashResp)(nil),                 // 211: ManagerService.ListMessageHashResp
	(*GetShipmentRankMedicineDataYearReq)(nil),  // 212: ManagerService.GetShipmentRankMedicineDataYearReq
	(*ShipmentRankMedicineDataYear)(nil),        // 213: ManagerService.ShipmentRankMedicineDataYear
	(*GetShipmentRankMedicineDataYearResp)(nil), // 214: ManagerService.GetShipmentRankMedicineDataYearResp
	(*GetShipmentRankCompanyDataYearReq)(nil),   // 215: ManagerService.GetShipmentRankCompanyDataYearReq
	(*ShipmentRankCompanyMedicine)(nil),         // 216: ManagerService.ShipmentRankCompanyMedicine
	(*ShipmentRankCompanyDataYear)(nil),         // 217: ManagerService.ShipmentRankCompanyDataYear
	(*GetShipmentRankCompanyDataYearResp)(nil),  // 218: ManagerService.GetShipmentRankCompanyDataYearResp
	(*GetRankMiReceiveYearReq)(nil),             // 219: ManagerService.GetRankMiReceiveYearReq
	(*RankMiReceiveYear)(nil),                   // 220: ManagerService.RankMiReceiveYear
	(*GetRankMiReceiveYearResp)(nil),            // 221: ManagerService.GetRankMiReceiveYearResp
	(*GetRankComReceiveYearReq)(nil),            // 222: ManagerService.GetRankComReceiveYearReq
	(*RankComReceiveYear)(nil),                  // 223: ManagerService.RankComReceiveYear
	(*GetRankComReceiveYearResp)(nil),           // 224: ManagerService.GetRankComReceiveYearResp
	(*GetRankMiPaidYearReq)(nil),                // 225: ManagerService.GetRankMiPaidYearReq
	(*RankMiPaidYear)(nil),                      // 226: ManagerService.RankMiPaidYear
	(*GetRankMiPaidYearResp)(nil),               // 227: ManagerService.GetRankMiPaidYearResp
	(*GetRankMedicineYearReq)(nil),              // 228: ManagerService.GetRankMedicineYearReq
	(*RankMedicineYear)(nil),                    // 229: ManagerService.RankMedicineYear
	(*GetRankMedicineYearResp)(nil),             // 230: ManagerService.GetRankMedicineYearResp
	(*GetMIBDashboardBaseInfoReq)(nil),          // 231: ManagerService.GetMIBDashboardBaseInfoReq
	(*GetMIBDashboardBaseInfoResp)(nil),         // 232: ManagerService.GetMIBDashboardBaseInfoResp
	(*ListCompanyBindReq)(nil),                  // 233: ManagerService.ListCompanyBindReq
	(*ListCompanyBindResp)(nil),                 // 234: ManagerService.ListCompanyBindResp
	(*ListCompanyBindVo)(nil),                   // 235: ManagerService.ListCompanyBindVo
	(*ListMiBindReq)(nil),                       // 236: ManagerService.ListMiBindReq
	(*ListMiBindResp)(nil),                      // 237: ManagerService.ListMiBindResp
	(*ListMiBindBindVo)(nil),                    // 238: ManagerService.ListMiBindBindVo
	(*ListMedicineBindReq)(nil),                 // 239: ManagerService.ListMedicineBindReq
	(*ListMedicineBindResp)(nil),                // 240: ManagerService.ListMedicineBindResp
	(*ListMedicineBindVo)(nil),                  // 241: ManagerService.ListMedicineBindVo
	(*CompanyBindReq)(nil),                      // 242: ManagerService.CompanyBindReq
	(*CompanyBindParam)(nil),                    // 243: ManagerService.CompanyBindParam
	(*CompanyBindResp)(nil),                     // 244: ManagerService.CompanyBindResp
	(*MiBindReq)(nil),                           // 245: ManagerService.MiBindReq
	(*MiBindParam)(nil),                         // 246: ManagerService.MiBindParam
	(*MiBindResp)(nil),                          // 247: ManagerService.MiBindResp
	(*MedicineBindReq)(nil),                     // 248: ManagerService.MedicineBindReq
	(*MedicineBindParam)(nil),                   // 249: ManagerService.MedicineBindParam
	(*MedicineBindResp)(nil),                    // 250: ManagerService.MedicineBindResp
	(*ResetContractReq)(nil),                    // 251: ManagerService.ResetContractReq
	(*ResetContractParam)(nil),                  // 252: ManagerService.ResetContractParam
	(*ResetContractResp)(nil),                   // 253: ManagerService.ResetContractResp
	(*SplitToPlanReq)(nil),                      // 254: ManagerService.SplitToPlanReq
	(*SplitToPlan)(nil),                         // 255: ManagerService.SplitToPlan
	(*SplitToPlanResp)(nil),                     // 256: ManagerService.SplitToPlanResp
	(*ListZCReq)(nil),                           // 257: ManagerService.ListZCReq
	(*CreateZCReq)(nil),                         // 258: ManagerService.CreateZCReq
	(*DeleteZCReq)(nil),                         // 259: ManagerService.DeleteZCReq
	(*DeleteZCResp)(nil),                        // 260: ManagerService.DeleteZCResp
	(*CreateZCResp)(nil),                        // 261: ManagerService.CreateZCResp
	(*ListZCResp)(nil),                          // 262: ManagerService.ListZCResp
	(*ListZCVo)(nil),                            // 263: ManagerService.ListZCVo
	(*DetailSupplementReq)(nil),                 // 264: ManagerService.DetailSupplementReq
	(*DetailSupplementResp)(nil),                // 265: ManagerService.DetailSupplementResp
	(*DetailPlanListReq)(nil),                   // 266: ManagerService.DetailPlanListReq
	(*DetailPlanListResp)(nil),                  // 267: ManagerService.DetailPlanListResp
	(*DetailPlanList)(nil),                      // 268: ManagerService.DetailPlanList
	(*ContractCreateReq)(nil),                   // 269: ManagerService.ContractCreateReq
	(*ContractParam)(nil),                       // 270: ManagerService.ContractParam
	(*ContractMiParam)(nil),                     // 271: ManagerService.ContractMiParam
	(*ContractCreateResp)(nil),                  // 272: ManagerService.ContractCreateResp
	(*ReceivePlansReq)(nil),                     // 273: ManagerService.ReceivePlansReq
	(*ReceivePlans)(nil),                        // 274: ManagerService.ReceivePlans
	(*ReceivePlansResp)(nil),                    // 275: ManagerService.ReceivePlansResp
	(*RemovePlansReq)(nil),                      // 276: ManagerService.RemovePlansReq
	(*RemovePlansResp)(nil),                     // 277: ManagerService.RemovePlansResp
	(*ContractRemoveReq)(nil),                   // 278: ManagerService.ContractRemoveReq
	(*ContractRemoveResp)(nil),                  // 279: ManagerService.ContractRemoveResp
	(*ContractStopReq)(nil),                     // 280: ManagerService.ContractStopReq
	(*ContractStopResp)(nil),                    // 281: ManagerService.ContractStopResp
	(*ContractEditReq)(nil),                     // 282: ManagerService.ContractEditReq
	(*EditContractMi)(nil),                      // 283: ManagerService.EditContractMi
	(*ContractEditResp)(nil),                    // 284: ManagerService.ContractEditResp
	(*ContractProportionListReq)(nil),           // 285: ManagerService.ContractProportionListReq
	(*ContractProportionListResp)(nil),          // 286: ManagerService.ContractProportionListResp
	(*ContractProportionListVo)(nil),            // 287: ManagerService.ContractProportionListVo
	(*ContractProportionUpdateReq)(nil),         // 288: ManagerService.ContractProportionUpdateReq
	(*ContractProportionUpdateResp)(nil),        // 289: ManagerService.ContractProportionUpdateResp
	(*ReturnZoneListReq)(nil),                   // 290: ManagerService.ReturnZoneListReq
	(*ReturnZoneListResp)(nil),                  // 291: ManagerService.ReturnZoneListResp
	(*ReturnZoneListVo)(nil),                    // 292: ManagerService.ReturnZoneListVo
	(*ReturnMiListReq)(nil),                     // 293: ManagerService.ReturnMiListReq
	(*ReturnMiListResp)(nil),                    // 294: ManagerService.ReturnMiListResp
	(*ReturnMiListVo)(nil),                      // 295: ManagerService.ReturnMiListVo
	(*ReturnMiMedicineListReq)(nil),             // 296: ManagerService.ReturnMiMedicineListReq
	(*ReturnMiMedicineListResp)(nil),            // 297: ManagerService.ReturnMiMedicineListResp
	(*ReturnMiMedicineListVo)(nil),              // 298: ManagerService.ReturnMiMedicineListVo
	(*CreateAreaReq)(nil),                       // 299: ManagerService.CreateAreaReq
	(*CreateAreaResp)(nil),                      // 300: ManagerService.CreateAreaResp
	(*EditAreaReq)(nil),                         // 301: ManagerService.EditAreaReq
	(*EditAreaResp)(nil),                        // 302: ManagerService.EditAreaResp
	(*DeleteAreaReq)(nil),                       // 303: ManagerService.DeleteAreaReq
	(*DeleteAreaResp)(nil),                      // 304: ManagerService.DeleteAreaResp
	(*ListAreaReq)(nil),                         // 305: ManagerService.ListAreaReq
	(*ListAreaResp)(nil),                        // 306: ManagerService.ListAreaResp
	(*ListAreaVo)(nil),                          // 307: ManagerService.ListAreaVo
	(*MiContractIdsReq)(nil),                    // 308: ManagerService.MiContractIdsReq
	(*ListContractsResp)(nil),                   // 309: ManagerService.ListContractsResp
	(*StockSyncReq)(nil),                        // 310: ManagerService.StockSyncReq
	(*StockSyncParam)(nil),                      // 311: ManagerService.StockSyncParam
	(*StockSyncResp)(nil),                       // 312: ManagerService.StockSyncResp
	(*ComStockMedicineBindListReq)(nil),         // 313: ManagerService.ComStockMedicineBindListReq
	(*ComStockMedicineBindListResp)(nil),        // 314: ManagerService.ComStockMedicineBindListResp
	(*ComStockMedicineBindListVo)(nil),          // 315: ManagerService.ComStockMedicineBindListVo
	(*MiStockMedicineBindListReq)(nil),          // 316: ManagerService.MiStockMedicineBindListReq
	(*MiStockMedicineBindListResp)(nil),         // 317: ManagerService.MiStockMedicineBindListResp
	(*MiStockMedicineBindListVo)(nil),           // 318: ManagerService.MiStockMedicineBindListVo
	(*ComStockMedicineBindReq)(nil),             // 319: ManagerService.ComStockMedicineBindReq
	(*ComStockMedicineBindResp)(nil),            // 320: ManagerService.ComStockMedicineBindResp
	(*MiStockMedicineBindReq)(nil),              // 321: ManagerService.MiStockMedicineBindReq
	(*MiStockMedicineBindResp)(nil),             // 322: ManagerService.MiStockMedicineBindResp
	(*StockListReq)(nil),                        // 323: ManagerService.StockListReq
	(*StockListResp)(nil),                       // 324: ManagerService.StockListResp
	(*StockListVo)(nil),                         // 325: ManagerService.StockListVo
	(*GetInfoHashReq)(nil),                      // 326: ManagerService.GetInfoHashReq
	(*InfoHash)(nil),                            // 327: ManagerService.InfoHash
	(*GetInfoHashRsp)(nil),                      // 328: ManagerService.GetInfoHashRsp
	(*GetFactoringAgreerefHashReq)(nil),         // 329: ManagerService.GetFactoringAgreerefHashReq
	(*FactoringAgreerefHash)(nil),               // 330: ManagerService.FactoringAgreerefHash
	(*GetFactoringAgreerefHashResp)(nil),        // 331: ManagerService.GetFactoringAgreerefHashResp
	(*ShipmentRankDataYearReq)(nil),             // 332: ManagerService.ShipmentRankDataYearReq
	(*ShipmentMedicineRankDataYearResp)(nil),    // 333: ManagerService.ShipmentMedicineRankDataYearResp
	(*ShipmentMedicineRankDataYearVo)(nil),      // 334: ManagerService.ShipmentMedicineRankDataYearVo
	(*ShipmentCompanyRankDataYearResp)(nil),     // 335: ManagerService.ShipmentCompanyRankDataYearResp
	(*ShipmentCompanyRankDataYearVo)(nil),       // 336: ManagerService.ShipmentCompanyRankDataYearVo
	(*GetShipmentLogisticsListReq)(nil),         // 337: ManagerService.GetShipmentLogisticsListReq
	(*GetShipmentLogisticsListResp)(nil),        // 338: ManagerService.GetShipmentLogisticsListResp
	(*GetShipmentLogisticsListVo)(nil),          // 339: ManagerService.GetShipmentLogisticsListVo
	(*ReimbursementListReq)(nil),                // 340: ManagerService.ReimbursementListReq
	(*ReimbursementListRes)(nil),                // 341: ManagerService.ReimbursementListRes
	(*ReimbursementListBody)(nil),               // 342: ManagerService.ReimbursementListBody
	(*ReimbursementUpApplyFile)(nil),            // 343: ManagerService.ReimbursementUpApplyFile
	(*ReimbursementUpApprovalFile)(nil),         // 344: ManagerService.ReimbursementUpApprovalFile
	(*StandardRes)(nil),                         // 345: ManagerService.StandardRes
	(*ReimbursementUpApprovalAmount)(nil),       // 346: ManagerService.ReimbursementUpApprovalAmount
	(*ReimbursementUpApplyAmount)(nil),          // 347: ManagerService.ReimbursementUpApplyAmount
	(*ReimbursementUpExpectApplyAmount)(nil),    // 348: ManagerService.ReimbursementUpExpectApplyAmount
	(*ReimbursementApproval)(nil),               // 349: ManagerService.ReimbursementApproval
	(*GetNextWorkDayReq)(nil),                   // 350: ManagerService.GetNextWorkDayReq
	(*GetNextWorkDayRsp)(nil),                   // 351: ManagerService.GetNextWorkDayRsp
	(*timestamppb.Timestamp)(nil),               // 352: google.protobuf.Timestamp
}
var file_ManagerService_proto_depIdxs = []int32{
	7,   // 0: ManagerService.ContractDetailResp.list:type_name -> ManagerService.ContractDetailVo
	352, // 1: ManagerService.ContractListReq.StartAt:type_name -> google.protobuf.Timestamp
	352, // 2: ManagerService.ContractListReq.EndAt:type_name -> google.protobuf.Timestamp
	0,   // 3: ManagerService.ContractListReq.page:type_name -> ManagerService.Page
	10,  // 4: ManagerService.ContractListResp.list:type_name -> ManagerService.ContractListVo
	352, // 5: ManagerService.ContractListVo.startAt:type_name -> google.protobuf.Timestamp
	352, // 6: ManagerService.ContractListVo.endAt:type_name -> google.protobuf.Timestamp
	352, // 7: ManagerService.ContractListVo.createdAt:type_name -> google.protobuf.Timestamp
	12,  // 8: ManagerService.UpCheckContractReq.reqs:type_name -> ManagerService.CheckContractParam
	352, // 9: ManagerService.CheckContractParam.startAt:type_name -> google.protobuf.Timestamp
	352, // 10: ManagerService.CheckContractParam.endAt:type_name -> google.protobuf.Timestamp
	10,  // 11: ManagerService.CheckContractListResp.list:type_name -> ManagerService.ContractListVo
	16,  // 12: ManagerService.ContractMiListResp.list:type_name -> ManagerService.ContractMiListVo
	352, // 13: ManagerService.ContractMiListVo.infoUploadAt:type_name -> google.protobuf.Timestamp
	352, // 14: ManagerService.ContractMiListVo.createAt:type_name -> google.protobuf.Timestamp
	352, // 15: ManagerService.UpdateOneContractReq.startAt:type_name -> google.protobuf.Timestamp
	352, // 16: ManagerService.UpdateOneContractReq.endAt:type_name -> google.protobuf.Timestamp
	25,  // 17: ManagerService.BatchOperateContractReq.updateParam:type_name -> ManagerService.BatchOperateContract
	25,  // 18: ManagerService.BatchOperateContractReq.createParam:type_name -> ManagerService.BatchOperateContract
	352, // 19: ManagerService.BatchOperateContract.startAt:type_name -> google.protobuf.Timestamp
	352, // 20: ManagerService.BatchOperateContract.endAt:type_name -> google.protobuf.Timestamp
	0,   // 21: ManagerService.MedicineListReq.page:type_name -> ManagerService.Page
	36,  // 22: ManagerService.MedicineListResp.list:type_name -> ManagerService.MedicineListVo
	352, // 23: ManagerService.MedicineListVo.createdAt:type_name -> google.protobuf.Timestamp
	0,   // 24: ManagerService.MedicineListForQueryReq.page:type_name -> ManagerService.Page
	36,  // 25: ManagerService.MedicineListForQueryResp.list:type_name -> ManagerService.MedicineListVo
	40,  // 26: ManagerService.CreateBatchMedicineReq.list:type_name -> ManagerService.CreateMedicineReq
	39,  // 27: ManagerService.SelectInfoByMedicineNamesResp.list:type_name -> ManagerService.MedicineListForQueryVo
	0,   // 28: ManagerService.TagListReq.page:type_name -> ManagerService.Page
	56,  // 29: ManagerService.TagListResp.list:type_name -> ManagerService.TagListVo
	0,   // 30: ManagerService.TagDetailListReq.page:type_name -> ManagerService.Page
	65,  // 31: ManagerService.TagDetailListResp.list:type_name -> ManagerService.TagDetailVo
	72,  // 32: ManagerService.CommonMedicineQueryResp.list:type_name -> ManagerService.TagMedicineVo
	0,   // 33: ManagerService.ListMiReq.page:type_name -> ManagerService.Page
	75,  // 34: ManagerService.ListMiResp.list:type_name -> ManagerService.ListMiVo
	352, // 35: ManagerService.ListMiVo.createdAt:type_name -> google.protobuf.Timestamp
	0,   // 36: ManagerService.CommonMIReq.page:type_name -> ManagerService.Page
	78,  // 37: ManagerService.CommonMIResp.list:type_name -> ManagerService.CommonMIVo
	0,   // 38: ManagerService.CommonCompanyReq.page:type_name -> ManagerService.Page
	85,  // 39: ManagerService.CommonCompanyResp.list:type_name -> ManagerService.CommonCompanyVo
	85,  // 40: ManagerService.SelCompanyByNamesResp.list:type_name -> ManagerService.CommonCompanyVo
	0,   // 41: ManagerService.ListCompanyReq.page:type_name -> ManagerService.Page
	90,  // 42: ManagerService.ListCompanyResp.list:type_name -> ManagerService.ListCompanyVo
	352, // 43: ManagerService.ListCompanyVo.createdAt:type_name -> google.protobuf.Timestamp
	352, // 44: ManagerService.ListTpPlanErrReq.stratDate:type_name -> google.protobuf.Timestamp
	352, // 45: ManagerService.ListTpPlanErrReq.endDate:type_name -> google.protobuf.Timestamp
	0,   // 46: ManagerService.ListTpPlanErrReq.page:type_name -> ManagerService.Page
	97,  // 47: ManagerService.ListTpPlanErrResp.list:type_name -> ManagerService.ListTpPlanErrVo
	352, // 48: ManagerService.ListTpPlanErrVo.createdAt:type_name -> google.protobuf.Timestamp
	352, // 49: ManagerService.ListShipmentPlanReq.stratDate:type_name -> google.protobuf.Timestamp
	352, // 50: ManagerService.ListShipmentPlanReq.endDate:type_name -> google.protobuf.Timestamp
	0,   // 51: ManagerService.ListShipmentPlanReq.page:type_name -> ManagerService.Page
	102, // 52: ManagerService.ListShipmentPlanResp.list:type_name -> ManagerService.ListShipmentPlanrVo
	352, // 53: ManagerService.ListShipmentPlanrVo.tpCreatedAt:type_name -> google.protobuf.Timestamp
	352, // 54: ManagerService.ListShipmentPlanrVo.receiveAt:type_name -> google.protobuf.Timestamp
	352, // 55: ManagerService.ListShipmentPlanrVo.sendDeadline:type_name -> google.protobuf.Timestamp
	352, // 56: ManagerService.ListShipmentPlanrVo.startSendAt:type_name -> google.protobuf.Timestamp
	352, // 57: ManagerService.ListShipmentPlanrVo.receiveDeadline:type_name -> google.protobuf.Timestamp
	352, // 58: ManagerService.ListShipmentPlanrVo.createdAt:type_name -> google.protobuf.Timestamp
	107, // 59: ManagerService.ListShipmentPlanForOrderResp.list:type_name -> ManagerService.ListShipmentPlanForOrderVo
	352, // 60: ManagerService.ListShipmentPlanForOrderVo.tpCreatedAt:type_name -> google.protobuf.Timestamp
	352, // 61: ManagerService.ListShipmentPlanForOrderVo.returnTime:type_name -> google.protobuf.Timestamp
	352, // 62: ManagerService.CountShipmentPlanReq.startDate:type_name -> google.protobuf.Timestamp
	352, // 63: ManagerService.CountShipmentPlanReq.endDate:type_name -> google.protobuf.Timestamp
	352, // 64: ManagerService.CreateShipmentOrderReq.invoiceDate:type_name -> google.protobuf.Timestamp
	352, // 65: ManagerService.CreateShipmentOrderReq.sendOutAt:type_name -> google.protobuf.Timestamp
	352, // 66: ManagerService.ListShipmentOrderReq.startDate:type_name -> google.protobuf.Timestamp
	352, // 67: ManagerService.ListShipmentOrderReq.endDate:type_name -> google.protobuf.Timestamp
	0,   // 68: ManagerService.ListShipmentOrderReq.page:type_name -> ManagerService.Page
	352, // 69: ManagerService.ListShipmentOrderReq.receiveDeadline:type_name -> google.protobuf.Timestamp
	114, // 70: ManagerService.ListShipmentOrderResp.list:type_name -> ManagerService.ListShipmentOrderVo
	352, // 71: ManagerService.ListShipmentOrderVo.sendOutAt:type_name -> google.protobuf.Timestamp
	352, // 72: ManagerService.ListShipmentOrderVo.receiveDeadline:type_name -> google.protobuf.Timestamp
	352, // 73: ManagerService.CountShipmentOrderReq.startDate:type_name -> google.protobuf.Timestamp
	352, // 74: ManagerService.CountShipmentOrderReq.endDate:type_name -> google.protobuf.Timestamp
	125, // 75: ManagerService.InsertConfigsReq.configs:type_name -> ManagerService.CommonConfig
	0,   // 76: ManagerService.GetConfigReq.page:type_name -> ManagerService.Page
	352, // 77: ManagerService.GetConfigReq.startAt:type_name -> google.protobuf.Timestamp
	352, // 78: ManagerService.GetConfigReq.endAt:type_name -> google.protobuf.Timestamp
	352, // 79: ManagerService.GetConfigReq.validateTime:type_name -> google.protobuf.Timestamp
	352, // 80: ManagerService.CommonConfig.startAt:type_name -> google.protobuf.Timestamp
	352, // 81: ManagerService.CommonConfig.endAt:type_name -> google.protobuf.Timestamp
	352, // 82: ManagerService.CommonConfig.created:type_name -> google.protobuf.Timestamp
	125, // 83: ManagerService.GetConfigResp.list:type_name -> ManagerService.CommonConfig
	352, // 84: ManagerService.GetShipmentPlanReportsReq.startAt:type_name -> google.protobuf.Timestamp
	352, // 85: ManagerService.GetShipmentPlanReportsReq.endAt:type_name -> google.protobuf.Timestamp
	131, // 86: ManagerService.GetShipmentPlanReportsReq.optionalFilterCond:type_name -> ManagerService.PlanReportGetCondition
	130, // 87: ManagerService.GetShipmentPlanReportsReq.optionalGroupCond:type_name -> ManagerService.PlanReportGroupCondition
	0,   // 88: ManagerService.GetShipmentPlanReportsReq.page:type_name -> ManagerService.Page
	133, // 89: ManagerService.ShipmentPlanDayReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	134, // 90: ManagerService.ShipmentPlanDayReport.miInfo:type_name -> ManagerService.MiReportVo
	135, // 91: ManagerService.ShipmentPlanDayReport.medicineInfo:type_name -> ManagerService.MedicineReportVo
	352, // 92: ManagerService.ShipmentPlanDayReport.reportDate:type_name -> google.protobuf.Timestamp
	133, // 93: ManagerService.ShipmentPlanMonthReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	134, // 94: ManagerService.ShipmentPlanMonthReport.miInfo:type_name -> ManagerService.MiReportVo
	135, // 95: ManagerService.ShipmentPlanMonthReport.medicineInfo:type_name -> ManagerService.MedicineReportVo
	352, // 96: ManagerService.ShipmentPlanMonthReport.reportDate:type_name -> google.protobuf.Timestamp
	133, // 97: ManagerService.ShipmentPlanYearReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	134, // 98: ManagerService.ShipmentPlanYearReport.miInfo:type_name -> ManagerService.MiReportVo
	135, // 99: ManagerService.ShipmentPlanYearReport.medicineInfo:type_name -> ManagerService.MedicineReportVo
	352, // 100: ManagerService.ShipmentPlanYearReport.reportDate:type_name -> google.protobuf.Timestamp
	136, // 101: ManagerService.GetShipmentPlanDayReportsResp.list:type_name -> ManagerService.ShipmentPlanDayReport
	137, // 102: ManagerService.GetShipmentPlanMonthReportsResp.list:type_name -> ManagerService.ShipmentPlanMonthReport
	138, // 103: ManagerService.GetShipmentPlanYearReportsResp.list:type_name -> ManagerService.ShipmentPlanYearReport
	352, // 104: ManagerService.GetShipmentOrderReportsReq.startAt:type_name -> google.protobuf.Timestamp
	352, // 105: ManagerService.GetShipmentOrderReportsReq.endAt:type_name -> google.protobuf.Timestamp
	143, // 106: ManagerService.GetShipmentOrderReportsReq.optionalFilterCond:type_name -> ManagerService.OrderReportGetCondition
	142, // 107: ManagerService.GetShipmentOrderReportsReq.optionalGroupCond:type_name -> ManagerService.OrderReportGroupCondition
	0,   // 108: ManagerService.GetShipmentOrderReportsReq.page:type_name -> ManagerService.Page
	133, // 109: ManagerService.ShipmentOrderDayReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	134, // 110: ManagerService.ShipmentOrderDayReport.miInfo:type_name -> ManagerService.MiReportVo
	352, // 111: ManagerService.ShipmentOrderDayReport.reportDate:type_name -> google.protobuf.Timestamp
	352, // 112: ManagerService.ShipmentOrderMonthReport.reportDate:type_name -> google.protobuf.Timestamp
	133, // 113: ManagerService.ShipmentOrderMonthReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	134, // 114: ManagerService.ShipmentOrderMonthReport.miInfo:type_name -> ManagerService.MiReportVo
	352, // 115: ManagerService.ShipmentOrderYearReport.reportDate:type_name -> google.protobuf.Timestamp
	133, // 116: ManagerService.ShipmentOrderYearReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	134, // 117: ManagerService.ShipmentOrderYearReport.miInfo:type_name -> ManagerService.MiReportVo
	145, // 118: ManagerService.GetShipmentOrderDayReportsResp.list:type_name -> ManagerService.ShipmentOrderDayReport
	146, // 119: ManagerService.GetShipmentOrderMonthReportsResp.list:type_name -> ManagerService.ShipmentOrderMonthReport
	147, // 120: ManagerService.GetShipmentOrderYearReportsResp.list:type_name -> ManagerService.ShipmentOrderYearReport
	352, // 121: ManagerService.GetFactoringOrderReportsReq.startAt:type_name -> google.protobuf.Timestamp
	352, // 122: ManagerService.GetFactoringOrderReportsReq.endAt:type_name -> google.protobuf.Timestamp
	152, // 123: ManagerService.GetFactoringOrderReportsReq.optionalFilterCond:type_name -> ManagerService.FactoringReportGetCondition
	151, // 124: ManagerService.GetFactoringOrderReportsReq.optionalGroupCond:type_name -> ManagerService.FactoringReportGroupCondition
	0,   // 125: ManagerService.GetFactoringOrderReportsReq.page:type_name -> ManagerService.Page
	133, // 126: ManagerService.FactoringOrderDayReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	134, // 127: ManagerService.FactoringOrderDayReport.miInfo:type_name -> ManagerService.MiReportVo
	352, // 128: ManagerService.FactoringOrderDayReport.reportDate:type_name -> google.protobuf.Timestamp
	154, // 129: ManagerService.GetFactoringOrderDayReportsResp.list:type_name -> ManagerService.FactoringOrderDayReport
	133, // 130: ManagerService.FactoringOrderMonthReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	134, // 131: ManagerService.FactoringOrderMonthReport.miInfo:type_name -> ManagerService.MiReportVo
	352, // 132: ManagerService.FactoringOrderMonthReport.reportDate:type_name -> google.protobuf.Timestamp
	156, // 133: ManagerService.GetFactoringOrderMonthReportsResp.list:type_name -> ManagerService.FactoringOrderMonthReport
	352, // 134: ManagerService.FactoringOrderYearReport.reportDate:type_name -> google.protobuf.Timestamp
	133, // 135: ManagerService.FactoringOrderYearReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	134, // 136: ManagerService.FactoringOrderYearReport.miInfo:type_name -> ManagerService.MiReportVo
	158, // 137: ManagerService.GetFactoringOrderYearReportsResp.list:type_name -> ManagerService.FactoringOrderYearReport
	352, // 138: ManagerService.ContractPlanReportGetCondition.contractStartBegin:type_name -> google.protobuf.Timestamp
	352, // 139: ManagerService.ContractPlanReportGetCondition.contractStartEnd:type_name -> google.protobuf.Timestamp
	352, // 140: ManagerService.GetContractPlanReportsReq.startAt:type_name -> google.protobuf.Timestamp
	352, // 141: ManagerService.GetContractPlanReportsReq.endAt:type_name -> google.protobuf.Timestamp
	160, // 142: ManagerService.GetContractPlanReportsReq.optionalFilterCond:type_name -> ManagerService.ContractPlanReportGetCondition
	161, // 143: ManagerService.GetContractPlanReportsReq.optionalGroupCond:type_name -> ManagerService.ContractPlanReportGroupCondition
	0,   // 144: ManagerService.GetContractPlanReportsReq.page:type_name -> ManagerService.Page
	352, // 145: ManagerService.ContractReportVo.startAt:type_name -> google.protobuf.Timestamp
	352, // 146: ManagerService.ContractReportVo.endAt:type_name -> google.protobuf.Timestamp
	133, // 147: ManagerService.ContractPlanDayReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	134, // 148: ManagerService.ContractPlanDayReport.miInfo:type_name -> ManagerService.MiReportVo
	135, // 149: ManagerService.ContractPlanDayReport.medicineInfo:type_name -> ManagerService.MedicineReportVo
	352, // 150: ManagerService.ContractPlanDayReport.reportDate:type_name -> google.protobuf.Timestamp
	163, // 151: ManagerService.ContractPlanDayReport.contractInfo:type_name -> ManagerService.ContractReportVo
	164, // 152: ManagerService.ContractPlanDayReport.contractMiInfo:type_name -> ManagerService.ContractMiReportVo
	165, // 153: ManagerService.GetContractPlanDayReportsResp.list:type_name -> ManagerService.ContractPlanDayReport
	164, // 154: ManagerService.ContractPlanMonthReport.contractMiInfo:type_name -> ManagerService.ContractMiReportVo
	133, // 155: ManagerService.ContractPlanMonthReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	134, // 156: ManagerService.ContractPlanMonthReport.miInfo:type_name -> ManagerService.MiReportVo
	135, // 157: ManagerService.ContractPlanMonthReport.medicineInfo:type_name -> ManagerService.MedicineReportVo
	352, // 158: ManagerService.ContractPlanMonthReport.reportDate:type_name -> google.protobuf.Timestamp
	163, // 159: ManagerService.ContractPlanMonthReport.contractInfo:type_name -> ManagerService.ContractReportVo
	167, // 160: ManagerService.GetContractPlanMonthReportsResp.list:type_name -> ManagerService.ContractPlanMonthReport
	163, // 161: ManagerService.ContractPlanYearReport.contractInfo:type_name -> ManagerService.ContractReportVo
	164, // 162: ManagerService.ContractPlanYearReport.contractMiInfo:type_name -> ManagerService.ContractMiReportVo
	133, // 163: ManagerService.ContractPlanYearReport.companyInfo:type_name -> ManagerService.CompanyReportVo
	134, // 164: ManagerService.ContractPlanYearReport.miInfo:type_name -> ManagerService.MiReportVo
	135, // 165: ManagerService.ContractPlanYearReport.medicineInfo:type_name -> ManagerService.MedicineReportVo
	352, // 166: ManagerService.ContractPlanYearReport.reportDate:type_name -> google.protobuf.Timestamp
	169, // 167: ManagerService.GetContractPlanYearReportsResp.list:type_name -> ManagerService.ContractPlanYearReport
	133, // 168: ManagerService.ContractSum.companyInfo:type_name -> ManagerService.CompanyReportVo
	134, // 169: ManagerService.ContractSum.miInfo:type_name -> ManagerService.MiReportVo
	135, // 170: ManagerService.ContractSum.medicineInfo:type_name -> ManagerService.MedicineReportVo
	163, // 171: ManagerService.ContractSum.contractInfo:type_name -> ManagerService.ContractReportVo
	164, // 172: ManagerService.ContractSum.contractMiInfo:type_name -> ManagerService.ContractMiReportVo
	171, // 173: ManagerService.GetContractSumResp.list:type_name -> ManagerService.ContractSum
	181, // 174: ManagerService.GetCompanyHashResp.list:type_name -> ManagerService.CompanyHash
	352, // 175: ManagerService.CompanyHash.infoUploadAt:type_name -> google.protobuf.Timestamp
	352, // 176: ManagerService.MiHash.infoUploadAt:type_name -> google.protobuf.Timestamp
	183, // 177: ManagerService.GetMiHashResp.list:type_name -> ManagerService.MiHash
	352, // 178: ManagerService.MedicineHash.infoUploadAt:type_name -> google.protobuf.Timestamp
	186, // 179: ManagerService.GetMedicineResp.list:type_name -> ManagerService.MedicineHash
	352, // 180: ManagerService.ContractHash.infoUploadAt:type_name -> google.protobuf.Timestamp
	189, // 181: ManagerService.GetContractHashResp.list:type_name -> ManagerService.ContractHash
	352, // 182: ManagerService.ContractMiHash.infoUploadAt:type_name -> google.protobuf.Timestamp
	192, // 183: ManagerService.GetContractMiHashResp.list:type_name -> ManagerService.ContractMiHash
	352, // 184: ManagerService.ConfigHash.infoUploadAt:type_name -> google.protobuf.Timestamp
	195, // 185: ManagerService.GetConfigHashResp.list:type_name -> ManagerService.ConfigHash
	352, // 186: ManagerService.ShipmentPlanHash.infoUploadAt:type_name -> google.protobuf.Timestamp
	352, // 187: ManagerService.ShipmentPlanHash.qrCodeUploadAt:type_name -> google.protobuf.Timestamp
	352, // 188: ManagerService.ShipmentPlanHash.shipmentStartUploadAt:type_name -> google.protobuf.Timestamp
	352, // 189: ManagerService.ShipmentPlanHash.shipmentReceiveUploadAt:type_name -> google.protobuf.Timestamp
	352, // 190: ManagerService.ShipmentPlanHash.shipmentEnterUploadAt:type_name -> google.protobuf.Timestamp
	198, // 191: ManagerService.GetShipmentPlanHashResp.list:type_name -> ManagerService.ShipmentPlanHash
	352, // 192: ManagerService.ShipmentOrderHash.qrCodeUploadAt:type_name -> google.protobuf.Timestamp
	352, // 193: ManagerService.ShipmentOrderHash.shipmentStartUploadAt:type_name -> google.protobuf.Timestamp
	352, // 194: ManagerService.ShipmentOrderHash.shipmentReceiveUploadAt:type_name -> google.protobuf.Timestamp
	352, // 195: ManagerService.ShipmentOrderHash.shipmentEnterUploadAt:type_name -> google.protobuf.Timestamp
	201, // 196: ManagerService.GetShipmentOrderHashResp.list:type_name -> ManagerService.ShipmentOrderHash
	352, // 197: ManagerService.ShipmentPayHash.infoUploadAt:type_name -> google.protobuf.Timestamp
	352, // 198: ManagerService.ShipmentPayHash.resultUploadAt:type_name -> google.protobuf.Timestamp
	204, // 199: ManagerService.GetShipmentPayHashResp.list:type_name -> ManagerService.ShipmentPayHash
	352, // 200: ManagerService.ShipmentFactoringHash.applyUploadAt:type_name -> google.protobuf.Timestamp
	352, // 201: ManagerService.ShipmentFactoringHash.resultUploadAt:type_name -> google.protobuf.Timestamp
	352, // 202: ManagerService.ShipmentFactoringHash.payBackUploadAt:type_name -> google.protobuf.Timestamp
	207, // 203: ManagerService.GetShipmentFactoringHashResp.list:type_name -> ManagerService.ShipmentFactoringHash
	352, // 204: ManagerService.MessageListHash.infoUploadAt:type_name -> google.protobuf.Timestamp
	210, // 205: ManagerService.ListMessageHashResp.list:type_name -> ManagerService.MessageListHash
	352, // 206: ManagerService.GetShipmentRankMedicineDataYearReq.startAt:type_name -> google.protobuf.Timestamp
	352, // 207: ManagerService.GetShipmentRankMedicineDataYearReq.endAt:type_name -> google.protobuf.Timestamp
	213, // 208: ManagerService.GetShipmentRankMedicineDataYearResp.list:type_name -> ManagerService.ShipmentRankMedicineDataYear
	352, // 209: ManagerService.GetShipmentRankCompanyDataYearReq.startAt:type_name -> google.protobuf.Timestamp
	352, // 210: ManagerService.GetShipmentRankCompanyDataYearReq.endAt:type_name -> google.protobuf.Timestamp
	216, // 211: ManagerService.ShipmentRankCompanyDataYear.medicines:type_name -> ManagerService.ShipmentRankCompanyMedicine
	217, // 212: ManagerService.GetShipmentRankCompanyDataYearResp.list:type_name -> ManagerService.ShipmentRankCompanyDataYear
	146, // 213: ManagerService.RankMiReceiveYear.shipmentOrderMonthReports:type_name -> ManagerService.ShipmentOrderMonthReport
	220, // 214: ManagerService.GetRankMiReceiveYearResp.list:type_name -> ManagerService.RankMiReceiveYear
	223, // 215: ManagerService.GetRankComReceiveYearResp.list:type_name -> ManagerService.RankComReceiveYear
	226, // 216: ManagerService.GetRankMiPaidYearResp.list:type_name -> ManagerService.RankMiPaidYear
	229, // 217: ManagerService.GetRankMedicineYearResp.list:type_name -> ManagerService.RankMedicineYear
	90,  // 218: ManagerService.GetMIBDashboardBaseInfoResp.companies:type_name -> ManagerService.ListCompanyVo
	75,  // 219: ManagerService.GetMIBDashboardBaseInfoResp.mis:type_name -> ManagerService.ListMiVo
	0,   // 220: ManagerService.ListCompanyBindReq.page:type_name -> ManagerService.Page
	235, // 221: ManagerService.ListCompanyBindResp.list:type_name -> ManagerService.ListCompanyBindVo
	0,   // 222: ManagerService.ListMiBindReq.page:type_name -> ManagerService.Page
	238, // 223: ManagerService.ListMiBindResp.list:type_name -> ManagerService.ListMiBindBindVo
	0,   // 224: ManagerService.ListMedicineBindReq.page:type_name -> ManagerService.Page
	241, // 225: ManagerService.ListMedicineBindResp.list:type_name -> ManagerService.ListMedicineBindVo
	243, // 226: ManagerService.CompanyBindReq.param:type_name -> ManagerService.CompanyBindParam
	246, // 227: ManagerService.MiBindReq.param:type_name -> ManagerService.MiBindParam
	249, // 228: ManagerService.MedicineBindReq.param:type_name -> ManagerService.MedicineBindParam
	252, // 229: ManagerService.ResetContractReq.param:type_name -> ManagerService.ResetContractParam
	352, // 230: ManagerService.ResetContractReq.startAt:type_name -> google.protobuf.Timestamp
	352, // 231: ManagerService.ResetContractReq.endAt:type_name -> google.protobuf.Timestamp
	255, // 232: ManagerService.SplitToPlanReq.list:type_name -> ManagerService.SplitToPlan
	352, // 233: ManagerService.SplitToPlan.sendDeadlineWarn:type_name -> google.protobuf.Timestamp
	352, // 234: ManagerService.SplitToPlan.sendDeadLine:type_name -> google.protobuf.Timestamp
	352, // 235: ManagerService.ListZCReq.start:type_name -> google.protobuf.Timestamp
	352, // 236: ManagerService.ListZCReq.end:type_name -> google.protobuf.Timestamp
	0,   // 237: ManagerService.ListZCReq.page:type_name -> ManagerService.Page
	263, // 238: ManagerService.ListZCResp.list:type_name -> ManagerService.ListZCVo
	352, // 239: ManagerService.ListZCVo.tpTime:type_name -> google.protobuf.Timestamp
	352, // 240: ManagerService.ListZCVo.sendDeadlineWarn:type_name -> google.protobuf.Timestamp
	352, // 241: ManagerService.ListZCVo.sendDeadline:type_name -> google.protobuf.Timestamp
	268, // 242: ManagerService.DetailPlanListResp.list:type_name -> ManagerService.DetailPlanList
	352, // 243: ManagerService.DetailPlanList.createdAt:type_name -> google.protobuf.Timestamp
	270, // 244: ManagerService.ContractCreateReq.list:type_name -> ManagerService.ContractParam
	352, // 245: ManagerService.ContractParam.startAt:type_name -> google.protobuf.Timestamp
	352, // 246: ManagerService.ContractParam.endAt:type_name -> google.protobuf.Timestamp
	271, // 247: ManagerService.ContractParam.conMiList:type_name -> ManagerService.ContractMiParam
	274, // 248: ManagerService.ReceivePlansReq.list:type_name -> ManagerService.ReceivePlans
	283, // 249: ManagerService.ContractEditReq.conMiList:type_name -> ManagerService.EditContractMi
	352, // 250: ManagerService.ContractEditReq.startAt:type_name -> google.protobuf.Timestamp
	352, // 251: ManagerService.ContractEditReq.endAt:type_name -> google.protobuf.Timestamp
	352, // 252: ManagerService.ContractProportionListReq.startDate:type_name -> google.protobuf.Timestamp
	352, // 253: ManagerService.ContractProportionListReq.endDate:type_name -> google.protobuf.Timestamp
	0,   // 254: ManagerService.ContractProportionListReq.page:type_name -> ManagerService.Page
	287, // 255: ManagerService.ContractProportionListResp.list:type_name -> ManagerService.ContractProportionListVo
	352, // 256: ManagerService.ReturnZoneListReq.startDate:type_name -> google.protobuf.Timestamp
	352, // 257: ManagerService.ReturnZoneListReq.endDate:type_name -> google.protobuf.Timestamp
	0,   // 258: ManagerService.ReturnZoneListReq.page:type_name -> ManagerService.Page
	292, // 259: ManagerService.ReturnZoneListResp.list:type_name -> ManagerService.ReturnZoneListVo
	352, // 260: ManagerService.ReturnMiListReq.startDate:type_name -> google.protobuf.Timestamp
	352, // 261: ManagerService.ReturnMiListReq.endDate:type_name -> google.protobuf.Timestamp
	0,   // 262: ManagerService.ReturnMiListReq.page:type_name -> ManagerService.Page
	295, // 263: ManagerService.ReturnMiListResp.list:type_name -> ManagerService.ReturnMiListVo
	352, // 264: ManagerService.ReturnMiMedicineListReq.startDate:type_name -> google.protobuf.Timestamp
	352, // 265: ManagerService.ReturnMiMedicineListReq.endDate:type_name -> google.protobuf.Timestamp
	0,   // 266: ManagerService.ReturnMiMedicineListReq.page:type_name -> ManagerService.Page
	298, // 267: ManagerService.ReturnMiMedicineListResp.list:type_name -> ManagerService.ReturnMiMedicineListVo
	0,   // 268: ManagerService.ListAreaReq.page:type_name -> ManagerService.Page
	307, // 269: ManagerService.ListAreaResp.list:type_name -> ManagerService.ListAreaVo
	352, // 270: ManagerService.ListAreaVo.updateTime:type_name -> google.protobuf.Timestamp
	0,   // 271: ManagerService.MiContractIdsReq.page:type_name -> ManagerService.Page
	0,   // 272: ManagerService.ListContractsResp.page:type_name -> ManagerService.Page
	10,  // 273: ManagerService.ListContractsResp.list:type_name -> ManagerService.ContractListVo
	311, // 274: ManagerService.StockSyncReq.param:type_name -> ManagerService.StockSyncParam
	352, // 275: ManagerService.StockSyncParam.changeTime:type_name -> google.protobuf.Timestamp
	0,   // 276: ManagerService.ComStockMedicineBindListReq.page:type_name -> ManagerService.Page
	315, // 277: ManagerService.ComStockMedicineBindListResp.list:type_name -> ManagerService.ComStockMedicineBindListVo
	0,   // 278: ManagerService.MiStockMedicineBindListReq.page:type_name -> ManagerService.Page
	318, // 279: ManagerService.MiStockMedicineBindListResp.list:type_name -> ManagerService.MiStockMedicineBindListVo
	0,   // 280: ManagerService.StockListReq.page:type_name -> ManagerService.Page
	352, // 281: ManagerService.StockListReq.startAt:type_name -> google.protobuf.Timestamp
	352, // 282: ManagerService.StockListReq.endAt:type_name -> google.protobuf.Timestamp
	325, // 283: ManagerService.StockListResp.list:type_name -> ManagerService.StockListVo
	352, // 284: ManagerService.StockListVo.contractStartAt:type_name -> google.protobuf.Timestamp
	352, // 285: ManagerService.StockListVo.contractEndAt:type_name -> google.protobuf.Timestamp
	352, // 286: ManagerService.StockListVo.comStockUpdatedAt:type_name -> google.protobuf.Timestamp
	352, // 287: ManagerService.StockListVo.miStockUpdatedAt:type_name -> google.protobuf.Timestamp
	352, // 288: ManagerService.InfoHash.infoUploadAt:type_name -> google.protobuf.Timestamp
	327, // 289: ManagerService.GetInfoHashRsp.list:type_name -> ManagerService.InfoHash
	352, // 290: ManagerService.FactoringAgreerefHash.infoUploadAt:type_name -> google.protobuf.Timestamp
	330, // 291: ManagerService.GetFactoringAgreerefHashResp.list:type_name -> ManagerService.FactoringAgreerefHash
	0,   // 292: ManagerService.ShipmentRankDataYearReq.page:type_name -> ManagerService.Page
	334, // 293: ManagerService.ShipmentMedicineRankDataYearResp.vo:type_name -> ManagerService.ShipmentMedicineRankDataYearVo
	336, // 294: ManagerService.ShipmentCompanyRankDataYearResp.vo:type_name -> ManagerService.ShipmentCompanyRankDataYearVo
	0,   // 295: ManagerService.GetShipmentLogisticsListReq.page:type_name -> ManagerService.Page
	339, // 296: ManagerService.GetShipmentLogisticsListResp.list:type_name -> ManagerService.GetShipmentLogisticsListVo
	352, // 297: ManagerService.GetShipmentLogisticsListVo.receiveDeadline:type_name -> google.protobuf.Timestamp
	0,   // 298: ManagerService.ReimbursementListReq.page:type_name -> ManagerService.Page
	342, // 299: ManagerService.ReimbursementListRes.list:type_name -> ManagerService.ReimbursementListBody
	352, // 300: ManagerService.ReimbursementListBody.paySuccessTime:type_name -> google.protobuf.Timestamp
	352, // 301: ManagerService.GetNextWorkDayReq.date:type_name -> google.protobuf.Timestamp
	352, // 302: ManagerService.GetNextWorkDayRsp.date:type_name -> google.protobuf.Timestamp
	299, // 303: ManagerService.ManagerService.CreateArea:input_type -> ManagerService.CreateAreaReq
	301, // 304: ManagerService.ManagerService.EditArea:input_type -> ManagerService.EditAreaReq
	303, // 305: ManagerService.ManagerService.DeleteArea:input_type -> ManagerService.DeleteAreaReq
	305, // 306: ManagerService.ManagerService.ListArea:input_type -> ManagerService.ListAreaReq
	305, // 307: ManagerService.ManagerService.CommonListArea:input_type -> ManagerService.ListAreaReq
	269, // 308: ManagerService.ManagerService.ContractUpload:input_type -> ManagerService.ContractCreateReq
	290, // 309: ManagerService.ManagerService.ReturnZoneList:input_type -> ManagerService.ReturnZoneListReq
	293, // 310: ManagerService.ManagerService.ReturnMiList:input_type -> ManagerService.ReturnMiListReq
	296, // 311: ManagerService.ManagerService.ReturnMiMedicineList:input_type -> ManagerService.ReturnMiMedicineListReq
	285, // 312: ManagerService.ManagerService.ContractProportionList:input_type -> ManagerService.ContractProportionListReq
	288, // 313: ManagerService.ManagerService.ContractProportionUpdate:input_type -> ManagerService.ContractProportionUpdateReq
	276, // 314: ManagerService.ManagerService.RemovePlans:input_type -> ManagerService.RemovePlansReq
	273, // 315: ManagerService.ManagerService.ReceivePlans:input_type -> ManagerService.ReceivePlansReq
	257, // 316: ManagerService.ManagerService.WaitList:input_type -> ManagerService.ListZCReq
	254, // 317: ManagerService.ManagerService.SplitToPlan:input_type -> ManagerService.SplitToPlanReq
	257, // 318: ManagerService.ManagerService.ListZC:input_type -> ManagerService.ListZCReq
	258, // 319: ManagerService.ManagerService.CreateShipmentZC:input_type -> ManagerService.CreateZCReq
	259, // 320: ManagerService.ManagerService.DeleteShipmentZC:input_type -> ManagerService.DeleteZCReq
	264, // 321: ManagerService.ManagerService.DetailSupplement:input_type -> ManagerService.DetailSupplementReq
	266, // 322: ManagerService.ManagerService.DetailPlanList:input_type -> ManagerService.DetailPlanListReq
	269, // 323: ManagerService.ManagerService.ContractCreate:input_type -> ManagerService.ContractCreateReq
	278, // 324: ManagerService.ManagerService.ContractRemove:input_type -> ManagerService.ContractRemoveReq
	280, // 325: ManagerService.ManagerService.ContractStop:input_type -> ManagerService.ContractStopReq
	282, // 326: ManagerService.ManagerService.ContractEdit:input_type -> ManagerService.ContractEditReq
	8,   // 327: ManagerService.ManagerService.ListContract:input_type -> ManagerService.ContractListReq
	14,  // 328: ManagerService.ManagerService.ListMiContract:input_type -> ManagerService.ContractMiListReq
	17,  // 329: ManagerService.ManagerService.CreateOneContractMI:input_type -> ManagerService.CreateOneContractMIReq
	19,  // 330: ManagerService.ManagerService.UpdateOneContractMI:input_type -> ManagerService.UpdateOneContractMIReq
	21,  // 331: ManagerService.ManagerService.UpdateOneContract:input_type -> ManagerService.UpdateOneContractReq
	23,  // 332: ManagerService.ManagerService.BatchOperateContract:input_type -> ManagerService.BatchOperateContractReq
	26,  // 333: ManagerService.ManagerService.UpdateContractActive:input_type -> ManagerService.UpdateContractActiveReq
	30,  // 334: ManagerService.ManagerService.DeleteOneContract:input_type -> ManagerService.DeleteOneContractReq
	32,  // 335: ManagerService.ManagerService.DeleteOneContractMi:input_type -> ManagerService.DeleteOneContractMiReq
	1,   // 336: ManagerService.ManagerService.GetContractInfo:input_type -> ManagerService.GetContractInfoReq
	3,   // 337: ManagerService.ManagerService.CountContract:input_type -> ManagerService.CountContractReq
	28,  // 338: ManagerService.ManagerService.RefreshContract:input_type -> ManagerService.RefreshContractReq
	251, // 339: ManagerService.ManagerService.ResetContract:input_type -> ManagerService.ResetContractReq
	5,   // 340: ManagerService.ManagerService.ContractDetail:input_type -> ManagerService.ContractDetailReq
	11,  // 341: ManagerService.ManagerService.CheckContractList:input_type -> ManagerService.UpCheckContractReq
	34,  // 342: ManagerService.ManagerService.ListMedicine:input_type -> ManagerService.MedicineListReq
	37,  // 343: ManagerService.ManagerService.MedicineListForQuery:input_type -> ManagerService.MedicineListForQueryReq
	40,  // 344: ManagerService.ManagerService.CreateMedicine:input_type -> ManagerService.CreateMedicineReq
	42,  // 345: ManagerService.ManagerService.CreateBatchMedicine:input_type -> ManagerService.CreateBatchMedicineReq
	44,  // 346: ManagerService.ManagerService.UpdateMedicine:input_type -> ManagerService.UpdateMedicineReq
	46,  // 347: ManagerService.ManagerService.UpdateMedicineActive:input_type -> ManagerService.UpdateMedicineActiveReq
	48,  // 348: ManagerService.ManagerService.DeleteMedicine:input_type -> ManagerService.DeleteMedicineReq
	50,  // 349: ManagerService.ManagerService.SelectTagByMedicineId:input_type -> ManagerService.SelectTagByMedicineIdReq
	52,  // 350: ManagerService.ManagerService.SelectInfoByMedicineNames:input_type -> ManagerService.SelectInfoByMedicineNamesReq
	54,  // 351: ManagerService.ManagerService.TagList:input_type -> ManagerService.TagListReq
	57,  // 352: ManagerService.ManagerService.CreateTag:input_type -> ManagerService.CreateTagReq
	59,  // 353: ManagerService.ManagerService.UpdateTag:input_type -> ManagerService.UpdateTagReq
	61,  // 354: ManagerService.ManagerService.DeleteTag:input_type -> ManagerService.DeleteTagReq
	63,  // 355: ManagerService.ManagerService.TagDetailList:input_type -> ManagerService.TagDetailListReq
	66,  // 356: ManagerService.ManagerService.DeleteTagMedicine:input_type -> ManagerService.DeleteTagMedicineReq
	68,  // 357: ManagerService.ManagerService.CreateTagMedicine:input_type -> ManagerService.CreateTagMedicineReq
	70,  // 358: ManagerService.ManagerService.CommonMedicineQuery:input_type -> ManagerService.CommonMedicineQueryReq
	73,  // 359: ManagerService.ManagerService.ListMi:input_type -> ManagerService.ListMiReq
	76,  // 360: ManagerService.ManagerService.CommonMI:input_type -> ManagerService.CommonMIReq
	79,  // 361: ManagerService.ManagerService.CreateOneMI:input_type -> ManagerService.CreateOneMIReq
	81,  // 362: ManagerService.ManagerService.UpdateMi:input_type -> ManagerService.UpdateMiReq
	88,  // 363: ManagerService.ManagerService.ListCompany:input_type -> ManagerService.ListCompanyReq
	91,  // 364: ManagerService.ManagerService.CreateOneCompany:input_type -> ManagerService.CreateOneCompanyReq
	93,  // 365: ManagerService.ManagerService.UpdateOneCompany:input_type -> ManagerService.UpdateOneCompanyReq
	83,  // 366: ManagerService.ManagerService.CommonCompany:input_type -> ManagerService.CommonCompanyReq
	86,  // 367: ManagerService.ManagerService.SelCompanyByNames:input_type -> ManagerService.SelCompanyByNamesReq
	95,  // 368: ManagerService.ManagerService.ListTpPlanErr:input_type -> ManagerService.ListTpPlanErrReq
	98,  // 369: ManagerService.ManagerService.UpdateErrShipmentPlan:input_type -> ManagerService.UpdateErrShipmentPlanReq
	100, // 370: ManagerService.ManagerService.ListShipmentPlan:input_type -> ManagerService.ListShipmentPlanReq
	108, // 371: ManagerService.ManagerService.CountShipmentPlan:input_type -> ManagerService.CountShipmentPlanReq
	103, // 372: ManagerService.ManagerService.DetailShipmentOrder:input_type -> ManagerService.DetailShipmentOrderReq
	105, // 373: ManagerService.ManagerService.ListShipmentPlanForOrder:input_type -> ManagerService.ListShipmentPlanForOrderReq
	110, // 374: ManagerService.ManagerService.CreateShipmentOrder:input_type -> ManagerService.CreateShipmentOrderReq
	112, // 375: ManagerService.ManagerService.ListShipmentOrder:input_type -> ManagerService.ListShipmentOrderReq
	115, // 376: ManagerService.ManagerService.CountShipmentOrder:input_type -> ManagerService.CountShipmentOrderReq
	117, // 377: ManagerService.ManagerService.ReceiveShipmentOrder:input_type -> ManagerService.ReceiveShipmentOrderReq
	119, // 378: ManagerService.ManagerService.GetContractByShipmentPlanId:input_type -> ManagerService.GetContractByShipmentPlanIdReq
	124, // 379: ManagerService.ManagerService.GetConfig:input_type -> ManagerService.GetConfigReq
	122, // 380: ManagerService.ManagerService.UpdateConfig:input_type -> ManagerService.UpdateConfigReq
	121, // 381: ManagerService.ManagerService.InsertConfigs:input_type -> ManagerService.InsertConfigsReq
	123, // 382: ManagerService.ManagerService.DeleteConfigs:input_type -> ManagerService.DeleteConfigsReq
	233, // 383: ManagerService.ManagerService.ListCompanyBind:input_type -> ManagerService.ListCompanyBindReq
	242, // 384: ManagerService.ManagerService.CompanyBind:input_type -> ManagerService.CompanyBindReq
	236, // 385: ManagerService.ManagerService.ListMiBind:input_type -> ManagerService.ListMiBindReq
	245, // 386: ManagerService.ManagerService.MiBind:input_type -> ManagerService.MiBindReq
	239, // 387: ManagerService.ManagerService.ListMedicineBind:input_type -> ManagerService.ListMedicineBindReq
	248, // 388: ManagerService.ManagerService.MedicineBind:input_type -> ManagerService.MedicineBindReq
	308, // 389: ManagerService.ManagerService.ListContractsByMiContractIds:input_type -> ManagerService.MiContractIdsReq
	310, // 390: ManagerService.StockService.StockSync:input_type -> ManagerService.StockSyncReq
	313, // 391: ManagerService.StockService.ComStockMedicineBindList:input_type -> ManagerService.ComStockMedicineBindListReq
	319, // 392: ManagerService.StockService.ComStockMedicineBind:input_type -> ManagerService.ComStockMedicineBindReq
	316, // 393: ManagerService.StockService.MiStockMedicineBindList:input_type -> ManagerService.MiStockMedicineBindListReq
	321, // 394: ManagerService.StockService.MiStockMedicineBind:input_type -> ManagerService.MiStockMedicineBindReq
	323, // 395: ManagerService.StockService.StockList:input_type -> ManagerService.StockListReq
	132, // 396: ManagerService.DataReportService.GetShipmentPlanDayReports:input_type -> ManagerService.GetShipmentPlanReportsReq
	132, // 397: ManagerService.DataReportService.GetShipmentPlanMonthReports:input_type -> ManagerService.GetShipmentPlanReportsReq
	132, // 398: ManagerService.DataReportService.GetShipmentPlanYearReports:input_type -> ManagerService.GetShipmentPlanReportsReq
	144, // 399: ManagerService.DataReportService.GetShipmentOrderDayReports:input_type -> ManagerService.GetShipmentOrderReportsReq
	144, // 400: ManagerService.DataReportService.GetShipmentOrderMonthReports:input_type -> ManagerService.GetShipmentOrderReportsReq
	144, // 401: ManagerService.DataReportService.GetShipmentOrderYearReports:input_type -> ManagerService.GetShipmentOrderReportsReq
	153, // 402: ManagerService.DataReportService.GetFactoringOrderDayReports:input_type -> ManagerService.GetFactoringOrderReportsReq
	153, // 403: ManagerService.DataReportService.GetFactoringOrderMonthReports:input_type -> ManagerService.GetFactoringOrderReportsReq
	153, // 404: ManagerService.DataReportService.GetFactoringOrderYearReports:input_type -> ManagerService.GetFactoringOrderReportsReq
	162, // 405: ManagerService.DataReportService.GetContractPlanDayReports:input_type -> ManagerService.GetContractPlanReportsReq
	162, // 406: ManagerService.DataReportService.GetContractPlanMonthReports:input_type -> ManagerService.GetContractPlanReportsReq
	162, // 407: ManagerService.DataReportService.GetContractPlanYearReports:input_type -> ManagerService.GetContractPlanReportsReq
	162, // 408: ManagerService.DataReportService.GetContractSum:input_type -> ManagerService.GetContractPlanReportsReq
	173, // 409: ManagerService.DataReportService.GetValidContractInfo:input_type -> ManagerService.GetValidContractInfoReq
	174, // 410: ManagerService.DataReportService.GetCurrentNeedPay:input_type -> ManagerService.GetCurrentNeedPayReq
	175, // 411: ManagerService.DataReportService.GetCurrentFactoringApply:input_type -> ManagerService.GetCurrentFactoringApplyReq
	179, // 412: ManagerService.HashService.GetCompanyHash:input_type -> ManagerService.GetCompanyHashReq
	182, // 413: ManagerService.HashService.GetMiHash:input_type -> ManagerService.GetMiHashReq
	185, // 414: ManagerService.HashService.GetMedicineHash:input_type -> ManagerService.GetMedicineReq
	188, // 415: ManagerService.HashService.GetContractHash:input_type -> ManagerService.GetContractHashReq
	191, // 416: ManagerService.HashService.GetContractMiHash:input_type -> ManagerService.GetContractMiHashReq
	194, // 417: ManagerService.HashService.GetConfigHash:input_type -> ManagerService.GetConfigHashReq
	197, // 418: ManagerService.HashService.GetShipmentPlanHash:input_type -> ManagerService.GetShipmentPlanHashReq
	200, // 419: ManagerService.HashService.GetShipmentOrderHash:input_type -> ManagerService.GetShipmentOrderHashReq
	203, // 420: ManagerService.HashService.GetShipmentPayHash:input_type -> ManagerService.GetShipmentPayHashReq
	206, // 421: ManagerService.HashService.GetShipmentFactoringHash:input_type -> ManagerService.GetShipmentFactoringHashReq
	209, // 422: ManagerService.HashService.GetMessageHash:input_type -> ManagerService.ListMessageHashReq
	326, // 423: ManagerService.HashService.GetCommonInfoHash:input_type -> ManagerService.GetInfoHashReq
	329, // 424: ManagerService.HashService.GetFactoringAgreerefHash:input_type -> ManagerService.GetFactoringAgreerefHashReq
	332, // 425: ManagerService.RankService.GetShipmentMedicineRankDataYear:input_type -> ManagerService.ShipmentRankDataYearReq
	332, // 426: ManagerService.RankService.GetShipmentCompanyRankDataYear:input_type -> ManagerService.ShipmentRankDataYearReq
	337, // 427: ManagerService.RankService.GetShipmentLogisticsList:input_type -> ManagerService.GetShipmentLogisticsListReq
	212, // 428: ManagerService.RankService.GetShipmentRankMedicineDataYear:input_type -> ManagerService.GetShipmentRankMedicineDataYearReq
	215, // 429: ManagerService.RankService.GetShipmentRankCompanyDataYear:input_type -> ManagerService.GetShipmentRankCompanyDataYearReq
	219, // 430: ManagerService.RankService.GetRankMiReceiveYear:input_type -> ManagerService.GetRankMiReceiveYearReq
	222, // 431: ManagerService.RankService.GetRankComReceiveYear:input_type -> ManagerService.GetRankComReceiveYearReq
	225, // 432: ManagerService.RankService.GetRankMiPaidYear:input_type -> ManagerService.GetRankMiPaidYearReq
	228, // 433: ManagerService.RankService.GetRankMedicineYear:input_type -> ManagerService.GetRankMedicineYearReq
	231, // 434: ManagerService.RankService.GetMIBDashboardBaseInfo:input_type -> ManagerService.GetMIBDashboardBaseInfoReq
	340, // 435: ManagerService.ReimbursementSerivce.List:input_type -> ManagerService.ReimbursementListReq
	344, // 436: ManagerService.ReimbursementSerivce.UpApprovalFile:input_type -> ManagerService.ReimbursementUpApprovalFile
	343, // 437: ManagerService.ReimbursementSerivce.UpApplyFile:input_type -> ManagerService.ReimbursementUpApplyFile
	347, // 438: ManagerService.ReimbursementSerivce.UpApplyAmount:input_type -> ManagerService.ReimbursementUpApplyAmount
	346, // 439: ManagerService.ReimbursementSerivce.UpApprovalAmount:input_type -> ManagerService.ReimbursementUpApprovalAmount
	348, // 440: ManagerService.ReimbursementSerivce.UpExpectApplyAmount:input_type -> ManagerService.ReimbursementUpExpectApplyAmount
	349, // 441: ManagerService.ReimbursementSerivce.Approval:input_type -> ManagerService.ReimbursementApproval
	350, // 442: ManagerService.MicroToolsService.GetNextWorkDay:input_type -> ManagerService.GetNextWorkDayReq
	300, // 443: ManagerService.ManagerService.CreateArea:output_type -> ManagerService.CreateAreaResp
	302, // 444: ManagerService.ManagerService.EditArea:output_type -> ManagerService.EditAreaResp
	304, // 445: ManagerService.ManagerService.DeleteArea:output_type -> ManagerService.DeleteAreaResp
	306, // 446: ManagerService.ManagerService.ListArea:output_type -> ManagerService.ListAreaResp
	306, // 447: ManagerService.ManagerService.CommonListArea:output_type -> ManagerService.ListAreaResp
	272, // 448: ManagerService.ManagerService.ContractUpload:output_type -> ManagerService.ContractCreateResp
	291, // 449: ManagerService.ManagerService.ReturnZoneList:output_type -> ManagerService.ReturnZoneListResp
	294, // 450: ManagerService.ManagerService.ReturnMiList:output_type -> ManagerService.ReturnMiListResp
	297, // 451: ManagerService.ManagerService.ReturnMiMedicineList:output_type -> ManagerService.ReturnMiMedicineListResp
	286, // 452: ManagerService.ManagerService.ContractProportionList:output_type -> ManagerService.ContractProportionListResp
	289, // 453: ManagerService.ManagerService.ContractProportionUpdate:output_type -> ManagerService.ContractProportionUpdateResp
	277, // 454: ManagerService.ManagerService.RemovePlans:output_type -> ManagerService.RemovePlansResp
	275, // 455: ManagerService.ManagerService.ReceivePlans:output_type -> ManagerService.ReceivePlansResp
	262, // 456: ManagerService.ManagerService.WaitList:output_type -> ManagerService.ListZCResp
	256, // 457: ManagerService.ManagerService.SplitToPlan:output_type -> ManagerService.SplitToPlanResp
	262, // 458: ManagerService.ManagerService.ListZC:output_type -> ManagerService.ListZCResp
	261, // 459: ManagerService.ManagerService.CreateShipmentZC:output_type -> ManagerService.CreateZCResp
	260, // 460: ManagerService.ManagerService.DeleteShipmentZC:output_type -> ManagerService.DeleteZCResp
	265, // 461: ManagerService.ManagerService.DetailSupplement:output_type -> ManagerService.DetailSupplementResp
	267, // 462: ManagerService.ManagerService.DetailPlanList:output_type -> ManagerService.DetailPlanListResp
	272, // 463: ManagerService.ManagerService.ContractCreate:output_type -> ManagerService.ContractCreateResp
	279, // 464: ManagerService.ManagerService.ContractRemove:output_type -> ManagerService.ContractRemoveResp
	281, // 465: ManagerService.ManagerService.ContractStop:output_type -> ManagerService.ContractStopResp
	284, // 466: ManagerService.ManagerService.ContractEdit:output_type -> ManagerService.ContractEditResp
	9,   // 467: ManagerService.ManagerService.ListContract:output_type -> ManagerService.ContractListResp
	15,  // 468: ManagerService.ManagerService.ListMiContract:output_type -> ManagerService.ContractMiListResp
	18,  // 469: ManagerService.ManagerService.CreateOneContractMI:output_type -> ManagerService.CreateOneContractMIResp
	20,  // 470: ManagerService.ManagerService.UpdateOneContractMI:output_type -> ManagerService.UpdateOneContractMIResp
	22,  // 471: ManagerService.ManagerService.UpdateOneContract:output_type -> ManagerService.UpdateOneContractResp
	24,  // 472: ManagerService.ManagerService.BatchOperateContract:output_type -> ManagerService.BatchOperateContractResp
	27,  // 473: ManagerService.ManagerService.UpdateContractActive:output_type -> ManagerService.UpdateContractActiveResp
	31,  // 474: ManagerService.ManagerService.DeleteOneContract:output_type -> ManagerService.DeleteOneContractResp
	33,  // 475: ManagerService.ManagerService.DeleteOneContractMi:output_type -> ManagerService.DeleteOneContractMiResp
	2,   // 476: ManagerService.ManagerService.GetContractInfo:output_type -> ManagerService.GetContractInfoResp
	4,   // 477: ManagerService.ManagerService.CountContract:output_type -> ManagerService.CountContractResp
	29,  // 478: ManagerService.ManagerService.RefreshContract:output_type -> ManagerService.RefreshContractResp
	253, // 479: ManagerService.ManagerService.ResetContract:output_type -> ManagerService.ResetContractResp
	6,   // 480: ManagerService.ManagerService.ContractDetail:output_type -> ManagerService.ContractDetailResp
	13,  // 481: ManagerService.ManagerService.CheckContractList:output_type -> ManagerService.CheckContractListResp
	35,  // 482: ManagerService.ManagerService.ListMedicine:output_type -> ManagerService.MedicineListResp
	38,  // 483: ManagerService.ManagerService.MedicineListForQuery:output_type -> ManagerService.MedicineListForQueryResp
	41,  // 484: ManagerService.ManagerService.CreateMedicine:output_type -> ManagerService.CreateMedicineResp
	43,  // 485: ManagerService.ManagerService.CreateBatchMedicine:output_type -> ManagerService.CreateBatchMedicineResp
	45,  // 486: ManagerService.ManagerService.UpdateMedicine:output_type -> ManagerService.UpdateMedicineResp
	47,  // 487: ManagerService.ManagerService.UpdateMedicineActive:output_type -> ManagerService.UpdateMedicineActiveResp
	49,  // 488: ManagerService.ManagerService.DeleteMedicine:output_type -> ManagerService.DeleteMedicineResp
	51,  // 489: ManagerService.ManagerService.SelectTagByMedicineId:output_type -> ManagerService.SelectTagByMedicineIdResp
	53,  // 490: ManagerService.ManagerService.SelectInfoByMedicineNames:output_type -> ManagerService.SelectInfoByMedicineNamesResp
	55,  // 491: ManagerService.ManagerService.TagList:output_type -> ManagerService.TagListResp
	58,  // 492: ManagerService.ManagerService.CreateTag:output_type -> ManagerService.CreateTagResp
	60,  // 493: ManagerService.ManagerService.UpdateTag:output_type -> ManagerService.UpdateTagResp
	62,  // 494: ManagerService.ManagerService.DeleteTag:output_type -> ManagerService.DeleteTagResp
	64,  // 495: ManagerService.ManagerService.TagDetailList:output_type -> ManagerService.TagDetailListResp
	67,  // 496: ManagerService.ManagerService.DeleteTagMedicine:output_type -> ManagerService.DeleteTagMedicineResp
	69,  // 497: ManagerService.ManagerService.CreateTagMedicine:output_type -> ManagerService.CreateTagMedicineResp
	71,  // 498: ManagerService.ManagerService.CommonMedicineQuery:output_type -> ManagerService.CommonMedicineQueryResp
	74,  // 499: ManagerService.ManagerService.ListMi:output_type -> ManagerService.ListMiResp
	77,  // 500: ManagerService.ManagerService.CommonMI:output_type -> ManagerService.CommonMIResp
	80,  // 501: ManagerService.ManagerService.CreateOneMI:output_type -> ManagerService.CreateOneMIResp
	82,  // 502: ManagerService.ManagerService.UpdateMi:output_type -> ManagerService.UpdateMiResp
	89,  // 503: ManagerService.ManagerService.ListCompany:output_type -> ManagerService.ListCompanyResp
	92,  // 504: ManagerService.ManagerService.CreateOneCompany:output_type -> ManagerService.CreateOneCompanyResp
	94,  // 505: ManagerService.ManagerService.UpdateOneCompany:output_type -> ManagerService.UpdateOneCompanyResp
	84,  // 506: ManagerService.ManagerService.CommonCompany:output_type -> ManagerService.CommonCompanyResp
	87,  // 507: ManagerService.ManagerService.SelCompanyByNames:output_type -> ManagerService.SelCompanyByNamesResp
	96,  // 508: ManagerService.ManagerService.ListTpPlanErr:output_type -> ManagerService.ListTpPlanErrResp
	99,  // 509: ManagerService.ManagerService.UpdateErrShipmentPlan:output_type -> ManagerService.UpdateErrShipmentPlanResp
	101, // 510: ManagerService.ManagerService.ListShipmentPlan:output_type -> ManagerService.ListShipmentPlanResp
	109, // 511: ManagerService.ManagerService.CountShipmentPlan:output_type -> ManagerService.CountShipmentPlanResp
	104, // 512: ManagerService.ManagerService.DetailShipmentOrder:output_type -> ManagerService.DetailShipmentOrderResp
	106, // 513: ManagerService.ManagerService.ListShipmentPlanForOrder:output_type -> ManagerService.ListShipmentPlanForOrderResp
	111, // 514: ManagerService.ManagerService.CreateShipmentOrder:output_type -> ManagerService.CreateShipmentOrderResp
	113, // 515: ManagerService.ManagerService.ListShipmentOrder:output_type -> ManagerService.ListShipmentOrderResp
	116, // 516: ManagerService.ManagerService.CountShipmentOrder:output_type -> ManagerService.CountShipmentOrderResp
	118, // 517: ManagerService.ManagerService.ReceiveShipmentOrder:output_type -> ManagerService.ReceiveShipmentOrderResp
	120, // 518: ManagerService.ManagerService.GetContractByShipmentPlanId:output_type -> ManagerService.GetContractByShipmentPlanIdResp
	129, // 519: ManagerService.ManagerService.GetConfig:output_type -> ManagerService.GetConfigResp
	126, // 520: ManagerService.ManagerService.UpdateConfig:output_type -> ManagerService.UpdateConfigResp
	127, // 521: ManagerService.ManagerService.InsertConfigs:output_type -> ManagerService.InsertConfigsResp
	128, // 522: ManagerService.ManagerService.DeleteConfigs:output_type -> ManagerService.DeleteConfigsResp
	234, // 523: ManagerService.ManagerService.ListCompanyBind:output_type -> ManagerService.ListCompanyBindResp
	244, // 524: ManagerService.ManagerService.CompanyBind:output_type -> ManagerService.CompanyBindResp
	237, // 525: ManagerService.ManagerService.ListMiBind:output_type -> ManagerService.ListMiBindResp
	247, // 526: ManagerService.ManagerService.MiBind:output_type -> ManagerService.MiBindResp
	240, // 527: ManagerService.ManagerService.ListMedicineBind:output_type -> ManagerService.ListMedicineBindResp
	250, // 528: ManagerService.ManagerService.MedicineBind:output_type -> ManagerService.MedicineBindResp
	309, // 529: ManagerService.ManagerService.ListContractsByMiContractIds:output_type -> ManagerService.ListContractsResp
	312, // 530: ManagerService.StockService.StockSync:output_type -> ManagerService.StockSyncResp
	314, // 531: ManagerService.StockService.ComStockMedicineBindList:output_type -> ManagerService.ComStockMedicineBindListResp
	320, // 532: ManagerService.StockService.ComStockMedicineBind:output_type -> ManagerService.ComStockMedicineBindResp
	317, // 533: ManagerService.StockService.MiStockMedicineBindList:output_type -> ManagerService.MiStockMedicineBindListResp
	322, // 534: ManagerService.StockService.MiStockMedicineBind:output_type -> ManagerService.MiStockMedicineBindResp
	324, // 535: ManagerService.StockService.StockList:output_type -> ManagerService.StockListResp
	139, // 536: ManagerService.DataReportService.GetShipmentPlanDayReports:output_type -> ManagerService.GetShipmentPlanDayReportsResp
	140, // 537: ManagerService.DataReportService.GetShipmentPlanMonthReports:output_type -> ManagerService.GetShipmentPlanMonthReportsResp
	141, // 538: ManagerService.DataReportService.GetShipmentPlanYearReports:output_type -> ManagerService.GetShipmentPlanYearReportsResp
	148, // 539: ManagerService.DataReportService.GetShipmentOrderDayReports:output_type -> ManagerService.GetShipmentOrderDayReportsResp
	149, // 540: ManagerService.DataReportService.GetShipmentOrderMonthReports:output_type -> ManagerService.GetShipmentOrderMonthReportsResp
	150, // 541: ManagerService.DataReportService.GetShipmentOrderYearReports:output_type -> ManagerService.GetShipmentOrderYearReportsResp
	155, // 542: ManagerService.DataReportService.GetFactoringOrderDayReports:output_type -> ManagerService.GetFactoringOrderDayReportsResp
	157, // 543: ManagerService.DataReportService.GetFactoringOrderMonthReports:output_type -> ManagerService.GetFactoringOrderMonthReportsResp
	159, // 544: ManagerService.DataReportService.GetFactoringOrderYearReports:output_type -> ManagerService.GetFactoringOrderYearReportsResp
	166, // 545: ManagerService.DataReportService.GetContractPlanDayReports:output_type -> ManagerService.GetContractPlanDayReportsResp
	168, // 546: ManagerService.DataReportService.GetContractPlanMonthReports:output_type -> ManagerService.GetContractPlanMonthReportsResp
	170, // 547: ManagerService.DataReportService.GetContractPlanYearReports:output_type -> ManagerService.GetContractPlanYearReportsResp
	172, // 548: ManagerService.DataReportService.GetContractSum:output_type -> ManagerService.GetContractSumResp
	176, // 549: ManagerService.DataReportService.GetValidContractInfo:output_type -> ManagerService.GetValidContractInfoResp
	177, // 550: ManagerService.DataReportService.GetCurrentNeedPay:output_type -> ManagerService.GetCurrentNeedPayResp
	178, // 551: ManagerService.DataReportService.GetCurrentFactoringApply:output_type -> ManagerService.GetCurrentFactoringApplyResp
	180, // 552: ManagerService.HashService.GetCompanyHash:output_type -> ManagerService.GetCompanyHashResp
	184, // 553: ManagerService.HashService.GetMiHash:output_type -> ManagerService.GetMiHashResp
	187, // 554: ManagerService.HashService.GetMedicineHash:output_type -> ManagerService.GetMedicineResp
	190, // 555: ManagerService.HashService.GetContractHash:output_type -> ManagerService.GetContractHashResp
	193, // 556: ManagerService.HashService.GetContractMiHash:output_type -> ManagerService.GetContractMiHashResp
	196, // 557: ManagerService.HashService.GetConfigHash:output_type -> ManagerService.GetConfigHashResp
	199, // 558: ManagerService.HashService.GetShipmentPlanHash:output_type -> ManagerService.GetShipmentPlanHashResp
	202, // 559: ManagerService.HashService.GetShipmentOrderHash:output_type -> ManagerService.GetShipmentOrderHashResp
	205, // 560: ManagerService.HashService.GetShipmentPayHash:output_type -> ManagerService.GetShipmentPayHashResp
	208, // 561: ManagerService.HashService.GetShipmentFactoringHash:output_type -> ManagerService.GetShipmentFactoringHashResp
	211, // 562: ManagerService.HashService.GetMessageHash:output_type -> ManagerService.ListMessageHashResp
	328, // 563: ManagerService.HashService.GetCommonInfoHash:output_type -> ManagerService.GetInfoHashRsp
	331, // 564: ManagerService.HashService.GetFactoringAgreerefHash:output_type -> ManagerService.GetFactoringAgreerefHashResp
	333, // 565: ManagerService.RankService.GetShipmentMedicineRankDataYear:output_type -> ManagerService.ShipmentMedicineRankDataYearResp
	335, // 566: ManagerService.RankService.GetShipmentCompanyRankDataYear:output_type -> ManagerService.ShipmentCompanyRankDataYearResp
	338, // 567: ManagerService.RankService.GetShipmentLogisticsList:output_type -> ManagerService.GetShipmentLogisticsListResp
	214, // 568: ManagerService.RankService.GetShipmentRankMedicineDataYear:output_type -> ManagerService.GetShipmentRankMedicineDataYearResp
	218, // 569: ManagerService.RankService.GetShipmentRankCompanyDataYear:output_type -> ManagerService.GetShipmentRankCompanyDataYearResp
	221, // 570: ManagerService.RankService.GetRankMiReceiveYear:output_type -> ManagerService.GetRankMiReceiveYearResp
	224, // 571: ManagerService.RankService.GetRankComReceiveYear:output_type -> ManagerService.GetRankComReceiveYearResp
	227, // 572: ManagerService.RankService.GetRankMiPaidYear:output_type -> ManagerService.GetRankMiPaidYearResp
	230, // 573: ManagerService.RankService.GetRankMedicineYear:output_type -> ManagerService.GetRankMedicineYearResp
	232, // 574: ManagerService.RankService.GetMIBDashboardBaseInfo:output_type -> ManagerService.GetMIBDashboardBaseInfoResp
	341, // 575: ManagerService.ReimbursementSerivce.List:output_type -> ManagerService.ReimbursementListRes
	345, // 576: ManagerService.ReimbursementSerivce.UpApprovalFile:output_type -> ManagerService.StandardRes
	345, // 577: ManagerService.ReimbursementSerivce.UpApplyFile:output_type -> ManagerService.StandardRes
	345, // 578: ManagerService.ReimbursementSerivce.UpApplyAmount:output_type -> ManagerService.StandardRes
	345, // 579: ManagerService.ReimbursementSerivce.UpApprovalAmount:output_type -> ManagerService.StandardRes
	345, // 580: ManagerService.ReimbursementSerivce.UpExpectApplyAmount:output_type -> ManagerService.StandardRes
	345, // 581: ManagerService.ReimbursementSerivce.Approval:output_type -> ManagerService.StandardRes
	351, // 582: ManagerService.MicroToolsService.GetNextWorkDay:output_type -> ManagerService.GetNextWorkDayRsp
	443, // [443:583] is the sub-list for method output_type
	303, // [303:443] is the sub-list for method input_type
	303, // [303:303] is the sub-list for extension type_name
	303, // [303:303] is the sub-list for extension extendee
	0,   // [0:303] is the sub-list for field type_name
}

func init() { file_ManagerService_proto_init() }
func file_ManagerService_proto_init() {
	if File_ManagerService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ManagerService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountContractReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountContractResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractDetailResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractDetailVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpCheckContractReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckContractParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckContractListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractMiListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractMiListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractMiListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneContractMIReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneContractMIResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOneContractMIReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOneContractMIResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOneContractReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOneContractResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchOperateContractReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchOperateContractResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchOperateContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContractActiveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContractActiveResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshContractReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshContractResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOneContractReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOneContractResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOneContractMiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOneContractMiResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineListForQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineListForQueryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineListForQueryVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMedicineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMedicineResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBatchMedicineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBatchMedicineResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMedicineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMedicineResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMedicineActiveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMedicineActiveResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMedicineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMedicineResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectTagByMedicineIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectTagByMedicineIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectInfoByMedicineNamesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectInfoByMedicineNamesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTagReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTagResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTagReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTagResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagDetailListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagDetailListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagDetailVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagMedicineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTagMedicineResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTagMedicineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTagMedicineResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonMedicineQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonMedicineQueryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagMedicineVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMiResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMiVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonMIReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonMIResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonMIVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneMIReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneMIResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMiResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonCompanyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonCompanyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonCompanyVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelCompanyByNamesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelCompanyByNamesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompanyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompanyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompanyVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneCompanyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOneCompanyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOneCompanyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOneCompanyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTpPlanErrReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTpPlanErrResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTpPlanErrVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateErrShipmentPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateErrShipmentPlanResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShipmentPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShipmentPlanResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShipmentPlanrVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailShipmentOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailShipmentOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShipmentPlanForOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShipmentPlanForOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShipmentPlanForOrderVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountShipmentPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountShipmentPlanResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateShipmentOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateShipmentOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShipmentOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShipmentOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListShipmentOrderVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountShipmentOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountShipmentOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveShipmentOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveShipmentOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractByShipmentPlanIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractByShipmentPlanIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertConfigsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConfigsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertConfigsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConfigsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanReportGroupCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanReportGetCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentPlanReportsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyReportVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiReportVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineReportVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentPlanDayReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentPlanMonthReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentPlanYearReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentPlanDayReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentPlanMonthReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentPlanYearReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderReportGroupCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderReportGetCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentOrderReportsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentOrderDayReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentOrderMonthReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentOrderYearReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentOrderDayReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentOrderMonthReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentOrderYearReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactoringReportGroupCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactoringReportGetCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFactoringOrderReportsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactoringOrderDayReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFactoringOrderDayReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactoringOrderMonthReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFactoringOrderMonthReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactoringOrderYearReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFactoringOrderYearReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractPlanReportGetCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractPlanReportGroupCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractPlanReportsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractReportVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractMiReportVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractPlanDayReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractPlanDayReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractPlanMonthReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractPlanMonthReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractPlanYearReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractPlanYearReportsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractSum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractSumResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidContractInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentNeedPayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentFactoringApplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetValidContractInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentNeedPayResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentFactoringApplyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMiHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMiHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMedicineReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMedicineResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractMiHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractMiHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractMiHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentPlanHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentPlanHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentPlanHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentOrderHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentOrderHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentOrderHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentPayHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentPayHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentPayHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentFactoringHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentFactoringHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentFactoringHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMessageHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageListHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMessageHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentRankMedicineDataYearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentRankMedicineDataYear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentRankMedicineDataYearResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentRankCompanyDataYearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentRankCompanyMedicine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentRankCompanyDataYear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentRankCompanyDataYearResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankMiReceiveYearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankMiReceiveYear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankMiReceiveYearResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankComReceiveYearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankComReceiveYear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankComReceiveYearResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankMiPaidYearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankMiPaidYear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankMiPaidYearResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankMedicineYearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankMedicineYear); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankMedicineYearResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMIBDashboardBaseInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMIBDashboardBaseInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompanyBindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompanyBindResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompanyBindVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMiBindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMiBindResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMiBindBindVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMedicineBindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMedicineBindResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMedicineBindVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyBindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyBindParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyBindResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiBindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiBindParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiBindResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineBindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineBindParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicineBindResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetContractReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetContractParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetContractResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitToPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitToPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitToPlanResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListZCReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateZCReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteZCReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteZCResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateZCResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListZCResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListZCVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailSupplementReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailSupplementResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailPlanListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailPlanListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailPlanList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractMiParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractCreateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivePlansReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivePlans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivePlansResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePlansReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePlansResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractRemoveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractRemoveResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractStopReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractStopResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractEditReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditContractMi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractEditResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractProportionListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractProportionListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractProportionListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractProportionUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractProportionUpdateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnZoneListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnZoneListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnZoneListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnMiListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnMiListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnMiListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnMiMedicineListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnMiMedicineListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnMiMedicineListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAreaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAreaResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditAreaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditAreaResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAreaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAreaResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAreaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAreaResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAreaVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiContractIdsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContractsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockSyncReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockSyncParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockSyncResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComStockMedicineBindListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComStockMedicineBindListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComStockMedicineBindListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiStockMedicineBindListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiStockMedicineBindListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiStockMedicineBindListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComStockMedicineBindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComStockMedicineBindResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiStockMedicineBindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiStockMedicineBindResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoHashRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFactoringAgreerefHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactoringAgreerefHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFactoringAgreerefHashResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentRankDataYearReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentMedicineRankDataYearResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentMedicineRankDataYearVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentCompanyRankDataYearResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipmentCompanyRankDataYearVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentLogisticsListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentLogisticsListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShipmentLogisticsListVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReimbursementListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReimbursementListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReimbursementListBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReimbursementUpApplyFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReimbursementUpApprovalFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandardRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReimbursementUpApprovalAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReimbursementUpApplyAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReimbursementUpExpectApplyAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReimbursementApproval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextWorkDayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ManagerService_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextWorkDayRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ManagerService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   352,
			NumExtensions: 0,
			NumServices:   7,
		},
		GoTypes:           file_ManagerService_proto_goTypes,
		DependencyIndexes: file_ManagerService_proto_depIdxs,
		MessageInfos:      file_ManagerService_proto_msgTypes,
	}.Build()
	File_ManagerService_proto = out.File
	file_ManagerService_proto_rawDesc = nil
	file_ManagerService_proto_goTypes = nil
	file_ManagerService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ManagerServiceClient is the client API for ManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ManagerServiceClient interface {
	//区域创建
	CreateArea(ctx context.Context, in *CreateAreaReq, opts ...grpc.CallOption) (*CreateAreaResp, error)
	//区域编辑
	EditArea(ctx context.Context, in *EditAreaReq, opts ...grpc.CallOption) (*EditAreaResp, error)
	//区域删除
	DeleteArea(ctx context.Context, in *DeleteAreaReq, opts ...grpc.CallOption) (*DeleteAreaResp, error)
	//区域列表
	ListArea(ctx context.Context, in *ListAreaReq, opts ...grpc.CallOption) (*ListAreaResp, error)
	//通用区域列表
	CommonListArea(ctx context.Context, in *ListAreaReq, opts ...grpc.CallOption) (*ListAreaResp, error)
	//上传合同 鹰潭  20211109
	ContractUpload(ctx context.Context, in *ContractCreateReq, opts ...grpc.CallOption) (*ContractCreateResp, error)
	// 20211103 濮阳三期  新增 回款情况 报表
	ReturnZoneList(ctx context.Context, in *ReturnZoneListReq, opts ...grpc.CallOption) (*ReturnZoneListResp, error)
	ReturnMiList(ctx context.Context, in *ReturnMiListReq, opts ...grpc.CallOption) (*ReturnMiListResp, error)
	ReturnMiMedicineList(ctx context.Context, in *ReturnMiMedicineListReq, opts ...grpc.CallOption) (*ReturnMiMedicineListResp, error)
	// 20211027 鹰潭新增  合同药品国家规则
	// 合同药品国家规则 列表
	ContractProportionList(ctx context.Context, in *ContractProportionListReq, opts ...grpc.CallOption) (*ContractProportionListResp, error)
	// 合同药品国家规则 更新
	ContractProportionUpdate(ctx context.Context, in *ContractProportionUpdateReq, opts ...grpc.CallOption) (*ContractProportionUpdateResp, error)
	// 删除订单
	RemovePlans(ctx context.Context, in *RemovePlansReq, opts ...grpc.CallOption) (*RemovePlansResp, error)
	// 接单
	ReceivePlans(ctx context.Context, in *ReceivePlansReq, opts ...grpc.CallOption) (*ReceivePlansResp, error)
	// 待接单列表
	WaitList(ctx context.Context, in *ListZCReq, opts ...grpc.CallOption) (*ListZCResp, error)
	// 拆单
	SplitToPlan(ctx context.Context, in *SplitToPlanReq, opts ...grpc.CallOption) (*SplitToPlanResp, error)
	//招采单列表
	ListZC(ctx context.Context, in *ListZCReq, opts ...grpc.CallOption) (*ListZCResp, error)
	//平台创建招采单逻辑
	CreateShipmentZC(ctx context.Context, in *CreateZCReq, opts ...grpc.CallOption) (*CreateZCResp, error)
	//删除未拆单且未过期的招采单
	DeleteShipmentZC(ctx context.Context, in *DeleteZCReq, opts ...grpc.CallOption) (*DeleteZCResp, error)
	// 招采详情补充
	DetailSupplement(ctx context.Context, in *DetailSupplementReq, opts ...grpc.CallOption) (*DetailSupplementResp, error)
	//鹰潭 招采详情 订单列表
	DetailPlanList(ctx context.Context, in *DetailPlanListReq, opts ...grpc.CallOption) (*DetailPlanListResp, error)
	//合同相关
	//新建合同
	ContractCreate(ctx context.Context, in *ContractCreateReq, opts ...grpc.CallOption) (*ContractCreateResp, error)
	// 删除合同
	ContractRemove(ctx context.Context, in *ContractRemoveReq, opts ...grpc.CallOption) (*ContractRemoveResp, error)
	// 停用合同
	ContractStop(ctx context.Context, in *ContractStopReq, opts ...grpc.CallOption) (*ContractStopResp, error)
	// 编辑合同
	ContractEdit(ctx context.Context, in *ContractEditReq, opts ...grpc.CallOption) (*ContractEditResp, error)
	ListContract(ctx context.Context, in *ContractListReq, opts ...grpc.CallOption) (*ContractListResp, error)
	ListMiContract(ctx context.Context, in *ContractMiListReq, opts ...grpc.CallOption) (*ContractMiListResp, error)
	CreateOneContractMI(ctx context.Context, in *CreateOneContractMIReq, opts ...grpc.CallOption) (*CreateOneContractMIResp, error)
	UpdateOneContractMI(ctx context.Context, in *UpdateOneContractMIReq, opts ...grpc.CallOption) (*UpdateOneContractMIResp, error)
	UpdateOneContract(ctx context.Context, in *UpdateOneContractReq, opts ...grpc.CallOption) (*UpdateOneContractResp, error)
	BatchOperateContract(ctx context.Context, in *BatchOperateContractReq, opts ...grpc.CallOption) (*BatchOperateContractResp, error)
	UpdateContractActive(ctx context.Context, in *UpdateContractActiveReq, opts ...grpc.CallOption) (*UpdateContractActiveResp, error)
	DeleteOneContract(ctx context.Context, in *DeleteOneContractReq, opts ...grpc.CallOption) (*DeleteOneContractResp, error)
	DeleteOneContractMi(ctx context.Context, in *DeleteOneContractMiReq, opts ...grpc.CallOption) (*DeleteOneContractMiResp, error)
	GetContractInfo(ctx context.Context, in *GetContractInfoReq, opts ...grpc.CallOption) (*GetContractInfoResp, error)
	CountContract(ctx context.Context, in *CountContractReq, opts ...grpc.CallOption) (*CountContractResp, error)
	RefreshContract(ctx context.Context, in *RefreshContractReq, opts ...grpc.CallOption) (*RefreshContractResp, error)
	//合同重置
	ResetContract(ctx context.Context, in *ResetContractReq, opts ...grpc.CallOption) (*ResetContractResp, error)
	//暂未使用
	ContractDetail(ctx context.Context, in *ContractDetailReq, opts ...grpc.CallOption) (*ContractDetailResp, error)
	CheckContractList(ctx context.Context, in *UpCheckContractReq, opts ...grpc.CallOption) (*CheckContractListResp, error)
	//药品相关
	ListMedicine(ctx context.Context, in *MedicineListReq, opts ...grpc.CallOption) (*MedicineListResp, error)
	MedicineListForQuery(ctx context.Context, in *MedicineListForQueryReq, opts ...grpc.CallOption) (*MedicineListForQueryResp, error)
	CreateMedicine(ctx context.Context, in *CreateMedicineReq, opts ...grpc.CallOption) (*CreateMedicineResp, error)
	CreateBatchMedicine(ctx context.Context, in *CreateBatchMedicineReq, opts ...grpc.CallOption) (*CreateBatchMedicineResp, error)
	UpdateMedicine(ctx context.Context, in *UpdateMedicineReq, opts ...grpc.CallOption) (*UpdateMedicineResp, error)
	UpdateMedicineActive(ctx context.Context, in *UpdateMedicineActiveReq, opts ...grpc.CallOption) (*UpdateMedicineActiveResp, error)
	DeleteMedicine(ctx context.Context, in *DeleteMedicineReq, opts ...grpc.CallOption) (*DeleteMedicineResp, error)
	SelectTagByMedicineId(ctx context.Context, in *SelectTagByMedicineIdReq, opts ...grpc.CallOption) (*SelectTagByMedicineIdResp, error)
	SelectInfoByMedicineNames(ctx context.Context, in *SelectInfoByMedicineNamesReq, opts ...grpc.CallOption) (*SelectInfoByMedicineNamesResp, error)
	//药品标签相关
	TagList(ctx context.Context, in *TagListReq, opts ...grpc.CallOption) (*TagListResp, error)
	CreateTag(ctx context.Context, in *CreateTagReq, opts ...grpc.CallOption) (*CreateTagResp, error)
	UpdateTag(ctx context.Context, in *UpdateTagReq, opts ...grpc.CallOption) (*UpdateTagResp, error)
	DeleteTag(ctx context.Context, in *DeleteTagReq, opts ...grpc.CallOption) (*DeleteTagResp, error)
	TagDetailList(ctx context.Context, in *TagDetailListReq, opts ...grpc.CallOption) (*TagDetailListResp, error)
	DeleteTagMedicine(ctx context.Context, in *DeleteTagMedicineReq, opts ...grpc.CallOption) (*DeleteTagMedicineResp, error)
	CreateTagMedicine(ctx context.Context, in *CreateTagMedicineReq, opts ...grpc.CallOption) (*CreateTagMedicineResp, error)
	CommonMedicineQuery(ctx context.Context, in *CommonMedicineQueryReq, opts ...grpc.CallOption) (*CommonMedicineQueryResp, error)
	//医疗机构相关
	ListMi(ctx context.Context, in *ListMiReq, opts ...grpc.CallOption) (*ListMiResp, error)
	CommonMI(ctx context.Context, in *CommonMIReq, opts ...grpc.CallOption) (*CommonMIResp, error)
	CreateOneMI(ctx context.Context, in *CreateOneMIReq, opts ...grpc.CallOption) (*CreateOneMIResp, error)
	UpdateMi(ctx context.Context, in *UpdateMiReq, opts ...grpc.CallOption) (*UpdateMiResp, error)
	//配送企业相关
	ListCompany(ctx context.Context, in *ListCompanyReq, opts ...grpc.CallOption) (*ListCompanyResp, error)
	CreateOneCompany(ctx context.Context, in *CreateOneCompanyReq, opts ...grpc.CallOption) (*CreateOneCompanyResp, error)
	UpdateOneCompany(ctx context.Context, in *UpdateOneCompanyReq, opts ...grpc.CallOption) (*UpdateOneCompanyResp, error)
	CommonCompany(ctx context.Context, in *CommonCompanyReq, opts ...grpc.CallOption) (*CommonCompanyResp, error)
	SelCompanyByNames(ctx context.Context, in *SelCompanyByNamesReq, opts ...grpc.CallOption) (*SelCompanyByNamesResp, error)
	//招采异常订单相关
	ListTpPlanErr(ctx context.Context, in *ListTpPlanErrReq, opts ...grpc.CallOption) (*ListTpPlanErrResp, error)
	UpdateErrShipmentPlan(ctx context.Context, in *UpdateErrShipmentPlanReq, opts ...grpc.CallOption) (*UpdateErrShipmentPlanResp, error)
	//招采单(配送)相关
	ListShipmentPlan(ctx context.Context, in *ListShipmentPlanReq, opts ...grpc.CallOption) (*ListShipmentPlanResp, error)
	CountShipmentPlan(ctx context.Context, in *CountShipmentPlanReq, opts ...grpc.CallOption) (*CountShipmentPlanResp, error)
	//配送单详情
	DetailShipmentOrder(ctx context.Context, in *DetailShipmentOrderReq, opts ...grpc.CallOption) (*DetailShipmentOrderResp, error)
	ListShipmentPlanForOrder(ctx context.Context, in *ListShipmentPlanForOrderReq, opts ...grpc.CallOption) (*ListShipmentPlanForOrderResp, error)
	//配送单创建
	CreateShipmentOrder(ctx context.Context, in *CreateShipmentOrderReq, opts ...grpc.CallOption) (*CreateShipmentOrderResp, error)
	//配送单列表
	ListShipmentOrder(ctx context.Context, in *ListShipmentOrderReq, opts ...grpc.CallOption) (*ListShipmentOrderResp, error)
	//配送单表头汇总
	CountShipmentOrder(ctx context.Context, in *CountShipmentOrderReq, opts ...grpc.CallOption) (*CountShipmentOrderResp, error)
	//配送单收获
	ReceiveShipmentOrder(ctx context.Context, in *ReceiveShipmentOrderReq, opts ...grpc.CallOption) (*ReceiveShipmentOrderResp, error)
	//根据招采单(配送计划)id查询合同编号
	GetContractByShipmentPlanId(ctx context.Context, in *GetContractByShipmentPlanIdReq, opts ...grpc.CallOption) (*GetContractByShipmentPlanIdResp, error)
	//通用配置查询
	GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigResp, error)
	//修改配置
	UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*UpdateConfigResp, error)
	//批量插入配置
	InsertConfigs(ctx context.Context, in *InsertConfigsReq, opts ...grpc.CallOption) (*InsertConfigsResp, error)
	//删除配置
	DeleteConfigs(ctx context.Context, in *DeleteConfigsReq, opts ...grpc.CallOption) (*DeleteConfigsResp, error)
	//配送企业绑定
	ListCompanyBind(ctx context.Context, in *ListCompanyBindReq, opts ...grpc.CallOption) (*ListCompanyBindResp, error)
	CompanyBind(ctx context.Context, in *CompanyBindReq, opts ...grpc.CallOption) (*CompanyBindResp, error)
	//医疗机构绑定
	ListMiBind(ctx context.Context, in *ListMiBindReq, opts ...grpc.CallOption) (*ListMiBindResp, error)
	MiBind(ctx context.Context, in *MiBindReq, opts ...grpc.CallOption) (*MiBindResp, error)
	//药品绑定绑定
	ListMedicineBind(ctx context.Context, in *ListMedicineBindReq, opts ...grpc.CallOption) (*ListMedicineBindResp, error)
	MedicineBind(ctx context.Context, in *MedicineBindReq, opts ...grpc.CallOption) (*MedicineBindResp, error)
	// 由 contractMiId 列表 获取 主合同列表
	ListContractsByMiContractIds(ctx context.Context, in *MiContractIdsReq, opts ...grpc.CallOption) (*ListContractsResp, error)
}

type managerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerServiceClient(cc grpc.ClientConnInterface) ManagerServiceClient {
	return &managerServiceClient{cc}
}

func (c *managerServiceClient) CreateArea(ctx context.Context, in *CreateAreaReq, opts ...grpc.CallOption) (*CreateAreaResp, error) {
	out := new(CreateAreaResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) EditArea(ctx context.Context, in *EditAreaReq, opts ...grpc.CallOption) (*EditAreaResp, error) {
	out := new(EditAreaResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/EditArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteArea(ctx context.Context, in *DeleteAreaReq, opts ...grpc.CallOption) (*DeleteAreaResp, error) {
	out := new(DeleteAreaResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListArea(ctx context.Context, in *ListAreaReq, opts ...grpc.CallOption) (*ListAreaResp, error) {
	out := new(ListAreaResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonListArea(ctx context.Context, in *ListAreaReq, opts ...grpc.CallOption) (*ListAreaResp, error) {
	out := new(ListAreaResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonListArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ContractUpload(ctx context.Context, in *ContractCreateReq, opts ...grpc.CallOption) (*ContractCreateResp, error) {
	out := new(ContractCreateResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ContractUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ReturnZoneList(ctx context.Context, in *ReturnZoneListReq, opts ...grpc.CallOption) (*ReturnZoneListResp, error) {
	out := new(ReturnZoneListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ReturnZoneList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ReturnMiList(ctx context.Context, in *ReturnMiListReq, opts ...grpc.CallOption) (*ReturnMiListResp, error) {
	out := new(ReturnMiListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ReturnMiList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ReturnMiMedicineList(ctx context.Context, in *ReturnMiMedicineListReq, opts ...grpc.CallOption) (*ReturnMiMedicineListResp, error) {
	out := new(ReturnMiMedicineListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ReturnMiMedicineList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ContractProportionList(ctx context.Context, in *ContractProportionListReq, opts ...grpc.CallOption) (*ContractProportionListResp, error) {
	out := new(ContractProportionListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ContractProportionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ContractProportionUpdate(ctx context.Context, in *ContractProportionUpdateReq, opts ...grpc.CallOption) (*ContractProportionUpdateResp, error) {
	out := new(ContractProportionUpdateResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ContractProportionUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) RemovePlans(ctx context.Context, in *RemovePlansReq, opts ...grpc.CallOption) (*RemovePlansResp, error) {
	out := new(RemovePlansResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/RemovePlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ReceivePlans(ctx context.Context, in *ReceivePlansReq, opts ...grpc.CallOption) (*ReceivePlansResp, error) {
	out := new(ReceivePlansResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ReceivePlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) WaitList(ctx context.Context, in *ListZCReq, opts ...grpc.CallOption) (*ListZCResp, error) {
	out := new(ListZCResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/WaitList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SplitToPlan(ctx context.Context, in *SplitToPlanReq, opts ...grpc.CallOption) (*SplitToPlanResp, error) {
	out := new(SplitToPlanResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/SplitToPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListZC(ctx context.Context, in *ListZCReq, opts ...grpc.CallOption) (*ListZCResp, error) {
	out := new(ListZCResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListZC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateShipmentZC(ctx context.Context, in *CreateZCReq, opts ...grpc.CallOption) (*CreateZCResp, error) {
	out := new(CreateZCResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateShipmentZC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteShipmentZC(ctx context.Context, in *DeleteZCReq, opts ...grpc.CallOption) (*DeleteZCResp, error) {
	out := new(DeleteZCResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteShipmentZC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DetailSupplement(ctx context.Context, in *DetailSupplementReq, opts ...grpc.CallOption) (*DetailSupplementResp, error) {
	out := new(DetailSupplementResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DetailSupplement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DetailPlanList(ctx context.Context, in *DetailPlanListReq, opts ...grpc.CallOption) (*DetailPlanListResp, error) {
	out := new(DetailPlanListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DetailPlanList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ContractCreate(ctx context.Context, in *ContractCreateReq, opts ...grpc.CallOption) (*ContractCreateResp, error) {
	out := new(ContractCreateResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ContractCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ContractRemove(ctx context.Context, in *ContractRemoveReq, opts ...grpc.CallOption) (*ContractRemoveResp, error) {
	out := new(ContractRemoveResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ContractRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ContractStop(ctx context.Context, in *ContractStopReq, opts ...grpc.CallOption) (*ContractStopResp, error) {
	out := new(ContractStopResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ContractStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ContractEdit(ctx context.Context, in *ContractEditReq, opts ...grpc.CallOption) (*ContractEditResp, error) {
	out := new(ContractEditResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ContractEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListContract(ctx context.Context, in *ContractListReq, opts ...grpc.CallOption) (*ContractListResp, error) {
	out := new(ContractListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListMiContract(ctx context.Context, in *ContractMiListReq, opts ...grpc.CallOption) (*ContractMiListResp, error) {
	out := new(ContractMiListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListMiContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneContractMI(ctx context.Context, in *CreateOneContractMIReq, opts ...grpc.CallOption) (*CreateOneContractMIResp, error) {
	out := new(CreateOneContractMIResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneContractMI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneContractMI(ctx context.Context, in *UpdateOneContractMIReq, opts ...grpc.CallOption) (*UpdateOneContractMIResp, error) {
	out := new(UpdateOneContractMIResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneContractMI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneContract(ctx context.Context, in *UpdateOneContractReq, opts ...grpc.CallOption) (*UpdateOneContractResp, error) {
	out := new(UpdateOneContractResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) BatchOperateContract(ctx context.Context, in *BatchOperateContractReq, opts ...grpc.CallOption) (*BatchOperateContractResp, error) {
	out := new(BatchOperateContractResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/BatchOperateContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateContractActive(ctx context.Context, in *UpdateContractActiveReq, opts ...grpc.CallOption) (*UpdateContractActiveResp, error) {
	out := new(UpdateContractActiveResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateContractActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteOneContract(ctx context.Context, in *DeleteOneContractReq, opts ...grpc.CallOption) (*DeleteOneContractResp, error) {
	out := new(DeleteOneContractResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteOneContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteOneContractMi(ctx context.Context, in *DeleteOneContractMiReq, opts ...grpc.CallOption) (*DeleteOneContractMiResp, error) {
	out := new(DeleteOneContractMiResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteOneContractMi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetContractInfo(ctx context.Context, in *GetContractInfoReq, opts ...grpc.CallOption) (*GetContractInfoResp, error) {
	out := new(GetContractInfoResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetContractInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CountContract(ctx context.Context, in *CountContractReq, opts ...grpc.CallOption) (*CountContractResp, error) {
	out := new(CountContractResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CountContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) RefreshContract(ctx context.Context, in *RefreshContractReq, opts ...grpc.CallOption) (*RefreshContractResp, error) {
	out := new(RefreshContractResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/RefreshContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ResetContract(ctx context.Context, in *ResetContractReq, opts ...grpc.CallOption) (*ResetContractResp, error) {
	out := new(ResetContractResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ResetContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ContractDetail(ctx context.Context, in *ContractDetailReq, opts ...grpc.CallOption) (*ContractDetailResp, error) {
	out := new(ContractDetailResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ContractDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CheckContractList(ctx context.Context, in *UpCheckContractReq, opts ...grpc.CallOption) (*CheckContractListResp, error) {
	out := new(CheckContractListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CheckContractList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListMedicine(ctx context.Context, in *MedicineListReq, opts ...grpc.CallOption) (*MedicineListResp, error) {
	out := new(MedicineListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) MedicineListForQuery(ctx context.Context, in *MedicineListForQueryReq, opts ...grpc.CallOption) (*MedicineListForQueryResp, error) {
	out := new(MedicineListForQueryResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/MedicineListForQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateMedicine(ctx context.Context, in *CreateMedicineReq, opts ...grpc.CallOption) (*CreateMedicineResp, error) {
	out := new(CreateMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateBatchMedicine(ctx context.Context, in *CreateBatchMedicineReq, opts ...grpc.CallOption) (*CreateBatchMedicineResp, error) {
	out := new(CreateBatchMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateBatchMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateMedicine(ctx context.Context, in *UpdateMedicineReq, opts ...grpc.CallOption) (*UpdateMedicineResp, error) {
	out := new(UpdateMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateMedicineActive(ctx context.Context, in *UpdateMedicineActiveReq, opts ...grpc.CallOption) (*UpdateMedicineActiveResp, error) {
	out := new(UpdateMedicineActiveResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateMedicineActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteMedicine(ctx context.Context, in *DeleteMedicineReq, opts ...grpc.CallOption) (*DeleteMedicineResp, error) {
	out := new(DeleteMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SelectTagByMedicineId(ctx context.Context, in *SelectTagByMedicineIdReq, opts ...grpc.CallOption) (*SelectTagByMedicineIdResp, error) {
	out := new(SelectTagByMedicineIdResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/SelectTagByMedicineId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SelectInfoByMedicineNames(ctx context.Context, in *SelectInfoByMedicineNamesReq, opts ...grpc.CallOption) (*SelectInfoByMedicineNamesResp, error) {
	out := new(SelectInfoByMedicineNamesResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/SelectInfoByMedicineNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) TagList(ctx context.Context, in *TagListReq, opts ...grpc.CallOption) (*TagListResp, error) {
	out := new(TagListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/TagList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateTag(ctx context.Context, in *CreateTagReq, opts ...grpc.CallOption) (*CreateTagResp, error) {
	out := new(CreateTagResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateTag(ctx context.Context, in *UpdateTagReq, opts ...grpc.CallOption) (*UpdateTagResp, error) {
	out := new(UpdateTagResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteTag(ctx context.Context, in *DeleteTagReq, opts ...grpc.CallOption) (*DeleteTagResp, error) {
	out := new(DeleteTagResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) TagDetailList(ctx context.Context, in *TagDetailListReq, opts ...grpc.CallOption) (*TagDetailListResp, error) {
	out := new(TagDetailListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/TagDetailList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteTagMedicine(ctx context.Context, in *DeleteTagMedicineReq, opts ...grpc.CallOption) (*DeleteTagMedicineResp, error) {
	out := new(DeleteTagMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteTagMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateTagMedicine(ctx context.Context, in *CreateTagMedicineReq, opts ...grpc.CallOption) (*CreateTagMedicineResp, error) {
	out := new(CreateTagMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateTagMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonMedicineQuery(ctx context.Context, in *CommonMedicineQueryReq, opts ...grpc.CallOption) (*CommonMedicineQueryResp, error) {
	out := new(CommonMedicineQueryResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonMedicineQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListMi(ctx context.Context, in *ListMiReq, opts ...grpc.CallOption) (*ListMiResp, error) {
	out := new(ListMiResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListMi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonMI(ctx context.Context, in *CommonMIReq, opts ...grpc.CallOption) (*CommonMIResp, error) {
	out := new(CommonMIResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonMI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneMI(ctx context.Context, in *CreateOneMIReq, opts ...grpc.CallOption) (*CreateOneMIResp, error) {
	out := new(CreateOneMIResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneMI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateMi(ctx context.Context, in *UpdateMiReq, opts ...grpc.CallOption) (*UpdateMiResp, error) {
	out := new(UpdateMiResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateMi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListCompany(ctx context.Context, in *ListCompanyReq, opts ...grpc.CallOption) (*ListCompanyResp, error) {
	out := new(ListCompanyResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneCompany(ctx context.Context, in *CreateOneCompanyReq, opts ...grpc.CallOption) (*CreateOneCompanyResp, error) {
	out := new(CreateOneCompanyResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneCompany(ctx context.Context, in *UpdateOneCompanyReq, opts ...grpc.CallOption) (*UpdateOneCompanyResp, error) {
	out := new(UpdateOneCompanyResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonCompany(ctx context.Context, in *CommonCompanyReq, opts ...grpc.CallOption) (*CommonCompanyResp, error) {
	out := new(CommonCompanyResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SelCompanyByNames(ctx context.Context, in *SelCompanyByNamesReq, opts ...grpc.CallOption) (*SelCompanyByNamesResp, error) {
	out := new(SelCompanyByNamesResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/SelCompanyByNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListTpPlanErr(ctx context.Context, in *ListTpPlanErrReq, opts ...grpc.CallOption) (*ListTpPlanErrResp, error) {
	out := new(ListTpPlanErrResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListTpPlanErr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateErrShipmentPlan(ctx context.Context, in *UpdateErrShipmentPlanReq, opts ...grpc.CallOption) (*UpdateErrShipmentPlanResp, error) {
	out := new(UpdateErrShipmentPlanResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateErrShipmentPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListShipmentPlan(ctx context.Context, in *ListShipmentPlanReq, opts ...grpc.CallOption) (*ListShipmentPlanResp, error) {
	out := new(ListShipmentPlanResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListShipmentPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CountShipmentPlan(ctx context.Context, in *CountShipmentPlanReq, opts ...grpc.CallOption) (*CountShipmentPlanResp, error) {
	out := new(CountShipmentPlanResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CountShipmentPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DetailShipmentOrder(ctx context.Context, in *DetailShipmentOrderReq, opts ...grpc.CallOption) (*DetailShipmentOrderResp, error) {
	out := new(DetailShipmentOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DetailShipmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListShipmentPlanForOrder(ctx context.Context, in *ListShipmentPlanForOrderReq, opts ...grpc.CallOption) (*ListShipmentPlanForOrderResp, error) {
	out := new(ListShipmentPlanForOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListShipmentPlanForOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateShipmentOrder(ctx context.Context, in *CreateShipmentOrderReq, opts ...grpc.CallOption) (*CreateShipmentOrderResp, error) {
	out := new(CreateShipmentOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateShipmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListShipmentOrder(ctx context.Context, in *ListShipmentOrderReq, opts ...grpc.CallOption) (*ListShipmentOrderResp, error) {
	out := new(ListShipmentOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListShipmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CountShipmentOrder(ctx context.Context, in *CountShipmentOrderReq, opts ...grpc.CallOption) (*CountShipmentOrderResp, error) {
	out := new(CountShipmentOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CountShipmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ReceiveShipmentOrder(ctx context.Context, in *ReceiveShipmentOrderReq, opts ...grpc.CallOption) (*ReceiveShipmentOrderResp, error) {
	out := new(ReceiveShipmentOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ReceiveShipmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetContractByShipmentPlanId(ctx context.Context, in *GetContractByShipmentPlanIdReq, opts ...grpc.CallOption) (*GetContractByShipmentPlanIdResp, error) {
	out := new(GetContractByShipmentPlanIdResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetContractByShipmentPlanId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigResp, error) {
	out := new(GetConfigResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*UpdateConfigResp, error) {
	out := new(UpdateConfigResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) InsertConfigs(ctx context.Context, in *InsertConfigsReq, opts ...grpc.CallOption) (*InsertConfigsResp, error) {
	out := new(InsertConfigsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/InsertConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteConfigs(ctx context.Context, in *DeleteConfigsReq, opts ...grpc.CallOption) (*DeleteConfigsResp, error) {
	out := new(DeleteConfigsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListCompanyBind(ctx context.Context, in *ListCompanyBindReq, opts ...grpc.CallOption) (*ListCompanyBindResp, error) {
	out := new(ListCompanyBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListCompanyBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CompanyBind(ctx context.Context, in *CompanyBindReq, opts ...grpc.CallOption) (*CompanyBindResp, error) {
	out := new(CompanyBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CompanyBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListMiBind(ctx context.Context, in *ListMiBindReq, opts ...grpc.CallOption) (*ListMiBindResp, error) {
	out := new(ListMiBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListMiBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) MiBind(ctx context.Context, in *MiBindReq, opts ...grpc.CallOption) (*MiBindResp, error) {
	out := new(MiBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/MiBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListMedicineBind(ctx context.Context, in *ListMedicineBindReq, opts ...grpc.CallOption) (*ListMedicineBindResp, error) {
	out := new(ListMedicineBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListMedicineBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) MedicineBind(ctx context.Context, in *MedicineBindReq, opts ...grpc.CallOption) (*MedicineBindResp, error) {
	out := new(MedicineBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/MedicineBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListContractsByMiContractIds(ctx context.Context, in *MiContractIdsReq, opts ...grpc.CallOption) (*ListContractsResp, error) {
	out := new(ListContractsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListContractsByMiContractIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServiceServer is the server API for ManagerService service.
type ManagerServiceServer interface {
	//区域创建
	CreateArea(context.Context, *CreateAreaReq) (*CreateAreaResp, error)
	//区域编辑
	EditArea(context.Context, *EditAreaReq) (*EditAreaResp, error)
	//区域删除
	DeleteArea(context.Context, *DeleteAreaReq) (*DeleteAreaResp, error)
	//区域列表
	ListArea(context.Context, *ListAreaReq) (*ListAreaResp, error)
	//通用区域列表
	CommonListArea(context.Context, *ListAreaReq) (*ListAreaResp, error)
	//上传合同 鹰潭  20211109
	ContractUpload(context.Context, *ContractCreateReq) (*ContractCreateResp, error)
	// 20211103 濮阳三期  新增 回款情况 报表
	ReturnZoneList(context.Context, *ReturnZoneListReq) (*ReturnZoneListResp, error)
	ReturnMiList(context.Context, *ReturnMiListReq) (*ReturnMiListResp, error)
	ReturnMiMedicineList(context.Context, *ReturnMiMedicineListReq) (*ReturnMiMedicineListResp, error)
	// 20211027 鹰潭新增  合同药品国家规则
	// 合同药品国家规则 列表
	ContractProportionList(context.Context, *ContractProportionListReq) (*ContractProportionListResp, error)
	// 合同药品国家规则 更新
	ContractProportionUpdate(context.Context, *ContractProportionUpdateReq) (*ContractProportionUpdateResp, error)
	// 删除订单
	RemovePlans(context.Context, *RemovePlansReq) (*RemovePlansResp, error)
	// 接单
	ReceivePlans(context.Context, *ReceivePlansReq) (*ReceivePlansResp, error)
	// 待接单列表
	WaitList(context.Context, *ListZCReq) (*ListZCResp, error)
	// 拆单
	SplitToPlan(context.Context, *SplitToPlanReq) (*SplitToPlanResp, error)
	//招采单列表
	ListZC(context.Context, *ListZCReq) (*ListZCResp, error)
	//平台创建招采单逻辑
	CreateShipmentZC(context.Context, *CreateZCReq) (*CreateZCResp, error)
	//删除未拆单且未过期的招采单
	DeleteShipmentZC(context.Context, *DeleteZCReq) (*DeleteZCResp, error)
	// 招采详情补充
	DetailSupplement(context.Context, *DetailSupplementReq) (*DetailSupplementResp, error)
	//鹰潭 招采详情 订单列表
	DetailPlanList(context.Context, *DetailPlanListReq) (*DetailPlanListResp, error)
	//合同相关
	//新建合同
	ContractCreate(context.Context, *ContractCreateReq) (*ContractCreateResp, error)
	// 删除合同
	ContractRemove(context.Context, *ContractRemoveReq) (*ContractRemoveResp, error)
	// 停用合同
	ContractStop(context.Context, *ContractStopReq) (*ContractStopResp, error)
	// 编辑合同
	ContractEdit(context.Context, *ContractEditReq) (*ContractEditResp, error)
	ListContract(context.Context, *ContractListReq) (*ContractListResp, error)
	ListMiContract(context.Context, *ContractMiListReq) (*ContractMiListResp, error)
	CreateOneContractMI(context.Context, *CreateOneContractMIReq) (*CreateOneContractMIResp, error)
	UpdateOneContractMI(context.Context, *UpdateOneContractMIReq) (*UpdateOneContractMIResp, error)
	UpdateOneContract(context.Context, *UpdateOneContractReq) (*UpdateOneContractResp, error)
	BatchOperateContract(context.Context, *BatchOperateContractReq) (*BatchOperateContractResp, error)
	UpdateContractActive(context.Context, *UpdateContractActiveReq) (*UpdateContractActiveResp, error)
	DeleteOneContract(context.Context, *DeleteOneContractReq) (*DeleteOneContractResp, error)
	DeleteOneContractMi(context.Context, *DeleteOneContractMiReq) (*DeleteOneContractMiResp, error)
	GetContractInfo(context.Context, *GetContractInfoReq) (*GetContractInfoResp, error)
	CountContract(context.Context, *CountContractReq) (*CountContractResp, error)
	RefreshContract(context.Context, *RefreshContractReq) (*RefreshContractResp, error)
	//合同重置
	ResetContract(context.Context, *ResetContractReq) (*ResetContractResp, error)
	//暂未使用
	ContractDetail(context.Context, *ContractDetailReq) (*ContractDetailResp, error)
	CheckContractList(context.Context, *UpCheckContractReq) (*CheckContractListResp, error)
	//药品相关
	ListMedicine(context.Context, *MedicineListReq) (*MedicineListResp, error)
	MedicineListForQuery(context.Context, *MedicineListForQueryReq) (*MedicineListForQueryResp, error)
	CreateMedicine(context.Context, *CreateMedicineReq) (*CreateMedicineResp, error)
	CreateBatchMedicine(context.Context, *CreateBatchMedicineReq) (*CreateBatchMedicineResp, error)
	UpdateMedicine(context.Context, *UpdateMedicineReq) (*UpdateMedicineResp, error)
	UpdateMedicineActive(context.Context, *UpdateMedicineActiveReq) (*UpdateMedicineActiveResp, error)
	DeleteMedicine(context.Context, *DeleteMedicineReq) (*DeleteMedicineResp, error)
	SelectTagByMedicineId(context.Context, *SelectTagByMedicineIdReq) (*SelectTagByMedicineIdResp, error)
	SelectInfoByMedicineNames(context.Context, *SelectInfoByMedicineNamesReq) (*SelectInfoByMedicineNamesResp, error)
	//药品标签相关
	TagList(context.Context, *TagListReq) (*TagListResp, error)
	CreateTag(context.Context, *CreateTagReq) (*CreateTagResp, error)
	UpdateTag(context.Context, *UpdateTagReq) (*UpdateTagResp, error)
	DeleteTag(context.Context, *DeleteTagReq) (*DeleteTagResp, error)
	TagDetailList(context.Context, *TagDetailListReq) (*TagDetailListResp, error)
	DeleteTagMedicine(context.Context, *DeleteTagMedicineReq) (*DeleteTagMedicineResp, error)
	CreateTagMedicine(context.Context, *CreateTagMedicineReq) (*CreateTagMedicineResp, error)
	CommonMedicineQuery(context.Context, *CommonMedicineQueryReq) (*CommonMedicineQueryResp, error)
	//医疗机构相关
	ListMi(context.Context, *ListMiReq) (*ListMiResp, error)
	CommonMI(context.Context, *CommonMIReq) (*CommonMIResp, error)
	CreateOneMI(context.Context, *CreateOneMIReq) (*CreateOneMIResp, error)
	UpdateMi(context.Context, *UpdateMiReq) (*UpdateMiResp, error)
	//配送企业相关
	ListCompany(context.Context, *ListCompanyReq) (*ListCompanyResp, error)
	CreateOneCompany(context.Context, *CreateOneCompanyReq) (*CreateOneCompanyResp, error)
	UpdateOneCompany(context.Context, *UpdateOneCompanyReq) (*UpdateOneCompanyResp, error)
	CommonCompany(context.Context, *CommonCompanyReq) (*CommonCompanyResp, error)
	SelCompanyByNames(context.Context, *SelCompanyByNamesReq) (*SelCompanyByNamesResp, error)
	//招采异常订单相关
	ListTpPlanErr(context.Context, *ListTpPlanErrReq) (*ListTpPlanErrResp, error)
	UpdateErrShipmentPlan(context.Context, *UpdateErrShipmentPlanReq) (*UpdateErrShipmentPlanResp, error)
	//招采单(配送)相关
	ListShipmentPlan(context.Context, *ListShipmentPlanReq) (*ListShipmentPlanResp, error)
	CountShipmentPlan(context.Context, *CountShipmentPlanReq) (*CountShipmentPlanResp, error)
	//配送单详情
	DetailShipmentOrder(context.Context, *DetailShipmentOrderReq) (*DetailShipmentOrderResp, error)
	ListShipmentPlanForOrder(context.Context, *ListShipmentPlanForOrderReq) (*ListShipmentPlanForOrderResp, error)
	//配送单创建
	CreateShipmentOrder(context.Context, *CreateShipmentOrderReq) (*CreateShipmentOrderResp, error)
	//配送单列表
	ListShipmentOrder(context.Context, *ListShipmentOrderReq) (*ListShipmentOrderResp, error)
	//配送单表头汇总
	CountShipmentOrder(context.Context, *CountShipmentOrderReq) (*CountShipmentOrderResp, error)
	//配送单收获
	ReceiveShipmentOrder(context.Context, *ReceiveShipmentOrderReq) (*ReceiveShipmentOrderResp, error)
	//根据招采单(配送计划)id查询合同编号
	GetContractByShipmentPlanId(context.Context, *GetContractByShipmentPlanIdReq) (*GetContractByShipmentPlanIdResp, error)
	//通用配置查询
	GetConfig(context.Context, *GetConfigReq) (*GetConfigResp, error)
	//修改配置
	UpdateConfig(context.Context, *UpdateConfigReq) (*UpdateConfigResp, error)
	//批量插入配置
	InsertConfigs(context.Context, *InsertConfigsReq) (*InsertConfigsResp, error)
	//删除配置
	DeleteConfigs(context.Context, *DeleteConfigsReq) (*DeleteConfigsResp, error)
	//配送企业绑定
	ListCompanyBind(context.Context, *ListCompanyBindReq) (*ListCompanyBindResp, error)
	CompanyBind(context.Context, *CompanyBindReq) (*CompanyBindResp, error)
	//医疗机构绑定
	ListMiBind(context.Context, *ListMiBindReq) (*ListMiBindResp, error)
	MiBind(context.Context, *MiBindReq) (*MiBindResp, error)
	//药品绑定绑定
	ListMedicineBind(context.Context, *ListMedicineBindReq) (*ListMedicineBindResp, error)
	MedicineBind(context.Context, *MedicineBindReq) (*MedicineBindResp, error)
	// 由 contractMiId 列表 获取 主合同列表
	ListContractsByMiContractIds(context.Context, *MiContractIdsReq) (*ListContractsResp, error)
}

// UnimplementedManagerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedManagerServiceServer struct {
}

func (*UnimplementedManagerServiceServer) CreateArea(context.Context, *CreateAreaReq) (*CreateAreaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArea not implemented")
}
func (*UnimplementedManagerServiceServer) EditArea(context.Context, *EditAreaReq) (*EditAreaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditArea not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteArea(context.Context, *DeleteAreaReq) (*DeleteAreaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArea not implemented")
}
func (*UnimplementedManagerServiceServer) ListArea(context.Context, *ListAreaReq) (*ListAreaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArea not implemented")
}
func (*UnimplementedManagerServiceServer) CommonListArea(context.Context, *ListAreaReq) (*ListAreaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonListArea not implemented")
}
func (*UnimplementedManagerServiceServer) ContractUpload(context.Context, *ContractCreateReq) (*ContractCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractUpload not implemented")
}
func (*UnimplementedManagerServiceServer) ReturnZoneList(context.Context, *ReturnZoneListReq) (*ReturnZoneListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnZoneList not implemented")
}
func (*UnimplementedManagerServiceServer) ReturnMiList(context.Context, *ReturnMiListReq) (*ReturnMiListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnMiList not implemented")
}
func (*UnimplementedManagerServiceServer) ReturnMiMedicineList(context.Context, *ReturnMiMedicineListReq) (*ReturnMiMedicineListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnMiMedicineList not implemented")
}
func (*UnimplementedManagerServiceServer) ContractProportionList(context.Context, *ContractProportionListReq) (*ContractProportionListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractProportionList not implemented")
}
func (*UnimplementedManagerServiceServer) ContractProportionUpdate(context.Context, *ContractProportionUpdateReq) (*ContractProportionUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractProportionUpdate not implemented")
}
func (*UnimplementedManagerServiceServer) RemovePlans(context.Context, *RemovePlansReq) (*RemovePlansResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePlans not implemented")
}
func (*UnimplementedManagerServiceServer) ReceivePlans(context.Context, *ReceivePlansReq) (*ReceivePlansResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceivePlans not implemented")
}
func (*UnimplementedManagerServiceServer) WaitList(context.Context, *ListZCReq) (*ListZCResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitList not implemented")
}
func (*UnimplementedManagerServiceServer) SplitToPlan(context.Context, *SplitToPlanReq) (*SplitToPlanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitToPlan not implemented")
}
func (*UnimplementedManagerServiceServer) ListZC(context.Context, *ListZCReq) (*ListZCResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListZC not implemented")
}
func (*UnimplementedManagerServiceServer) CreateShipmentZC(context.Context, *CreateZCReq) (*CreateZCResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShipmentZC not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteShipmentZC(context.Context, *DeleteZCReq) (*DeleteZCResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShipmentZC not implemented")
}
func (*UnimplementedManagerServiceServer) DetailSupplement(context.Context, *DetailSupplementReq) (*DetailSupplementResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailSupplement not implemented")
}
func (*UnimplementedManagerServiceServer) DetailPlanList(context.Context, *DetailPlanListReq) (*DetailPlanListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailPlanList not implemented")
}
func (*UnimplementedManagerServiceServer) ContractCreate(context.Context, *ContractCreateReq) (*ContractCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractCreate not implemented")
}
func (*UnimplementedManagerServiceServer) ContractRemove(context.Context, *ContractRemoveReq) (*ContractRemoveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractRemove not implemented")
}
func (*UnimplementedManagerServiceServer) ContractStop(context.Context, *ContractStopReq) (*ContractStopResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractStop not implemented")
}
func (*UnimplementedManagerServiceServer) ContractEdit(context.Context, *ContractEditReq) (*ContractEditResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractEdit not implemented")
}
func (*UnimplementedManagerServiceServer) ListContract(context.Context, *ContractListReq) (*ContractListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContract not implemented")
}
func (*UnimplementedManagerServiceServer) ListMiContract(context.Context, *ContractMiListReq) (*ContractMiListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMiContract not implemented")
}
func (*UnimplementedManagerServiceServer) CreateOneContractMI(context.Context, *CreateOneContractMIReq) (*CreateOneContractMIResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneContractMI not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneContractMI(context.Context, *UpdateOneContractMIReq) (*UpdateOneContractMIResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneContractMI not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneContract(context.Context, *UpdateOneContractReq) (*UpdateOneContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneContract not implemented")
}
func (*UnimplementedManagerServiceServer) BatchOperateContract(context.Context, *BatchOperateContractReq) (*BatchOperateContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchOperateContract not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateContractActive(context.Context, *UpdateContractActiveReq) (*UpdateContractActiveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContractActive not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteOneContract(context.Context, *DeleteOneContractReq) (*DeleteOneContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneContract not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteOneContractMi(context.Context, *DeleteOneContractMiReq) (*DeleteOneContractMiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneContractMi not implemented")
}
func (*UnimplementedManagerServiceServer) GetContractInfo(context.Context, *GetContractInfoReq) (*GetContractInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractInfo not implemented")
}
func (*UnimplementedManagerServiceServer) CountContract(context.Context, *CountContractReq) (*CountContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountContract not implemented")
}
func (*UnimplementedManagerServiceServer) RefreshContract(context.Context, *RefreshContractReq) (*RefreshContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshContract not implemented")
}
func (*UnimplementedManagerServiceServer) ResetContract(context.Context, *ResetContractReq) (*ResetContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetContract not implemented")
}
func (*UnimplementedManagerServiceServer) ContractDetail(context.Context, *ContractDetailReq) (*ContractDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractDetail not implemented")
}
func (*UnimplementedManagerServiceServer) CheckContractList(context.Context, *UpCheckContractReq) (*CheckContractListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckContractList not implemented")
}
func (*UnimplementedManagerServiceServer) ListMedicine(context.Context, *MedicineListReq) (*MedicineListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicine not implemented")
}
func (*UnimplementedManagerServiceServer) MedicineListForQuery(context.Context, *MedicineListForQueryReq) (*MedicineListForQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MedicineListForQuery not implemented")
}
func (*UnimplementedManagerServiceServer) CreateMedicine(context.Context, *CreateMedicineReq) (*CreateMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedicine not implemented")
}
func (*UnimplementedManagerServiceServer) CreateBatchMedicine(context.Context, *CreateBatchMedicineReq) (*CreateBatchMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatchMedicine not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateMedicine(context.Context, *UpdateMedicineReq) (*UpdateMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicine not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateMedicineActive(context.Context, *UpdateMedicineActiveReq) (*UpdateMedicineActiveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicineActive not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteMedicine(context.Context, *DeleteMedicineReq) (*DeleteMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedicine not implemented")
}
func (*UnimplementedManagerServiceServer) SelectTagByMedicineId(context.Context, *SelectTagByMedicineIdReq) (*SelectTagByMedicineIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectTagByMedicineId not implemented")
}
func (*UnimplementedManagerServiceServer) SelectInfoByMedicineNames(context.Context, *SelectInfoByMedicineNamesReq) (*SelectInfoByMedicineNamesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectInfoByMedicineNames not implemented")
}
func (*UnimplementedManagerServiceServer) TagList(context.Context, *TagListReq) (*TagListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagList not implemented")
}
func (*UnimplementedManagerServiceServer) CreateTag(context.Context, *CreateTagReq) (*CreateTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateTag(context.Context, *UpdateTagReq) (*UpdateTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteTag(context.Context, *DeleteTagReq) (*DeleteTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (*UnimplementedManagerServiceServer) TagDetailList(context.Context, *TagDetailListReq) (*TagDetailListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagDetailList not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteTagMedicine(context.Context, *DeleteTagMedicineReq) (*DeleteTagMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTagMedicine not implemented")
}
func (*UnimplementedManagerServiceServer) CreateTagMedicine(context.Context, *CreateTagMedicineReq) (*CreateTagMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTagMedicine not implemented")
}
func (*UnimplementedManagerServiceServer) CommonMedicineQuery(context.Context, *CommonMedicineQueryReq) (*CommonMedicineQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonMedicineQuery not implemented")
}
func (*UnimplementedManagerServiceServer) ListMi(context.Context, *ListMiReq) (*ListMiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMi not implemented")
}
func (*UnimplementedManagerServiceServer) CommonMI(context.Context, *CommonMIReq) (*CommonMIResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonMI not implemented")
}
func (*UnimplementedManagerServiceServer) CreateOneMI(context.Context, *CreateOneMIReq) (*CreateOneMIResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneMI not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateMi(context.Context, *UpdateMiReq) (*UpdateMiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMi not implemented")
}
func (*UnimplementedManagerServiceServer) ListCompany(context.Context, *ListCompanyReq) (*ListCompanyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompany not implemented")
}
func (*UnimplementedManagerServiceServer) CreateOneCompany(context.Context, *CreateOneCompanyReq) (*CreateOneCompanyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneCompany not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateOneCompany(context.Context, *UpdateOneCompanyReq) (*UpdateOneCompanyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneCompany not implemented")
}
func (*UnimplementedManagerServiceServer) CommonCompany(context.Context, *CommonCompanyReq) (*CommonCompanyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonCompany not implemented")
}
func (*UnimplementedManagerServiceServer) SelCompanyByNames(context.Context, *SelCompanyByNamesReq) (*SelCompanyByNamesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelCompanyByNames not implemented")
}
func (*UnimplementedManagerServiceServer) ListTpPlanErr(context.Context, *ListTpPlanErrReq) (*ListTpPlanErrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTpPlanErr not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateErrShipmentPlan(context.Context, *UpdateErrShipmentPlanReq) (*UpdateErrShipmentPlanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateErrShipmentPlan not implemented")
}
func (*UnimplementedManagerServiceServer) ListShipmentPlan(context.Context, *ListShipmentPlanReq) (*ListShipmentPlanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShipmentPlan not implemented")
}
func (*UnimplementedManagerServiceServer) CountShipmentPlan(context.Context, *CountShipmentPlanReq) (*CountShipmentPlanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountShipmentPlan not implemented")
}
func (*UnimplementedManagerServiceServer) DetailShipmentOrder(context.Context, *DetailShipmentOrderReq) (*DetailShipmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailShipmentOrder not implemented")
}
func (*UnimplementedManagerServiceServer) ListShipmentPlanForOrder(context.Context, *ListShipmentPlanForOrderReq) (*ListShipmentPlanForOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShipmentPlanForOrder not implemented")
}
func (*UnimplementedManagerServiceServer) CreateShipmentOrder(context.Context, *CreateShipmentOrderReq) (*CreateShipmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShipmentOrder not implemented")
}
func (*UnimplementedManagerServiceServer) ListShipmentOrder(context.Context, *ListShipmentOrderReq) (*ListShipmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShipmentOrder not implemented")
}
func (*UnimplementedManagerServiceServer) CountShipmentOrder(context.Context, *CountShipmentOrderReq) (*CountShipmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountShipmentOrder not implemented")
}
func (*UnimplementedManagerServiceServer) ReceiveShipmentOrder(context.Context, *ReceiveShipmentOrderReq) (*ReceiveShipmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveShipmentOrder not implemented")
}
func (*UnimplementedManagerServiceServer) GetContractByShipmentPlanId(context.Context, *GetContractByShipmentPlanIdReq) (*GetContractByShipmentPlanIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractByShipmentPlanId not implemented")
}
func (*UnimplementedManagerServiceServer) GetConfig(context.Context, *GetConfigReq) (*GetConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedManagerServiceServer) UpdateConfig(context.Context, *UpdateConfigReq) (*UpdateConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (*UnimplementedManagerServiceServer) InsertConfigs(context.Context, *InsertConfigsReq) (*InsertConfigsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertConfigs not implemented")
}
func (*UnimplementedManagerServiceServer) DeleteConfigs(context.Context, *DeleteConfigsReq) (*DeleteConfigsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigs not implemented")
}
func (*UnimplementedManagerServiceServer) ListCompanyBind(context.Context, *ListCompanyBindReq) (*ListCompanyBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanyBind not implemented")
}
func (*UnimplementedManagerServiceServer) CompanyBind(context.Context, *CompanyBindReq) (*CompanyBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyBind not implemented")
}
func (*UnimplementedManagerServiceServer) ListMiBind(context.Context, *ListMiBindReq) (*ListMiBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMiBind not implemented")
}
func (*UnimplementedManagerServiceServer) MiBind(context.Context, *MiBindReq) (*MiBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiBind not implemented")
}
func (*UnimplementedManagerServiceServer) ListMedicineBind(context.Context, *ListMedicineBindReq) (*ListMedicineBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicineBind not implemented")
}
func (*UnimplementedManagerServiceServer) MedicineBind(context.Context, *MedicineBindReq) (*MedicineBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MedicineBind not implemented")
}
func (*UnimplementedManagerServiceServer) ListContractsByMiContractIds(context.Context, *MiContractIdsReq) (*ListContractsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContractsByMiContractIds not implemented")
}

func RegisterManagerServiceServer(s *grpc.Server, srv ManagerServiceServer) {
	s.RegisterService(&_ManagerService_serviceDesc, srv)
}

func _ManagerService_CreateArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAreaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateArea(ctx, req.(*CreateAreaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_EditArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditAreaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).EditArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/EditArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).EditArea(ctx, req.(*EditAreaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAreaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteArea(ctx, req.(*DeleteAreaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAreaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListArea(ctx, req.(*ListAreaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonListArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAreaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonListArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonListArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonListArea(ctx, req.(*ListAreaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ContractUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ContractUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ContractUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ContractUpload(ctx, req.(*ContractCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ReturnZoneList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnZoneListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ReturnZoneList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ReturnZoneList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ReturnZoneList(ctx, req.(*ReturnZoneListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ReturnMiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnMiListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ReturnMiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ReturnMiList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ReturnMiList(ctx, req.(*ReturnMiListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ReturnMiMedicineList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnMiMedicineListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ReturnMiMedicineList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ReturnMiMedicineList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ReturnMiMedicineList(ctx, req.(*ReturnMiMedicineListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ContractProportionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractProportionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ContractProportionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ContractProportionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ContractProportionList(ctx, req.(*ContractProportionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ContractProportionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractProportionUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ContractProportionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ContractProportionUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ContractProportionUpdate(ctx, req.(*ContractProportionUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_RemovePlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePlansReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).RemovePlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/RemovePlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).RemovePlans(ctx, req.(*RemovePlansReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ReceivePlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceivePlansReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ReceivePlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ReceivePlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ReceivePlans(ctx, req.(*ReceivePlansReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_WaitList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListZCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).WaitList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/WaitList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).WaitList(ctx, req.(*ListZCReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SplitToPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitToPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SplitToPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/SplitToPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SplitToPlan(ctx, req.(*SplitToPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListZC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListZCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListZC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListZC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListZC(ctx, req.(*ListZCReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateShipmentZC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateZCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateShipmentZC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateShipmentZC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateShipmentZC(ctx, req.(*CreateZCReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteShipmentZC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteZCReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteShipmentZC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteShipmentZC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteShipmentZC(ctx, req.(*DeleteZCReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DetailSupplement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailSupplementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DetailSupplement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DetailSupplement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DetailSupplement(ctx, req.(*DetailSupplementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DetailPlanList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailPlanListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DetailPlanList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DetailPlanList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DetailPlanList(ctx, req.(*DetailPlanListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ContractCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ContractCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ContractCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ContractCreate(ctx, req.(*ContractCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ContractRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractRemoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ContractRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ContractRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ContractRemove(ctx, req.(*ContractRemoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ContractStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ContractStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ContractStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ContractStop(ctx, req.(*ContractStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ContractEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractEditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ContractEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ContractEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ContractEdit(ctx, req.(*ContractEditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListContract(ctx, req.(*ContractListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListMiContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractMiListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListMiContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListMiContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListMiContract(ctx, req.(*ContractMiListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneContractMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneContractMIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneContractMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneContractMI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneContractMI(ctx, req.(*CreateOneContractMIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneContractMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneContractMIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneContractMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneContractMI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneContractMI(ctx, req.(*UpdateOneContractMIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneContract(ctx, req.(*UpdateOneContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_BatchOperateContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOperateContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).BatchOperateContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/BatchOperateContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).BatchOperateContract(ctx, req.(*BatchOperateContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateContractActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContractActiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateContractActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateContractActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateContractActive(ctx, req.(*UpdateContractActiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteOneContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOneContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteOneContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteOneContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteOneContract(ctx, req.(*DeleteOneContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteOneContractMi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOneContractMiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteOneContractMi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteOneContractMi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteOneContractMi(ctx, req.(*DeleteOneContractMiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetContractInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetContractInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetContractInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetContractInfo(ctx, req.(*GetContractInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CountContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CountContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CountContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CountContract(ctx, req.(*CountContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_RefreshContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).RefreshContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/RefreshContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).RefreshContract(ctx, req.(*RefreshContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ResetContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ResetContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ResetContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ResetContract(ctx, req.(*ResetContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ContractDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ContractDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ContractDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ContractDetail(ctx, req.(*ContractDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CheckContractList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpCheckContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CheckContractList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CheckContractList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CheckContractList(ctx, req.(*UpCheckContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicineListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListMedicine(ctx, req.(*MedicineListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_MedicineListForQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicineListForQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).MedicineListForQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/MedicineListForQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).MedicineListForQuery(ctx, req.(*MedicineListForQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateMedicine(ctx, req.(*CreateMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateBatchMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBatchMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateBatchMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateBatchMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateBatchMedicine(ctx, req.(*CreateBatchMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateMedicine(ctx, req.(*UpdateMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateMedicineActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMedicineActiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateMedicineActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateMedicineActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateMedicineActive(ctx, req.(*UpdateMedicineActiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteMedicine(ctx, req.(*DeleteMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SelectTagByMedicineId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectTagByMedicineIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SelectTagByMedicineId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/SelectTagByMedicineId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SelectTagByMedicineId(ctx, req.(*SelectTagByMedicineIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SelectInfoByMedicineNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectInfoByMedicineNamesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SelectInfoByMedicineNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/SelectInfoByMedicineNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SelectInfoByMedicineNames(ctx, req.(*SelectInfoByMedicineNamesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_TagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).TagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/TagList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).TagList(ctx, req.(*TagListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateTag(ctx, req.(*CreateTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateTag(ctx, req.(*UpdateTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteTag(ctx, req.(*DeleteTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_TagDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagDetailListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).TagDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/TagDetailList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).TagDetailList(ctx, req.(*TagDetailListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteTagMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteTagMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteTagMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteTagMedicine(ctx, req.(*DeleteTagMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateTagMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateTagMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateTagMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateTagMedicine(ctx, req.(*CreateTagMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonMedicineQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonMedicineQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonMedicineQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonMedicineQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonMedicineQuery(ctx, req.(*CommonMedicineQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListMi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListMi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListMi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListMi(ctx, req.(*ListMiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonMIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonMI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonMI(ctx, req.(*CommonMIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneMIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneMI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneMI(ctx, req.(*CreateOneMIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateMi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateMi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateMi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateMi(ctx, req.(*UpdateMiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListCompany(ctx, req.(*ListCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneCompany(ctx, req.(*CreateOneCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneCompany(ctx, req.(*UpdateOneCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonCompany(ctx, req.(*CommonCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SelCompanyByNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelCompanyByNamesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SelCompanyByNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/SelCompanyByNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SelCompanyByNames(ctx, req.(*SelCompanyByNamesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListTpPlanErr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTpPlanErrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListTpPlanErr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListTpPlanErr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListTpPlanErr(ctx, req.(*ListTpPlanErrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateErrShipmentPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateErrShipmentPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateErrShipmentPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateErrShipmentPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateErrShipmentPlan(ctx, req.(*UpdateErrShipmentPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListShipmentPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShipmentPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListShipmentPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListShipmentPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListShipmentPlan(ctx, req.(*ListShipmentPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CountShipmentPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountShipmentPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CountShipmentPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CountShipmentPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CountShipmentPlan(ctx, req.(*CountShipmentPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DetailShipmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailShipmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DetailShipmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DetailShipmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DetailShipmentOrder(ctx, req.(*DetailShipmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListShipmentPlanForOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShipmentPlanForOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListShipmentPlanForOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListShipmentPlanForOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListShipmentPlanForOrder(ctx, req.(*ListShipmentPlanForOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateShipmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShipmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateShipmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateShipmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateShipmentOrder(ctx, req.(*CreateShipmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListShipmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShipmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListShipmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListShipmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListShipmentOrder(ctx, req.(*ListShipmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CountShipmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountShipmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CountShipmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CountShipmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CountShipmentOrder(ctx, req.(*CountShipmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ReceiveShipmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveShipmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ReceiveShipmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ReceiveShipmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ReceiveShipmentOrder(ctx, req.(*ReceiveShipmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetContractByShipmentPlanId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractByShipmentPlanIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetContractByShipmentPlanId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetContractByShipmentPlanId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetContractByShipmentPlanId(ctx, req.(*GetContractByShipmentPlanIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetConfig(ctx, req.(*GetConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateConfig(ctx, req.(*UpdateConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_InsertConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).InsertConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/InsertConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).InsertConfigs(ctx, req.(*InsertConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteConfigs(ctx, req.(*DeleteConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListCompanyBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompanyBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListCompanyBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListCompanyBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListCompanyBind(ctx, req.(*ListCompanyBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CompanyBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CompanyBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CompanyBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CompanyBind(ctx, req.(*CompanyBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListMiBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMiBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListMiBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListMiBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListMiBind(ctx, req.(*ListMiBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_MiBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).MiBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/MiBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).MiBind(ctx, req.(*MiBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListMedicineBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMedicineBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListMedicineBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListMedicineBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListMedicineBind(ctx, req.(*ListMedicineBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_MedicineBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicineBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).MedicineBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/MedicineBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).MedicineBind(ctx, req.(*MedicineBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListContractsByMiContractIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiContractIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListContractsByMiContractIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListContractsByMiContractIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListContractsByMiContractIds(ctx, req.(*MiContractIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerService.ManagerService",
	HandlerType: (*ManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArea",
			Handler:    _ManagerService_CreateArea_Handler,
		},
		{
			MethodName: "EditArea",
			Handler:    _ManagerService_EditArea_Handler,
		},
		{
			MethodName: "DeleteArea",
			Handler:    _ManagerService_DeleteArea_Handler,
		},
		{
			MethodName: "ListArea",
			Handler:    _ManagerService_ListArea_Handler,
		},
		{
			MethodName: "CommonListArea",
			Handler:    _ManagerService_CommonListArea_Handler,
		},
		{
			MethodName: "ContractUpload",
			Handler:    _ManagerService_ContractUpload_Handler,
		},
		{
			MethodName: "ReturnZoneList",
			Handler:    _ManagerService_ReturnZoneList_Handler,
		},
		{
			MethodName: "ReturnMiList",
			Handler:    _ManagerService_ReturnMiList_Handler,
		},
		{
			MethodName: "ReturnMiMedicineList",
			Handler:    _ManagerService_ReturnMiMedicineList_Handler,
		},
		{
			MethodName: "ContractProportionList",
			Handler:    _ManagerService_ContractProportionList_Handler,
		},
		{
			MethodName: "ContractProportionUpdate",
			Handler:    _ManagerService_ContractProportionUpdate_Handler,
		},
		{
			MethodName: "RemovePlans",
			Handler:    _ManagerService_RemovePlans_Handler,
		},
		{
			MethodName: "ReceivePlans",
			Handler:    _ManagerService_ReceivePlans_Handler,
		},
		{
			MethodName: "WaitList",
			Handler:    _ManagerService_WaitList_Handler,
		},
		{
			MethodName: "SplitToPlan",
			Handler:    _ManagerService_SplitToPlan_Handler,
		},
		{
			MethodName: "ListZC",
			Handler:    _ManagerService_ListZC_Handler,
		},
		{
			MethodName: "CreateShipmentZC",
			Handler:    _ManagerService_CreateShipmentZC_Handler,
		},
		{
			MethodName: "DeleteShipmentZC",
			Handler:    _ManagerService_DeleteShipmentZC_Handler,
		},
		{
			MethodName: "DetailSupplement",
			Handler:    _ManagerService_DetailSupplement_Handler,
		},
		{
			MethodName: "DetailPlanList",
			Handler:    _ManagerService_DetailPlanList_Handler,
		},
		{
			MethodName: "ContractCreate",
			Handler:    _ManagerService_ContractCreate_Handler,
		},
		{
			MethodName: "ContractRemove",
			Handler:    _ManagerService_ContractRemove_Handler,
		},
		{
			MethodName: "ContractStop",
			Handler:    _ManagerService_ContractStop_Handler,
		},
		{
			MethodName: "ContractEdit",
			Handler:    _ManagerService_ContractEdit_Handler,
		},
		{
			MethodName: "ListContract",
			Handler:    _ManagerService_ListContract_Handler,
		},
		{
			MethodName: "ListMiContract",
			Handler:    _ManagerService_ListMiContract_Handler,
		},
		{
			MethodName: "CreateOneContractMI",
			Handler:    _ManagerService_CreateOneContractMI_Handler,
		},
		{
			MethodName: "UpdateOneContractMI",
			Handler:    _ManagerService_UpdateOneContractMI_Handler,
		},
		{
			MethodName: "UpdateOneContract",
			Handler:    _ManagerService_UpdateOneContract_Handler,
		},
		{
			MethodName: "BatchOperateContract",
			Handler:    _ManagerService_BatchOperateContract_Handler,
		},
		{
			MethodName: "UpdateContractActive",
			Handler:    _ManagerService_UpdateContractActive_Handler,
		},
		{
			MethodName: "DeleteOneContract",
			Handler:    _ManagerService_DeleteOneContract_Handler,
		},
		{
			MethodName: "DeleteOneContractMi",
			Handler:    _ManagerService_DeleteOneContractMi_Handler,
		},
		{
			MethodName: "GetContractInfo",
			Handler:    _ManagerService_GetContractInfo_Handler,
		},
		{
			MethodName: "CountContract",
			Handler:    _ManagerService_CountContract_Handler,
		},
		{
			MethodName: "RefreshContract",
			Handler:    _ManagerService_RefreshContract_Handler,
		},
		{
			MethodName: "ResetContract",
			Handler:    _ManagerService_ResetContract_Handler,
		},
		{
			MethodName: "ContractDetail",
			Handler:    _ManagerService_ContractDetail_Handler,
		},
		{
			MethodName: "CheckContractList",
			Handler:    _ManagerService_CheckContractList_Handler,
		},
		{
			MethodName: "ListMedicine",
			Handler:    _ManagerService_ListMedicine_Handler,
		},
		{
			MethodName: "MedicineListForQuery",
			Handler:    _ManagerService_MedicineListForQuery_Handler,
		},
		{
			MethodName: "CreateMedicine",
			Handler:    _ManagerService_CreateMedicine_Handler,
		},
		{
			MethodName: "CreateBatchMedicine",
			Handler:    _ManagerService_CreateBatchMedicine_Handler,
		},
		{
			MethodName: "UpdateMedicine",
			Handler:    _ManagerService_UpdateMedicine_Handler,
		},
		{
			MethodName: "UpdateMedicineActive",
			Handler:    _ManagerService_UpdateMedicineActive_Handler,
		},
		{
			MethodName: "DeleteMedicine",
			Handler:    _ManagerService_DeleteMedicine_Handler,
		},
		{
			MethodName: "SelectTagByMedicineId",
			Handler:    _ManagerService_SelectTagByMedicineId_Handler,
		},
		{
			MethodName: "SelectInfoByMedicineNames",
			Handler:    _ManagerService_SelectInfoByMedicineNames_Handler,
		},
		{
			MethodName: "TagList",
			Handler:    _ManagerService_TagList_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _ManagerService_CreateTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _ManagerService_UpdateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _ManagerService_DeleteTag_Handler,
		},
		{
			MethodName: "TagDetailList",
			Handler:    _ManagerService_TagDetailList_Handler,
		},
		{
			MethodName: "DeleteTagMedicine",
			Handler:    _ManagerService_DeleteTagMedicine_Handler,
		},
		{
			MethodName: "CreateTagMedicine",
			Handler:    _ManagerService_CreateTagMedicine_Handler,
		},
		{
			MethodName: "CommonMedicineQuery",
			Handler:    _ManagerService_CommonMedicineQuery_Handler,
		},
		{
			MethodName: "ListMi",
			Handler:    _ManagerService_ListMi_Handler,
		},
		{
			MethodName: "CommonMI",
			Handler:    _ManagerService_CommonMI_Handler,
		},
		{
			MethodName: "CreateOneMI",
			Handler:    _ManagerService_CreateOneMI_Handler,
		},
		{
			MethodName: "UpdateMi",
			Handler:    _ManagerService_UpdateMi_Handler,
		},
		{
			MethodName: "ListCompany",
			Handler:    _ManagerService_ListCompany_Handler,
		},
		{
			MethodName: "CreateOneCompany",
			Handler:    _ManagerService_CreateOneCompany_Handler,
		},
		{
			MethodName: "UpdateOneCompany",
			Handler:    _ManagerService_UpdateOneCompany_Handler,
		},
		{
			MethodName: "CommonCompany",
			Handler:    _ManagerService_CommonCompany_Handler,
		},
		{
			MethodName: "SelCompanyByNames",
			Handler:    _ManagerService_SelCompanyByNames_Handler,
		},
		{
			MethodName: "ListTpPlanErr",
			Handler:    _ManagerService_ListTpPlanErr_Handler,
		},
		{
			MethodName: "UpdateErrShipmentPlan",
			Handler:    _ManagerService_UpdateErrShipmentPlan_Handler,
		},
		{
			MethodName: "ListShipmentPlan",
			Handler:    _ManagerService_ListShipmentPlan_Handler,
		},
		{
			MethodName: "CountShipmentPlan",
			Handler:    _ManagerService_CountShipmentPlan_Handler,
		},
		{
			MethodName: "DetailShipmentOrder",
			Handler:    _ManagerService_DetailShipmentOrder_Handler,
		},
		{
			MethodName: "ListShipmentPlanForOrder",
			Handler:    _ManagerService_ListShipmentPlanForOrder_Handler,
		},
		{
			MethodName: "CreateShipmentOrder",
			Handler:    _ManagerService_CreateShipmentOrder_Handler,
		},
		{
			MethodName: "ListShipmentOrder",
			Handler:    _ManagerService_ListShipmentOrder_Handler,
		},
		{
			MethodName: "CountShipmentOrder",
			Handler:    _ManagerService_CountShipmentOrder_Handler,
		},
		{
			MethodName: "ReceiveShipmentOrder",
			Handler:    _ManagerService_ReceiveShipmentOrder_Handler,
		},
		{
			MethodName: "GetContractByShipmentPlanId",
			Handler:    _ManagerService_GetContractByShipmentPlanId_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ManagerService_GetConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _ManagerService_UpdateConfig_Handler,
		},
		{
			MethodName: "InsertConfigs",
			Handler:    _ManagerService_InsertConfigs_Handler,
		},
		{
			MethodName: "DeleteConfigs",
			Handler:    _ManagerService_DeleteConfigs_Handler,
		},
		{
			MethodName: "ListCompanyBind",
			Handler:    _ManagerService_ListCompanyBind_Handler,
		},
		{
			MethodName: "CompanyBind",
			Handler:    _ManagerService_CompanyBind_Handler,
		},
		{
			MethodName: "ListMiBind",
			Handler:    _ManagerService_ListMiBind_Handler,
		},
		{
			MethodName: "MiBind",
			Handler:    _ManagerService_MiBind_Handler,
		},
		{
			MethodName: "ListMedicineBind",
			Handler:    _ManagerService_ListMedicineBind_Handler,
		},
		{
			MethodName: "MedicineBind",
			Handler:    _ManagerService_MedicineBind_Handler,
		},
		{
			MethodName: "ListContractsByMiContractIds",
			Handler:    _ManagerService_ListContractsByMiContractIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ManagerService.proto",
}

// StockServiceClient is the client API for StockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StockServiceClient interface {
	//库存数据上报
	StockSync(ctx context.Context, in *StockSyncReq, opts ...grpc.CallOption) (*StockSyncResp, error)
	//配送企业药品绑定列表
	ComStockMedicineBindList(ctx context.Context, in *ComStockMedicineBindListReq, opts ...grpc.CallOption) (*ComStockMedicineBindListResp, error)
	//配送企业绑定his药品code
	ComStockMedicineBind(ctx context.Context, in *ComStockMedicineBindReq, opts ...grpc.CallOption) (*ComStockMedicineBindResp, error)
	//医疗机构药品绑定列表
	MiStockMedicineBindList(ctx context.Context, in *MiStockMedicineBindListReq, opts ...grpc.CallOption) (*MiStockMedicineBindListResp, error)
	//医疗机构绑定his药品code
	MiStockMedicineBind(ctx context.Context, in *MiStockMedicineBindReq, opts ...grpc.CallOption) (*MiStockMedicineBindResp, error)
	//库存列表展示
	StockList(ctx context.Context, in *StockListReq, opts ...grpc.CallOption) (*StockListResp, error)
}

type stockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockServiceClient(cc grpc.ClientConnInterface) StockServiceClient {
	return &stockServiceClient{cc}
}

func (c *stockServiceClient) StockSync(ctx context.Context, in *StockSyncReq, opts ...grpc.CallOption) (*StockSyncResp, error) {
	out := new(StockSyncResp)
	err := c.cc.Invoke(ctx, "/ManagerService.StockService/StockSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) ComStockMedicineBindList(ctx context.Context, in *ComStockMedicineBindListReq, opts ...grpc.CallOption) (*ComStockMedicineBindListResp, error) {
	out := new(ComStockMedicineBindListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.StockService/ComStockMedicineBindList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) ComStockMedicineBind(ctx context.Context, in *ComStockMedicineBindReq, opts ...grpc.CallOption) (*ComStockMedicineBindResp, error) {
	out := new(ComStockMedicineBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.StockService/ComStockMedicineBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) MiStockMedicineBindList(ctx context.Context, in *MiStockMedicineBindListReq, opts ...grpc.CallOption) (*MiStockMedicineBindListResp, error) {
	out := new(MiStockMedicineBindListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.StockService/MiStockMedicineBindList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) MiStockMedicineBind(ctx context.Context, in *MiStockMedicineBindReq, opts ...grpc.CallOption) (*MiStockMedicineBindResp, error) {
	out := new(MiStockMedicineBindResp)
	err := c.cc.Invoke(ctx, "/ManagerService.StockService/MiStockMedicineBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) StockList(ctx context.Context, in *StockListReq, opts ...grpc.CallOption) (*StockListResp, error) {
	out := new(StockListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.StockService/StockList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockServiceServer is the server API for StockService service.
type StockServiceServer interface {
	//库存数据上报
	StockSync(context.Context, *StockSyncReq) (*StockSyncResp, error)
	//配送企业药品绑定列表
	ComStockMedicineBindList(context.Context, *ComStockMedicineBindListReq) (*ComStockMedicineBindListResp, error)
	//配送企业绑定his药品code
	ComStockMedicineBind(context.Context, *ComStockMedicineBindReq) (*ComStockMedicineBindResp, error)
	//医疗机构药品绑定列表
	MiStockMedicineBindList(context.Context, *MiStockMedicineBindListReq) (*MiStockMedicineBindListResp, error)
	//医疗机构绑定his药品code
	MiStockMedicineBind(context.Context, *MiStockMedicineBindReq) (*MiStockMedicineBindResp, error)
	//库存列表展示
	StockList(context.Context, *StockListReq) (*StockListResp, error)
}

// UnimplementedStockServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStockServiceServer struct {
}

func (*UnimplementedStockServiceServer) StockSync(context.Context, *StockSyncReq) (*StockSyncResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockSync not implemented")
}
func (*UnimplementedStockServiceServer) ComStockMedicineBindList(context.Context, *ComStockMedicineBindListReq) (*ComStockMedicineBindListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComStockMedicineBindList not implemented")
}
func (*UnimplementedStockServiceServer) ComStockMedicineBind(context.Context, *ComStockMedicineBindReq) (*ComStockMedicineBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComStockMedicineBind not implemented")
}
func (*UnimplementedStockServiceServer) MiStockMedicineBindList(context.Context, *MiStockMedicineBindListReq) (*MiStockMedicineBindListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiStockMedicineBindList not implemented")
}
func (*UnimplementedStockServiceServer) MiStockMedicineBind(context.Context, *MiStockMedicineBindReq) (*MiStockMedicineBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiStockMedicineBind not implemented")
}
func (*UnimplementedStockServiceServer) StockList(context.Context, *StockListReq) (*StockListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockList not implemented")
}

func RegisterStockServiceServer(s *grpc.Server, srv StockServiceServer) {
	s.RegisterService(&_StockService_serviceDesc, srv)
}

func _StockService_StockSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockSyncReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).StockSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.StockService/StockSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).StockSync(ctx, req.(*StockSyncReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_ComStockMedicineBindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComStockMedicineBindListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).ComStockMedicineBindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.StockService/ComStockMedicineBindList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).ComStockMedicineBindList(ctx, req.(*ComStockMedicineBindListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_ComStockMedicineBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComStockMedicineBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).ComStockMedicineBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.StockService/ComStockMedicineBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).ComStockMedicineBind(ctx, req.(*ComStockMedicineBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_MiStockMedicineBindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiStockMedicineBindListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).MiStockMedicineBindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.StockService/MiStockMedicineBindList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).MiStockMedicineBindList(ctx, req.(*MiStockMedicineBindListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_MiStockMedicineBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiStockMedicineBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).MiStockMedicineBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.StockService/MiStockMedicineBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).MiStockMedicineBind(ctx, req.(*MiStockMedicineBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_StockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).StockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.StockService/StockList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).StockList(ctx, req.(*StockListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _StockService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerService.StockService",
	HandlerType: (*StockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StockSync",
			Handler:    _StockService_StockSync_Handler,
		},
		{
			MethodName: "ComStockMedicineBindList",
			Handler:    _StockService_ComStockMedicineBindList_Handler,
		},
		{
			MethodName: "ComStockMedicineBind",
			Handler:    _StockService_ComStockMedicineBind_Handler,
		},
		{
			MethodName: "MiStockMedicineBindList",
			Handler:    _StockService_MiStockMedicineBindList_Handler,
		},
		{
			MethodName: "MiStockMedicineBind",
			Handler:    _StockService_MiStockMedicineBind_Handler,
		},
		{
			MethodName: "StockList",
			Handler:    _StockService_StockList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ManagerService.proto",
}

// DataReportServiceClient is the client API for DataReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataReportServiceClient interface {
	//查询招采计划 日报数据
	GetShipmentPlanDayReports(ctx context.Context, in *GetShipmentPlanReportsReq, opts ...grpc.CallOption) (*GetShipmentPlanDayReportsResp, error)
	//查询招采计划 月报数据
	GetShipmentPlanMonthReports(ctx context.Context, in *GetShipmentPlanReportsReq, opts ...grpc.CallOption) (*GetShipmentPlanMonthReportsResp, error)
	//查询招采计划 年报数据
	GetShipmentPlanYearReports(ctx context.Context, in *GetShipmentPlanReportsReq, opts ...grpc.CallOption) (*GetShipmentPlanYearReportsResp, error)
	//查询配送单 日报数据
	GetShipmentOrderDayReports(ctx context.Context, in *GetShipmentOrderReportsReq, opts ...grpc.CallOption) (*GetShipmentOrderDayReportsResp, error)
	//查询配送单 月报数据
	GetShipmentOrderMonthReports(ctx context.Context, in *GetShipmentOrderReportsReq, opts ...grpc.CallOption) (*GetShipmentOrderMonthReportsResp, error)
	//查询配送单 年报数据
	GetShipmentOrderYearReports(ctx context.Context, in *GetShipmentOrderReportsReq, opts ...grpc.CallOption) (*GetShipmentOrderYearReportsResp, error)
	//查询保理订单 日报数据
	GetFactoringOrderDayReports(ctx context.Context, in *GetFactoringOrderReportsReq, opts ...grpc.CallOption) (*GetFactoringOrderDayReportsResp, error)
	//查询保理订单 月报数据
	GetFactoringOrderMonthReports(ctx context.Context, in *GetFactoringOrderReportsReq, opts ...grpc.CallOption) (*GetFactoringOrderMonthReportsResp, error)
	//查询保理订单 年报数据
	GetFactoringOrderYearReports(ctx context.Context, in *GetFactoringOrderReportsReq, opts ...grpc.CallOption) (*GetFactoringOrderYearReportsResp, error)
	//查询合同信息 日报数据
	GetContractPlanDayReports(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractPlanDayReportsResp, error)
	//查询合同信息 月报数据
	GetContractPlanMonthReports(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractPlanMonthReportsResp, error)
	//查询合同信息 年报数据
	GetContractPlanYearReports(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractPlanYearReportsResp, error)
	//查询所含条件的合同聚合数据
	GetContractSum(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractSumResp, error)
	//查询某医保局下生效合同的统计数据
	GetValidContractInfo(ctx context.Context, in *GetValidContractInfoReq, opts ...grpc.CallOption) (*GetValidContractInfoResp, error)
	//获取目前的待支付金额
	GetCurrentNeedPay(ctx context.Context, in *GetCurrentNeedPayReq, opts ...grpc.CallOption) (*GetCurrentNeedPayResp, error)
	//获取目前的待审核保理金额
	GetCurrentFactoringApply(ctx context.Context, in *GetCurrentFactoringApplyReq, opts ...grpc.CallOption) (*GetCurrentFactoringApplyResp, error)
}

type dataReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataReportServiceClient(cc grpc.ClientConnInterface) DataReportServiceClient {
	return &dataReportServiceClient{cc}
}

func (c *dataReportServiceClient) GetShipmentPlanDayReports(ctx context.Context, in *GetShipmentPlanReportsReq, opts ...grpc.CallOption) (*GetShipmentPlanDayReportsResp, error) {
	out := new(GetShipmentPlanDayReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetShipmentPlanDayReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetShipmentPlanMonthReports(ctx context.Context, in *GetShipmentPlanReportsReq, opts ...grpc.CallOption) (*GetShipmentPlanMonthReportsResp, error) {
	out := new(GetShipmentPlanMonthReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetShipmentPlanMonthReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetShipmentPlanYearReports(ctx context.Context, in *GetShipmentPlanReportsReq, opts ...grpc.CallOption) (*GetShipmentPlanYearReportsResp, error) {
	out := new(GetShipmentPlanYearReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetShipmentPlanYearReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetShipmentOrderDayReports(ctx context.Context, in *GetShipmentOrderReportsReq, opts ...grpc.CallOption) (*GetShipmentOrderDayReportsResp, error) {
	out := new(GetShipmentOrderDayReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetShipmentOrderDayReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetShipmentOrderMonthReports(ctx context.Context, in *GetShipmentOrderReportsReq, opts ...grpc.CallOption) (*GetShipmentOrderMonthReportsResp, error) {
	out := new(GetShipmentOrderMonthReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetShipmentOrderMonthReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetShipmentOrderYearReports(ctx context.Context, in *GetShipmentOrderReportsReq, opts ...grpc.CallOption) (*GetShipmentOrderYearReportsResp, error) {
	out := new(GetShipmentOrderYearReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetShipmentOrderYearReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetFactoringOrderDayReports(ctx context.Context, in *GetFactoringOrderReportsReq, opts ...grpc.CallOption) (*GetFactoringOrderDayReportsResp, error) {
	out := new(GetFactoringOrderDayReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetFactoringOrderDayReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetFactoringOrderMonthReports(ctx context.Context, in *GetFactoringOrderReportsReq, opts ...grpc.CallOption) (*GetFactoringOrderMonthReportsResp, error) {
	out := new(GetFactoringOrderMonthReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetFactoringOrderMonthReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetFactoringOrderYearReports(ctx context.Context, in *GetFactoringOrderReportsReq, opts ...grpc.CallOption) (*GetFactoringOrderYearReportsResp, error) {
	out := new(GetFactoringOrderYearReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetFactoringOrderYearReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetContractPlanDayReports(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractPlanDayReportsResp, error) {
	out := new(GetContractPlanDayReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetContractPlanDayReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetContractPlanMonthReports(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractPlanMonthReportsResp, error) {
	out := new(GetContractPlanMonthReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetContractPlanMonthReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetContractPlanYearReports(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractPlanYearReportsResp, error) {
	out := new(GetContractPlanYearReportsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetContractPlanYearReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetContractSum(ctx context.Context, in *GetContractPlanReportsReq, opts ...grpc.CallOption) (*GetContractSumResp, error) {
	out := new(GetContractSumResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetContractSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetValidContractInfo(ctx context.Context, in *GetValidContractInfoReq, opts ...grpc.CallOption) (*GetValidContractInfoResp, error) {
	out := new(GetValidContractInfoResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetValidContractInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetCurrentNeedPay(ctx context.Context, in *GetCurrentNeedPayReq, opts ...grpc.CallOption) (*GetCurrentNeedPayResp, error) {
	out := new(GetCurrentNeedPayResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetCurrentNeedPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReportServiceClient) GetCurrentFactoringApply(ctx context.Context, in *GetCurrentFactoringApplyReq, opts ...grpc.CallOption) (*GetCurrentFactoringApplyResp, error) {
	out := new(GetCurrentFactoringApplyResp)
	err := c.cc.Invoke(ctx, "/ManagerService.DataReportService/GetCurrentFactoringApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataReportServiceServer is the server API for DataReportService service.
type DataReportServiceServer interface {
	//查询招采计划 日报数据
	GetShipmentPlanDayReports(context.Context, *GetShipmentPlanReportsReq) (*GetShipmentPlanDayReportsResp, error)
	//查询招采计划 月报数据
	GetShipmentPlanMonthReports(context.Context, *GetShipmentPlanReportsReq) (*GetShipmentPlanMonthReportsResp, error)
	//查询招采计划 年报数据
	GetShipmentPlanYearReports(context.Context, *GetShipmentPlanReportsReq) (*GetShipmentPlanYearReportsResp, error)
	//查询配送单 日报数据
	GetShipmentOrderDayReports(context.Context, *GetShipmentOrderReportsReq) (*GetShipmentOrderDayReportsResp, error)
	//查询配送单 月报数据
	GetShipmentOrderMonthReports(context.Context, *GetShipmentOrderReportsReq) (*GetShipmentOrderMonthReportsResp, error)
	//查询配送单 年报数据
	GetShipmentOrderYearReports(context.Context, *GetShipmentOrderReportsReq) (*GetShipmentOrderYearReportsResp, error)
	//查询保理订单 日报数据
	GetFactoringOrderDayReports(context.Context, *GetFactoringOrderReportsReq) (*GetFactoringOrderDayReportsResp, error)
	//查询保理订单 月报数据
	GetFactoringOrderMonthReports(context.Context, *GetFactoringOrderReportsReq) (*GetFactoringOrderMonthReportsResp, error)
	//查询保理订单 年报数据
	GetFactoringOrderYearReports(context.Context, *GetFactoringOrderReportsReq) (*GetFactoringOrderYearReportsResp, error)
	//查询合同信息 日报数据
	GetContractPlanDayReports(context.Context, *GetContractPlanReportsReq) (*GetContractPlanDayReportsResp, error)
	//查询合同信息 月报数据
	GetContractPlanMonthReports(context.Context, *GetContractPlanReportsReq) (*GetContractPlanMonthReportsResp, error)
	//查询合同信息 年报数据
	GetContractPlanYearReports(context.Context, *GetContractPlanReportsReq) (*GetContractPlanYearReportsResp, error)
	//查询所含条件的合同聚合数据
	GetContractSum(context.Context, *GetContractPlanReportsReq) (*GetContractSumResp, error)
	//查询某医保局下生效合同的统计数据
	GetValidContractInfo(context.Context, *GetValidContractInfoReq) (*GetValidContractInfoResp, error)
	//获取目前的待支付金额
	GetCurrentNeedPay(context.Context, *GetCurrentNeedPayReq) (*GetCurrentNeedPayResp, error)
	//获取目前的待审核保理金额
	GetCurrentFactoringApply(context.Context, *GetCurrentFactoringApplyReq) (*GetCurrentFactoringApplyResp, error)
}

// UnimplementedDataReportServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDataReportServiceServer struct {
}

func (*UnimplementedDataReportServiceServer) GetShipmentPlanDayReports(context.Context, *GetShipmentPlanReportsReq) (*GetShipmentPlanDayReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentPlanDayReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetShipmentPlanMonthReports(context.Context, *GetShipmentPlanReportsReq) (*GetShipmentPlanMonthReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentPlanMonthReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetShipmentPlanYearReports(context.Context, *GetShipmentPlanReportsReq) (*GetShipmentPlanYearReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentPlanYearReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetShipmentOrderDayReports(context.Context, *GetShipmentOrderReportsReq) (*GetShipmentOrderDayReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentOrderDayReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetShipmentOrderMonthReports(context.Context, *GetShipmentOrderReportsReq) (*GetShipmentOrderMonthReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentOrderMonthReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetShipmentOrderYearReports(context.Context, *GetShipmentOrderReportsReq) (*GetShipmentOrderYearReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentOrderYearReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetFactoringOrderDayReports(context.Context, *GetFactoringOrderReportsReq) (*GetFactoringOrderDayReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFactoringOrderDayReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetFactoringOrderMonthReports(context.Context, *GetFactoringOrderReportsReq) (*GetFactoringOrderMonthReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFactoringOrderMonthReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetFactoringOrderYearReports(context.Context, *GetFactoringOrderReportsReq) (*GetFactoringOrderYearReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFactoringOrderYearReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetContractPlanDayReports(context.Context, *GetContractPlanReportsReq) (*GetContractPlanDayReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractPlanDayReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetContractPlanMonthReports(context.Context, *GetContractPlanReportsReq) (*GetContractPlanMonthReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractPlanMonthReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetContractPlanYearReports(context.Context, *GetContractPlanReportsReq) (*GetContractPlanYearReportsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractPlanYearReports not implemented")
}
func (*UnimplementedDataReportServiceServer) GetContractSum(context.Context, *GetContractPlanReportsReq) (*GetContractSumResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractSum not implemented")
}
func (*UnimplementedDataReportServiceServer) GetValidContractInfo(context.Context, *GetValidContractInfoReq) (*GetValidContractInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidContractInfo not implemented")
}
func (*UnimplementedDataReportServiceServer) GetCurrentNeedPay(context.Context, *GetCurrentNeedPayReq) (*GetCurrentNeedPayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentNeedPay not implemented")
}
func (*UnimplementedDataReportServiceServer) GetCurrentFactoringApply(context.Context, *GetCurrentFactoringApplyReq) (*GetCurrentFactoringApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentFactoringApply not implemented")
}

func RegisterDataReportServiceServer(s *grpc.Server, srv DataReportServiceServer) {
	s.RegisterService(&_DataReportService_serviceDesc, srv)
}

func _DataReportService_GetShipmentPlanDayReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentPlanReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetShipmentPlanDayReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetShipmentPlanDayReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetShipmentPlanDayReports(ctx, req.(*GetShipmentPlanReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetShipmentPlanMonthReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentPlanReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetShipmentPlanMonthReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetShipmentPlanMonthReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetShipmentPlanMonthReports(ctx, req.(*GetShipmentPlanReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetShipmentPlanYearReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentPlanReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetShipmentPlanYearReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetShipmentPlanYearReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetShipmentPlanYearReports(ctx, req.(*GetShipmentPlanReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetShipmentOrderDayReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentOrderReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetShipmentOrderDayReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetShipmentOrderDayReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetShipmentOrderDayReports(ctx, req.(*GetShipmentOrderReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetShipmentOrderMonthReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentOrderReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetShipmentOrderMonthReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetShipmentOrderMonthReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetShipmentOrderMonthReports(ctx, req.(*GetShipmentOrderReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetShipmentOrderYearReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentOrderReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetShipmentOrderYearReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetShipmentOrderYearReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetShipmentOrderYearReports(ctx, req.(*GetShipmentOrderReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetFactoringOrderDayReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFactoringOrderReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetFactoringOrderDayReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetFactoringOrderDayReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetFactoringOrderDayReports(ctx, req.(*GetFactoringOrderReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetFactoringOrderMonthReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFactoringOrderReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetFactoringOrderMonthReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetFactoringOrderMonthReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetFactoringOrderMonthReports(ctx, req.(*GetFactoringOrderReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetFactoringOrderYearReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFactoringOrderReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetFactoringOrderYearReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetFactoringOrderYearReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetFactoringOrderYearReports(ctx, req.(*GetFactoringOrderReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetContractPlanDayReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractPlanReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetContractPlanDayReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetContractPlanDayReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetContractPlanDayReports(ctx, req.(*GetContractPlanReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetContractPlanMonthReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractPlanReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetContractPlanMonthReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetContractPlanMonthReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetContractPlanMonthReports(ctx, req.(*GetContractPlanReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetContractPlanYearReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractPlanReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetContractPlanYearReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetContractPlanYearReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetContractPlanYearReports(ctx, req.(*GetContractPlanReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetContractSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractPlanReportsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetContractSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetContractSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetContractSum(ctx, req.(*GetContractPlanReportsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetValidContractInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValidContractInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetValidContractInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetValidContractInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetValidContractInfo(ctx, req.(*GetValidContractInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetCurrentNeedPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentNeedPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetCurrentNeedPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetCurrentNeedPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetCurrentNeedPay(ctx, req.(*GetCurrentNeedPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReportService_GetCurrentFactoringApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentFactoringApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReportServiceServer).GetCurrentFactoringApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.DataReportService/GetCurrentFactoringApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReportServiceServer).GetCurrentFactoringApply(ctx, req.(*GetCurrentFactoringApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataReportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerService.DataReportService",
	HandlerType: (*DataReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShipmentPlanDayReports",
			Handler:    _DataReportService_GetShipmentPlanDayReports_Handler,
		},
		{
			MethodName: "GetShipmentPlanMonthReports",
			Handler:    _DataReportService_GetShipmentPlanMonthReports_Handler,
		},
		{
			MethodName: "GetShipmentPlanYearReports",
			Handler:    _DataReportService_GetShipmentPlanYearReports_Handler,
		},
		{
			MethodName: "GetShipmentOrderDayReports",
			Handler:    _DataReportService_GetShipmentOrderDayReports_Handler,
		},
		{
			MethodName: "GetShipmentOrderMonthReports",
			Handler:    _DataReportService_GetShipmentOrderMonthReports_Handler,
		},
		{
			MethodName: "GetShipmentOrderYearReports",
			Handler:    _DataReportService_GetShipmentOrderYearReports_Handler,
		},
		{
			MethodName: "GetFactoringOrderDayReports",
			Handler:    _DataReportService_GetFactoringOrderDayReports_Handler,
		},
		{
			MethodName: "GetFactoringOrderMonthReports",
			Handler:    _DataReportService_GetFactoringOrderMonthReports_Handler,
		},
		{
			MethodName: "GetFactoringOrderYearReports",
			Handler:    _DataReportService_GetFactoringOrderYearReports_Handler,
		},
		{
			MethodName: "GetContractPlanDayReports",
			Handler:    _DataReportService_GetContractPlanDayReports_Handler,
		},
		{
			MethodName: "GetContractPlanMonthReports",
			Handler:    _DataReportService_GetContractPlanMonthReports_Handler,
		},
		{
			MethodName: "GetContractPlanYearReports",
			Handler:    _DataReportService_GetContractPlanYearReports_Handler,
		},
		{
			MethodName: "GetContractSum",
			Handler:    _DataReportService_GetContractSum_Handler,
		},
		{
			MethodName: "GetValidContractInfo",
			Handler:    _DataReportService_GetValidContractInfo_Handler,
		},
		{
			MethodName: "GetCurrentNeedPay",
			Handler:    _DataReportService_GetCurrentNeedPay_Handler,
		},
		{
			MethodName: "GetCurrentFactoringApply",
			Handler:    _DataReportService_GetCurrentFactoringApply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ManagerService.proto",
}

// HashServiceClient is the client API for HashService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HashServiceClient interface {
	//hash模块
	GetCompanyHash(ctx context.Context, in *GetCompanyHashReq, opts ...grpc.CallOption) (*GetCompanyHashResp, error)
	GetMiHash(ctx context.Context, in *GetMiHashReq, opts ...grpc.CallOption) (*GetMiHashResp, error)
	GetMedicineHash(ctx context.Context, in *GetMedicineReq, opts ...grpc.CallOption) (*GetMedicineResp, error)
	GetContractHash(ctx context.Context, in *GetContractHashReq, opts ...grpc.CallOption) (*GetContractHashResp, error)
	GetContractMiHash(ctx context.Context, in *GetContractMiHashReq, opts ...grpc.CallOption) (*GetContractMiHashResp, error)
	GetConfigHash(ctx context.Context, in *GetConfigHashReq, opts ...grpc.CallOption) (*GetConfigHashResp, error)
	GetShipmentPlanHash(ctx context.Context, in *GetShipmentPlanHashReq, opts ...grpc.CallOption) (*GetShipmentPlanHashResp, error)
	GetShipmentOrderHash(ctx context.Context, in *GetShipmentOrderHashReq, opts ...grpc.CallOption) (*GetShipmentOrderHashResp, error)
	GetShipmentPayHash(ctx context.Context, in *GetShipmentPayHashReq, opts ...grpc.CallOption) (*GetShipmentPayHashResp, error)
	GetShipmentFactoringHash(ctx context.Context, in *GetShipmentFactoringHashReq, opts ...grpc.CallOption) (*GetShipmentFactoringHashResp, error)
	GetMessageHash(ctx context.Context, in *ListMessageHashReq, opts ...grpc.CallOption) (*ListMessageHashResp, error)
	GetCommonInfoHash(ctx context.Context, in *GetInfoHashReq, opts ...grpc.CallOption) (*GetInfoHashRsp, error)
	GetFactoringAgreerefHash(ctx context.Context, in *GetFactoringAgreerefHashReq, opts ...grpc.CallOption) (*GetFactoringAgreerefHashResp, error)
}

type hashServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHashServiceClient(cc grpc.ClientConnInterface) HashServiceClient {
	return &hashServiceClient{cc}
}

func (c *hashServiceClient) GetCompanyHash(ctx context.Context, in *GetCompanyHashReq, opts ...grpc.CallOption) (*GetCompanyHashResp, error) {
	out := new(GetCompanyHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetCompanyHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetMiHash(ctx context.Context, in *GetMiHashReq, opts ...grpc.CallOption) (*GetMiHashResp, error) {
	out := new(GetMiHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetMiHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetMedicineHash(ctx context.Context, in *GetMedicineReq, opts ...grpc.CallOption) (*GetMedicineResp, error) {
	out := new(GetMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetMedicineHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetContractHash(ctx context.Context, in *GetContractHashReq, opts ...grpc.CallOption) (*GetContractHashResp, error) {
	out := new(GetContractHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetContractHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetContractMiHash(ctx context.Context, in *GetContractMiHashReq, opts ...grpc.CallOption) (*GetContractMiHashResp, error) {
	out := new(GetContractMiHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetContractMiHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetConfigHash(ctx context.Context, in *GetConfigHashReq, opts ...grpc.CallOption) (*GetConfigHashResp, error) {
	out := new(GetConfigHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetConfigHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetShipmentPlanHash(ctx context.Context, in *GetShipmentPlanHashReq, opts ...grpc.CallOption) (*GetShipmentPlanHashResp, error) {
	out := new(GetShipmentPlanHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetShipmentPlanHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetShipmentOrderHash(ctx context.Context, in *GetShipmentOrderHashReq, opts ...grpc.CallOption) (*GetShipmentOrderHashResp, error) {
	out := new(GetShipmentOrderHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetShipmentOrderHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetShipmentPayHash(ctx context.Context, in *GetShipmentPayHashReq, opts ...grpc.CallOption) (*GetShipmentPayHashResp, error) {
	out := new(GetShipmentPayHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetShipmentPayHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetShipmentFactoringHash(ctx context.Context, in *GetShipmentFactoringHashReq, opts ...grpc.CallOption) (*GetShipmentFactoringHashResp, error) {
	out := new(GetShipmentFactoringHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetShipmentFactoringHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetMessageHash(ctx context.Context, in *ListMessageHashReq, opts ...grpc.CallOption) (*ListMessageHashResp, error) {
	out := new(ListMessageHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetMessageHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetCommonInfoHash(ctx context.Context, in *GetInfoHashReq, opts ...grpc.CallOption) (*GetInfoHashRsp, error) {
	out := new(GetInfoHashRsp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetCommonInfoHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashServiceClient) GetFactoringAgreerefHash(ctx context.Context, in *GetFactoringAgreerefHashReq, opts ...grpc.CallOption) (*GetFactoringAgreerefHashResp, error) {
	out := new(GetFactoringAgreerefHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.HashService/GetFactoringAgreerefHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashServiceServer is the server API for HashService service.
type HashServiceServer interface {
	//hash模块
	GetCompanyHash(context.Context, *GetCompanyHashReq) (*GetCompanyHashResp, error)
	GetMiHash(context.Context, *GetMiHashReq) (*GetMiHashResp, error)
	GetMedicineHash(context.Context, *GetMedicineReq) (*GetMedicineResp, error)
	GetContractHash(context.Context, *GetContractHashReq) (*GetContractHashResp, error)
	GetContractMiHash(context.Context, *GetContractMiHashReq) (*GetContractMiHashResp, error)
	GetConfigHash(context.Context, *GetConfigHashReq) (*GetConfigHashResp, error)
	GetShipmentPlanHash(context.Context, *GetShipmentPlanHashReq) (*GetShipmentPlanHashResp, error)
	GetShipmentOrderHash(context.Context, *GetShipmentOrderHashReq) (*GetShipmentOrderHashResp, error)
	GetShipmentPayHash(context.Context, *GetShipmentPayHashReq) (*GetShipmentPayHashResp, error)
	GetShipmentFactoringHash(context.Context, *GetShipmentFactoringHashReq) (*GetShipmentFactoringHashResp, error)
	GetMessageHash(context.Context, *ListMessageHashReq) (*ListMessageHashResp, error)
	GetCommonInfoHash(context.Context, *GetInfoHashReq) (*GetInfoHashRsp, error)
	GetFactoringAgreerefHash(context.Context, *GetFactoringAgreerefHashReq) (*GetFactoringAgreerefHashResp, error)
}

// UnimplementedHashServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHashServiceServer struct {
}

func (*UnimplementedHashServiceServer) GetCompanyHash(context.Context, *GetCompanyHashReq) (*GetCompanyHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyHash not implemented")
}
func (*UnimplementedHashServiceServer) GetMiHash(context.Context, *GetMiHashReq) (*GetMiHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMiHash not implemented")
}
func (*UnimplementedHashServiceServer) GetMedicineHash(context.Context, *GetMedicineReq) (*GetMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicineHash not implemented")
}
func (*UnimplementedHashServiceServer) GetContractHash(context.Context, *GetContractHashReq) (*GetContractHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractHash not implemented")
}
func (*UnimplementedHashServiceServer) GetContractMiHash(context.Context, *GetContractMiHashReq) (*GetContractMiHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractMiHash not implemented")
}
func (*UnimplementedHashServiceServer) GetConfigHash(context.Context, *GetConfigHashReq) (*GetConfigHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigHash not implemented")
}
func (*UnimplementedHashServiceServer) GetShipmentPlanHash(context.Context, *GetShipmentPlanHashReq) (*GetShipmentPlanHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentPlanHash not implemented")
}
func (*UnimplementedHashServiceServer) GetShipmentOrderHash(context.Context, *GetShipmentOrderHashReq) (*GetShipmentOrderHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentOrderHash not implemented")
}
func (*UnimplementedHashServiceServer) GetShipmentPayHash(context.Context, *GetShipmentPayHashReq) (*GetShipmentPayHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentPayHash not implemented")
}
func (*UnimplementedHashServiceServer) GetShipmentFactoringHash(context.Context, *GetShipmentFactoringHashReq) (*GetShipmentFactoringHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentFactoringHash not implemented")
}
func (*UnimplementedHashServiceServer) GetMessageHash(context.Context, *ListMessageHashReq) (*ListMessageHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageHash not implemented")
}
func (*UnimplementedHashServiceServer) GetCommonInfoHash(context.Context, *GetInfoHashReq) (*GetInfoHashRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommonInfoHash not implemented")
}
func (*UnimplementedHashServiceServer) GetFactoringAgreerefHash(context.Context, *GetFactoringAgreerefHashReq) (*GetFactoringAgreerefHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFactoringAgreerefHash not implemented")
}

func RegisterHashServiceServer(s *grpc.Server, srv HashServiceServer) {
	s.RegisterService(&_HashService_serviceDesc, srv)
}

func _HashService_GetCompanyHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetCompanyHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetCompanyHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetCompanyHash(ctx, req.(*GetCompanyHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetMiHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMiHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetMiHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetMiHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetMiHash(ctx, req.(*GetMiHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetMedicineHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetMedicineHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetMedicineHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetMedicineHash(ctx, req.(*GetMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetContractHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetContractHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetContractHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetContractHash(ctx, req.(*GetContractHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetContractMiHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractMiHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetContractMiHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetContractMiHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetContractMiHash(ctx, req.(*GetContractMiHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetConfigHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetConfigHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetConfigHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetConfigHash(ctx, req.(*GetConfigHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetShipmentPlanHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentPlanHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetShipmentPlanHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetShipmentPlanHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetShipmentPlanHash(ctx, req.(*GetShipmentPlanHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetShipmentOrderHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentOrderHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetShipmentOrderHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetShipmentOrderHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetShipmentOrderHash(ctx, req.(*GetShipmentOrderHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetShipmentPayHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentPayHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetShipmentPayHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetShipmentPayHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetShipmentPayHash(ctx, req.(*GetShipmentPayHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetShipmentFactoringHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentFactoringHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetShipmentFactoringHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetShipmentFactoringHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetShipmentFactoringHash(ctx, req.(*GetShipmentFactoringHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetMessageHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessageHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetMessageHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetMessageHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetMessageHash(ctx, req.(*ListMessageHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetCommonInfoHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetCommonInfoHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetCommonInfoHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetCommonInfoHash(ctx, req.(*GetInfoHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashService_GetFactoringAgreerefHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFactoringAgreerefHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServiceServer).GetFactoringAgreerefHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.HashService/GetFactoringAgreerefHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServiceServer).GetFactoringAgreerefHash(ctx, req.(*GetFactoringAgreerefHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _HashService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerService.HashService",
	HandlerType: (*HashServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompanyHash",
			Handler:    _HashService_GetCompanyHash_Handler,
		},
		{
			MethodName: "GetMiHash",
			Handler:    _HashService_GetMiHash_Handler,
		},
		{
			MethodName: "GetMedicineHash",
			Handler:    _HashService_GetMedicineHash_Handler,
		},
		{
			MethodName: "GetContractHash",
			Handler:    _HashService_GetContractHash_Handler,
		},
		{
			MethodName: "GetContractMiHash",
			Handler:    _HashService_GetContractMiHash_Handler,
		},
		{
			MethodName: "GetConfigHash",
			Handler:    _HashService_GetConfigHash_Handler,
		},
		{
			MethodName: "GetShipmentPlanHash",
			Handler:    _HashService_GetShipmentPlanHash_Handler,
		},
		{
			MethodName: "GetShipmentOrderHash",
			Handler:    _HashService_GetShipmentOrderHash_Handler,
		},
		{
			MethodName: "GetShipmentPayHash",
			Handler:    _HashService_GetShipmentPayHash_Handler,
		},
		{
			MethodName: "GetShipmentFactoringHash",
			Handler:    _HashService_GetShipmentFactoringHash_Handler,
		},
		{
			MethodName: "GetMessageHash",
			Handler:    _HashService_GetMessageHash_Handler,
		},
		{
			MethodName: "GetCommonInfoHash",
			Handler:    _HashService_GetCommonInfoHash_Handler,
		},
		{
			MethodName: "GetFactoringAgreerefHash",
			Handler:    _HashService_GetFactoringAgreerefHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ManagerService.proto",
}

// RankServiceClient is the client API for RankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RankServiceClient interface {
	// 医疗机构 带量采购排名前十药品
	GetShipmentMedicineRankDataYear(ctx context.Context, in *ShipmentRankDataYearReq, opts ...grpc.CallOption) (*ShipmentMedicineRankDataYearResp, error)
	// 医疗机构 采购金额排名前十的医药企业
	GetShipmentCompanyRankDataYear(ctx context.Context, in *ShipmentRankDataYearReq, opts ...grpc.CallOption) (*ShipmentCompanyRankDataYearResp, error)
	// 医疗机构 招采单物流信息
	GetShipmentLogisticsList(ctx context.Context, in *GetShipmentLogisticsListReq, opts ...grpc.CallOption) (*GetShipmentLogisticsListResp, error)
	//MI端使用按年查询药品履约率排名
	GetShipmentRankMedicineDataYear(ctx context.Context, in *GetShipmentRankMedicineDataYearReq, opts ...grpc.CallOption) (*GetShipmentRankMedicineDataYearResp, error)
	GetShipmentRankCompanyDataYear(ctx context.Context, in *GetShipmentRankCompanyDataYearReq, opts ...grpc.CallOption) (*GetShipmentRankCompanyDataYearResp, error)
	//MIB端使用
	//查询医疗机构采购金额年度排名
	GetRankMiReceiveYear(ctx context.Context, in *GetRankMiReceiveYearReq, opts ...grpc.CallOption) (*GetRankMiReceiveYearResp, error)
	//查询医药企业送达率 年度排名
	GetRankComReceiveYear(ctx context.Context, in *GetRankComReceiveYearReq, opts ...grpc.CallOption) (*GetRankComReceiveYearResp, error)
	//查询医疗机构 主动支付率年度排名
	GetRankMiPaidYear(ctx context.Context, in *GetRankMiPaidYearReq, opts ...grpc.CallOption) (*GetRankMiPaidYearResp, error)
	// 查询药品采购量年度排名
	GetRankMedicineYear(ctx context.Context, in *GetRankMedicineYearReq, opts ...grpc.CallOption) (*GetRankMedicineYearResp, error)
	//  濮阳行政地图此时的数据
	GetMIBDashboardBaseInfo(ctx context.Context, in *GetMIBDashboardBaseInfoReq, opts ...grpc.CallOption) (*GetMIBDashboardBaseInfoResp, error)
}

type rankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRankServiceClient(cc grpc.ClientConnInterface) RankServiceClient {
	return &rankServiceClient{cc}
}

func (c *rankServiceClient) GetShipmentMedicineRankDataYear(ctx context.Context, in *ShipmentRankDataYearReq, opts ...grpc.CallOption) (*ShipmentMedicineRankDataYearResp, error) {
	out := new(ShipmentMedicineRankDataYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetShipmentMedicineRankDataYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetShipmentCompanyRankDataYear(ctx context.Context, in *ShipmentRankDataYearReq, opts ...grpc.CallOption) (*ShipmentCompanyRankDataYearResp, error) {
	out := new(ShipmentCompanyRankDataYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetShipmentCompanyRankDataYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetShipmentLogisticsList(ctx context.Context, in *GetShipmentLogisticsListReq, opts ...grpc.CallOption) (*GetShipmentLogisticsListResp, error) {
	out := new(GetShipmentLogisticsListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetShipmentLogisticsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetShipmentRankMedicineDataYear(ctx context.Context, in *GetShipmentRankMedicineDataYearReq, opts ...grpc.CallOption) (*GetShipmentRankMedicineDataYearResp, error) {
	out := new(GetShipmentRankMedicineDataYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetShipmentRankMedicineDataYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetShipmentRankCompanyDataYear(ctx context.Context, in *GetShipmentRankCompanyDataYearReq, opts ...grpc.CallOption) (*GetShipmentRankCompanyDataYearResp, error) {
	out := new(GetShipmentRankCompanyDataYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetShipmentRankCompanyDataYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetRankMiReceiveYear(ctx context.Context, in *GetRankMiReceiveYearReq, opts ...grpc.CallOption) (*GetRankMiReceiveYearResp, error) {
	out := new(GetRankMiReceiveYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetRankMiReceiveYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetRankComReceiveYear(ctx context.Context, in *GetRankComReceiveYearReq, opts ...grpc.CallOption) (*GetRankComReceiveYearResp, error) {
	out := new(GetRankComReceiveYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetRankComReceiveYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetRankMiPaidYear(ctx context.Context, in *GetRankMiPaidYearReq, opts ...grpc.CallOption) (*GetRankMiPaidYearResp, error) {
	out := new(GetRankMiPaidYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetRankMiPaidYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetRankMedicineYear(ctx context.Context, in *GetRankMedicineYearReq, opts ...grpc.CallOption) (*GetRankMedicineYearResp, error) {
	out := new(GetRankMedicineYearResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetRankMedicineYear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankServiceClient) GetMIBDashboardBaseInfo(ctx context.Context, in *GetMIBDashboardBaseInfoReq, opts ...grpc.CallOption) (*GetMIBDashboardBaseInfoResp, error) {
	out := new(GetMIBDashboardBaseInfoResp)
	err := c.cc.Invoke(ctx, "/ManagerService.RankService/GetMIBDashboardBaseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RankServiceServer is the server API for RankService service.
type RankServiceServer interface {
	// 医疗机构 带量采购排名前十药品
	GetShipmentMedicineRankDataYear(context.Context, *ShipmentRankDataYearReq) (*ShipmentMedicineRankDataYearResp, error)
	// 医疗机构 采购金额排名前十的医药企业
	GetShipmentCompanyRankDataYear(context.Context, *ShipmentRankDataYearReq) (*ShipmentCompanyRankDataYearResp, error)
	// 医疗机构 招采单物流信息
	GetShipmentLogisticsList(context.Context, *GetShipmentLogisticsListReq) (*GetShipmentLogisticsListResp, error)
	//MI端使用按年查询药品履约率排名
	GetShipmentRankMedicineDataYear(context.Context, *GetShipmentRankMedicineDataYearReq) (*GetShipmentRankMedicineDataYearResp, error)
	GetShipmentRankCompanyDataYear(context.Context, *GetShipmentRankCompanyDataYearReq) (*GetShipmentRankCompanyDataYearResp, error)
	//MIB端使用
	//查询医疗机构采购金额年度排名
	GetRankMiReceiveYear(context.Context, *GetRankMiReceiveYearReq) (*GetRankMiReceiveYearResp, error)
	//查询医药企业送达率 年度排名
	GetRankComReceiveYear(context.Context, *GetRankComReceiveYearReq) (*GetRankComReceiveYearResp, error)
	//查询医疗机构 主动支付率年度排名
	GetRankMiPaidYear(context.Context, *GetRankMiPaidYearReq) (*GetRankMiPaidYearResp, error)
	// 查询药品采购量年度排名
	GetRankMedicineYear(context.Context, *GetRankMedicineYearReq) (*GetRankMedicineYearResp, error)
	//  濮阳行政地图此时的数据
	GetMIBDashboardBaseInfo(context.Context, *GetMIBDashboardBaseInfoReq) (*GetMIBDashboardBaseInfoResp, error)
}

// UnimplementedRankServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRankServiceServer struct {
}

func (*UnimplementedRankServiceServer) GetShipmentMedicineRankDataYear(context.Context, *ShipmentRankDataYearReq) (*ShipmentMedicineRankDataYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentMedicineRankDataYear not implemented")
}
func (*UnimplementedRankServiceServer) GetShipmentCompanyRankDataYear(context.Context, *ShipmentRankDataYearReq) (*ShipmentCompanyRankDataYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentCompanyRankDataYear not implemented")
}
func (*UnimplementedRankServiceServer) GetShipmentLogisticsList(context.Context, *GetShipmentLogisticsListReq) (*GetShipmentLogisticsListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentLogisticsList not implemented")
}
func (*UnimplementedRankServiceServer) GetShipmentRankMedicineDataYear(context.Context, *GetShipmentRankMedicineDataYearReq) (*GetShipmentRankMedicineDataYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentRankMedicineDataYear not implemented")
}
func (*UnimplementedRankServiceServer) GetShipmentRankCompanyDataYear(context.Context, *GetShipmentRankCompanyDataYearReq) (*GetShipmentRankCompanyDataYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentRankCompanyDataYear not implemented")
}
func (*UnimplementedRankServiceServer) GetRankMiReceiveYear(context.Context, *GetRankMiReceiveYearReq) (*GetRankMiReceiveYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankMiReceiveYear not implemented")
}
func (*UnimplementedRankServiceServer) GetRankComReceiveYear(context.Context, *GetRankComReceiveYearReq) (*GetRankComReceiveYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankComReceiveYear not implemented")
}
func (*UnimplementedRankServiceServer) GetRankMiPaidYear(context.Context, *GetRankMiPaidYearReq) (*GetRankMiPaidYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankMiPaidYear not implemented")
}
func (*UnimplementedRankServiceServer) GetRankMedicineYear(context.Context, *GetRankMedicineYearReq) (*GetRankMedicineYearResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankMedicineYear not implemented")
}
func (*UnimplementedRankServiceServer) GetMIBDashboardBaseInfo(context.Context, *GetMIBDashboardBaseInfoReq) (*GetMIBDashboardBaseInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMIBDashboardBaseInfo not implemented")
}

func RegisterRankServiceServer(s *grpc.Server, srv RankServiceServer) {
	s.RegisterService(&_RankService_serviceDesc, srv)
}

func _RankService_GetShipmentMedicineRankDataYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShipmentRankDataYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetShipmentMedicineRankDataYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetShipmentMedicineRankDataYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetShipmentMedicineRankDataYear(ctx, req.(*ShipmentRankDataYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetShipmentCompanyRankDataYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShipmentRankDataYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetShipmentCompanyRankDataYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetShipmentCompanyRankDataYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetShipmentCompanyRankDataYear(ctx, req.(*ShipmentRankDataYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetShipmentLogisticsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentLogisticsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetShipmentLogisticsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetShipmentLogisticsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetShipmentLogisticsList(ctx, req.(*GetShipmentLogisticsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetShipmentRankMedicineDataYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentRankMedicineDataYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetShipmentRankMedicineDataYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetShipmentRankMedicineDataYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetShipmentRankMedicineDataYear(ctx, req.(*GetShipmentRankMedicineDataYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetShipmentRankCompanyDataYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentRankCompanyDataYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetShipmentRankCompanyDataYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetShipmentRankCompanyDataYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetShipmentRankCompanyDataYear(ctx, req.(*GetShipmentRankCompanyDataYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetRankMiReceiveYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankMiReceiveYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetRankMiReceiveYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetRankMiReceiveYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetRankMiReceiveYear(ctx, req.(*GetRankMiReceiveYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetRankComReceiveYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankComReceiveYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetRankComReceiveYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetRankComReceiveYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetRankComReceiveYear(ctx, req.(*GetRankComReceiveYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetRankMiPaidYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankMiPaidYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetRankMiPaidYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetRankMiPaidYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetRankMiPaidYear(ctx, req.(*GetRankMiPaidYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetRankMedicineYear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankMedicineYearReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetRankMedicineYear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetRankMedicineYear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetRankMedicineYear(ctx, req.(*GetRankMedicineYearReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RankService_GetMIBDashboardBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMIBDashboardBaseInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankServiceServer).GetMIBDashboardBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.RankService/GetMIBDashboardBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankServiceServer).GetMIBDashboardBaseInfo(ctx, req.(*GetMIBDashboardBaseInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RankService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerService.RankService",
	HandlerType: (*RankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShipmentMedicineRankDataYear",
			Handler:    _RankService_GetShipmentMedicineRankDataYear_Handler,
		},
		{
			MethodName: "GetShipmentCompanyRankDataYear",
			Handler:    _RankService_GetShipmentCompanyRankDataYear_Handler,
		},
		{
			MethodName: "GetShipmentLogisticsList",
			Handler:    _RankService_GetShipmentLogisticsList_Handler,
		},
		{
			MethodName: "GetShipmentRankMedicineDataYear",
			Handler:    _RankService_GetShipmentRankMedicineDataYear_Handler,
		},
		{
			MethodName: "GetShipmentRankCompanyDataYear",
			Handler:    _RankService_GetShipmentRankCompanyDataYear_Handler,
		},
		{
			MethodName: "GetRankMiReceiveYear",
			Handler:    _RankService_GetRankMiReceiveYear_Handler,
		},
		{
			MethodName: "GetRankComReceiveYear",
			Handler:    _RankService_GetRankComReceiveYear_Handler,
		},
		{
			MethodName: "GetRankMiPaidYear",
			Handler:    _RankService_GetRankMiPaidYear_Handler,
		},
		{
			MethodName: "GetRankMedicineYear",
			Handler:    _RankService_GetRankMedicineYear_Handler,
		},
		{
			MethodName: "GetMIBDashboardBaseInfo",
			Handler:    _RankService_GetMIBDashboardBaseInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ManagerService.proto",
}

// ReimbursementSerivceClient is the client API for ReimbursementSerivce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReimbursementSerivceClient interface {
	//报销列表
	List(ctx context.Context, in *ReimbursementListReq, opts ...grpc.CallOption) (*ReimbursementListRes, error)
	//保存审批报表
	UpApprovalFile(ctx context.Context, in *ReimbursementUpApprovalFile, opts ...grpc.CallOption) (*StandardRes, error)
	//保存报销报表
	UpApplyFile(ctx context.Context, in *ReimbursementUpApplyFile, opts ...grpc.CallOption) (*StandardRes, error)
	//设置医院端报销金额
	UpApplyAmount(ctx context.Context, in *ReimbursementUpApplyAmount, opts ...grpc.CallOption) (*StandardRes, error)
	//设置审批金额
	UpApprovalAmount(ctx context.Context, in *ReimbursementUpApprovalAmount, opts ...grpc.CallOption) (*StandardRes, error)
	//设置预期报销金额
	UpExpectApplyAmount(ctx context.Context, in *ReimbursementUpExpectApplyAmount, opts ...grpc.CallOption) (*StandardRes, error)
	//审批报销数据
	Approval(ctx context.Context, in *ReimbursementApproval, opts ...grpc.CallOption) (*StandardRes, error)
}

type reimbursementSerivceClient struct {
	cc grpc.ClientConnInterface
}

func NewReimbursementSerivceClient(cc grpc.ClientConnInterface) ReimbursementSerivceClient {
	return &reimbursementSerivceClient{cc}
}

func (c *reimbursementSerivceClient) List(ctx context.Context, in *ReimbursementListReq, opts ...grpc.CallOption) (*ReimbursementListRes, error) {
	out := new(ReimbursementListRes)
	err := c.cc.Invoke(ctx, "/ManagerService.ReimbursementSerivce/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reimbursementSerivceClient) UpApprovalFile(ctx context.Context, in *ReimbursementUpApprovalFile, opts ...grpc.CallOption) (*StandardRes, error) {
	out := new(StandardRes)
	err := c.cc.Invoke(ctx, "/ManagerService.ReimbursementSerivce/UpApprovalFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reimbursementSerivceClient) UpApplyFile(ctx context.Context, in *ReimbursementUpApplyFile, opts ...grpc.CallOption) (*StandardRes, error) {
	out := new(StandardRes)
	err := c.cc.Invoke(ctx, "/ManagerService.ReimbursementSerivce/UpApplyFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reimbursementSerivceClient) UpApplyAmount(ctx context.Context, in *ReimbursementUpApplyAmount, opts ...grpc.CallOption) (*StandardRes, error) {
	out := new(StandardRes)
	err := c.cc.Invoke(ctx, "/ManagerService.ReimbursementSerivce/UpApplyAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reimbursementSerivceClient) UpApprovalAmount(ctx context.Context, in *ReimbursementUpApprovalAmount, opts ...grpc.CallOption) (*StandardRes, error) {
	out := new(StandardRes)
	err := c.cc.Invoke(ctx, "/ManagerService.ReimbursementSerivce/UpApprovalAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reimbursementSerivceClient) UpExpectApplyAmount(ctx context.Context, in *ReimbursementUpExpectApplyAmount, opts ...grpc.CallOption) (*StandardRes, error) {
	out := new(StandardRes)
	err := c.cc.Invoke(ctx, "/ManagerService.ReimbursementSerivce/UpExpectApplyAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reimbursementSerivceClient) Approval(ctx context.Context, in *ReimbursementApproval, opts ...grpc.CallOption) (*StandardRes, error) {
	out := new(StandardRes)
	err := c.cc.Invoke(ctx, "/ManagerService.ReimbursementSerivce/Approval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReimbursementSerivceServer is the server API for ReimbursementSerivce service.
type ReimbursementSerivceServer interface {
	//报销列表
	List(context.Context, *ReimbursementListReq) (*ReimbursementListRes, error)
	//保存审批报表
	UpApprovalFile(context.Context, *ReimbursementUpApprovalFile) (*StandardRes, error)
	//保存报销报表
	UpApplyFile(context.Context, *ReimbursementUpApplyFile) (*StandardRes, error)
	//设置医院端报销金额
	UpApplyAmount(context.Context, *ReimbursementUpApplyAmount) (*StandardRes, error)
	//设置审批金额
	UpApprovalAmount(context.Context, *ReimbursementUpApprovalAmount) (*StandardRes, error)
	//设置预期报销金额
	UpExpectApplyAmount(context.Context, *ReimbursementUpExpectApplyAmount) (*StandardRes, error)
	//审批报销数据
	Approval(context.Context, *ReimbursementApproval) (*StandardRes, error)
}

// UnimplementedReimbursementSerivceServer can be embedded to have forward compatible implementations.
type UnimplementedReimbursementSerivceServer struct {
}

func (*UnimplementedReimbursementSerivceServer) List(context.Context, *ReimbursementListReq) (*ReimbursementListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedReimbursementSerivceServer) UpApprovalFile(context.Context, *ReimbursementUpApprovalFile) (*StandardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpApprovalFile not implemented")
}
func (*UnimplementedReimbursementSerivceServer) UpApplyFile(context.Context, *ReimbursementUpApplyFile) (*StandardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpApplyFile not implemented")
}
func (*UnimplementedReimbursementSerivceServer) UpApplyAmount(context.Context, *ReimbursementUpApplyAmount) (*StandardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpApplyAmount not implemented")
}
func (*UnimplementedReimbursementSerivceServer) UpApprovalAmount(context.Context, *ReimbursementUpApprovalAmount) (*StandardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpApprovalAmount not implemented")
}
func (*UnimplementedReimbursementSerivceServer) UpExpectApplyAmount(context.Context, *ReimbursementUpExpectApplyAmount) (*StandardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpExpectApplyAmount not implemented")
}
func (*UnimplementedReimbursementSerivceServer) Approval(context.Context, *ReimbursementApproval) (*StandardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approval not implemented")
}

func RegisterReimbursementSerivceServer(s *grpc.Server, srv ReimbursementSerivceServer) {
	s.RegisterService(&_ReimbursementSerivce_serviceDesc, srv)
}

func _ReimbursementSerivce_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReimbursementListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReimbursementSerivceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ReimbursementSerivce/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReimbursementSerivceServer).List(ctx, req.(*ReimbursementListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReimbursementSerivce_UpApprovalFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReimbursementUpApprovalFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReimbursementSerivceServer).UpApprovalFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ReimbursementSerivce/UpApprovalFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReimbursementSerivceServer).UpApprovalFile(ctx, req.(*ReimbursementUpApprovalFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReimbursementSerivce_UpApplyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReimbursementUpApplyFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReimbursementSerivceServer).UpApplyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ReimbursementSerivce/UpApplyFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReimbursementSerivceServer).UpApplyFile(ctx, req.(*ReimbursementUpApplyFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReimbursementSerivce_UpApplyAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReimbursementUpApplyAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReimbursementSerivceServer).UpApplyAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ReimbursementSerivce/UpApplyAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReimbursementSerivceServer).UpApplyAmount(ctx, req.(*ReimbursementUpApplyAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReimbursementSerivce_UpApprovalAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReimbursementUpApprovalAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReimbursementSerivceServer).UpApprovalAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ReimbursementSerivce/UpApprovalAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReimbursementSerivceServer).UpApprovalAmount(ctx, req.(*ReimbursementUpApprovalAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReimbursementSerivce_UpExpectApplyAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReimbursementUpExpectApplyAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReimbursementSerivceServer).UpExpectApplyAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ReimbursementSerivce/UpExpectApplyAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReimbursementSerivceServer).UpExpectApplyAmount(ctx, req.(*ReimbursementUpExpectApplyAmount))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReimbursementSerivce_Approval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReimbursementApproval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReimbursementSerivceServer).Approval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ReimbursementSerivce/Approval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReimbursementSerivceServer).Approval(ctx, req.(*ReimbursementApproval))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReimbursementSerivce_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerService.ReimbursementSerivce",
	HandlerType: (*ReimbursementSerivceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ReimbursementSerivce_List_Handler,
		},
		{
			MethodName: "UpApprovalFile",
			Handler:    _ReimbursementSerivce_UpApprovalFile_Handler,
		},
		{
			MethodName: "UpApplyFile",
			Handler:    _ReimbursementSerivce_UpApplyFile_Handler,
		},
		{
			MethodName: "UpApplyAmount",
			Handler:    _ReimbursementSerivce_UpApplyAmount_Handler,
		},
		{
			MethodName: "UpApprovalAmount",
			Handler:    _ReimbursementSerivce_UpApprovalAmount_Handler,
		},
		{
			MethodName: "UpExpectApplyAmount",
			Handler:    _ReimbursementSerivce_UpExpectApplyAmount_Handler,
		},
		{
			MethodName: "Approval",
			Handler:    _ReimbursementSerivce_Approval_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ManagerService.proto",
}

// MicroToolsServiceClient is the client API for MicroToolsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MicroToolsServiceClient interface {
	// 获取 workDay
	GetNextWorkDay(ctx context.Context, in *GetNextWorkDayReq, opts ...grpc.CallOption) (*GetNextWorkDayRsp, error)
}

type microToolsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMicroToolsServiceClient(cc grpc.ClientConnInterface) MicroToolsServiceClient {
	return &microToolsServiceClient{cc}
}

func (c *microToolsServiceClient) GetNextWorkDay(ctx context.Context, in *GetNextWorkDayReq, opts ...grpc.CallOption) (*GetNextWorkDayRsp, error) {
	out := new(GetNextWorkDayRsp)
	err := c.cc.Invoke(ctx, "/ManagerService.MicroToolsService/GetNextWorkDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MicroToolsServiceServer is the server API for MicroToolsService service.
type MicroToolsServiceServer interface {
	// 获取 workDay
	GetNextWorkDay(context.Context, *GetNextWorkDayReq) (*GetNextWorkDayRsp, error)
}

// UnimplementedMicroToolsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMicroToolsServiceServer struct {
}

func (*UnimplementedMicroToolsServiceServer) GetNextWorkDay(context.Context, *GetNextWorkDayReq) (*GetNextWorkDayRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextWorkDay not implemented")
}

func RegisterMicroToolsServiceServer(s *grpc.Server, srv MicroToolsServiceServer) {
	s.RegisterService(&_MicroToolsService_serviceDesc, srv)
}

func _MicroToolsService_GetNextWorkDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextWorkDayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroToolsServiceServer).GetNextWorkDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.MicroToolsService/GetNextWorkDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroToolsServiceServer).GetNextWorkDay(ctx, req.(*GetNextWorkDayReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MicroToolsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerService.MicroToolsService",
	HandlerType: (*MicroToolsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNextWorkDay",
			Handler:    _MicroToolsService_GetNextWorkDay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ManagerService.proto",
}
