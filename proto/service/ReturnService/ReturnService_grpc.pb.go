// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ReturnService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ReturnServiceClient is the client API for ReturnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReturnServiceClient interface {
	// 发起退货申请
	CreateReturnOrder(ctx context.Context, in *CreateReturnReq, opts ...grpc.CallOption) (*StandardRes, error)
	// 列表 退货单
	ListReturnOrder(ctx context.Context, in *ListReturnReq, opts ...grpc.CallOption) (*ListReturnRsp, error)
	// 列表 可退货的 订单
	ListReturnableOrder(ctx context.Context, in *ListReturnableReq, opts ...grpc.CallOption) (*ListReturnableRsp, error)
	// 退货申请批复  // 收到退货
	UpdateReturnStatus(ctx context.Context, in *UpdateReturnStatusReq, opts ...grpc.CallOption) (*StandardRes, error)
}

type returnServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReturnServiceClient(cc grpc.ClientConnInterface) ReturnServiceClient {
	return &returnServiceClient{cc}
}

func (c *returnServiceClient) CreateReturnOrder(ctx context.Context, in *CreateReturnReq, opts ...grpc.CallOption) (*StandardRes, error) {
	out := new(StandardRes)
	err := c.cc.Invoke(ctx, "/ReturnService.ReturnService/CreateReturnOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *returnServiceClient) ListReturnOrder(ctx context.Context, in *ListReturnReq, opts ...grpc.CallOption) (*ListReturnRsp, error) {
	out := new(ListReturnRsp)
	err := c.cc.Invoke(ctx, "/ReturnService.ReturnService/ListReturnOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *returnServiceClient) ListReturnableOrder(ctx context.Context, in *ListReturnableReq, opts ...grpc.CallOption) (*ListReturnableRsp, error) {
	out := new(ListReturnableRsp)
	err := c.cc.Invoke(ctx, "/ReturnService.ReturnService/ListReturnableOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *returnServiceClient) UpdateReturnStatus(ctx context.Context, in *UpdateReturnStatusReq, opts ...grpc.CallOption) (*StandardRes, error) {
	out := new(StandardRes)
	err := c.cc.Invoke(ctx, "/ReturnService.ReturnService/UpdateReturnStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReturnServiceServer is the server API for ReturnService service.
// All implementations must embed UnimplementedReturnServiceServer
// for forward compatibility
type ReturnServiceServer interface {
	// 发起退货申请
	CreateReturnOrder(context.Context, *CreateReturnReq) (*StandardRes, error)
	// 列表 退货单
	ListReturnOrder(context.Context, *ListReturnReq) (*ListReturnRsp, error)
	// 列表 可退货的 订单
	ListReturnableOrder(context.Context, *ListReturnableReq) (*ListReturnableRsp, error)
	// 退货申请批复  // 收到退货
	UpdateReturnStatus(context.Context, *UpdateReturnStatusReq) (*StandardRes, error)
	mustEmbedUnimplementedReturnServiceServer()
}

// UnimplementedReturnServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReturnServiceServer struct {
}

func (UnimplementedReturnServiceServer) CreateReturnOrder(context.Context, *CreateReturnReq) (*StandardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReturnOrder not implemented")
}
func (UnimplementedReturnServiceServer) ListReturnOrder(context.Context, *ListReturnReq) (*ListReturnRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReturnOrder not implemented")
}
func (UnimplementedReturnServiceServer) ListReturnableOrder(context.Context, *ListReturnableReq) (*ListReturnableRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReturnableOrder not implemented")
}
func (UnimplementedReturnServiceServer) UpdateReturnStatus(context.Context, *UpdateReturnStatusReq) (*StandardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReturnStatus not implemented")
}
func (UnimplementedReturnServiceServer) mustEmbedUnimplementedReturnServiceServer() {}

// UnsafeReturnServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReturnServiceServer will
// result in compilation errors.
type UnsafeReturnServiceServer interface {
	mustEmbedUnimplementedReturnServiceServer()
}

func RegisterReturnServiceServer(s grpc.ServiceRegistrar, srv ReturnServiceServer) {
	s.RegisterService(&_ReturnService_serviceDesc, srv)
}

func _ReturnService_CreateReturnOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReturnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReturnServiceServer).CreateReturnOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReturnService.ReturnService/CreateReturnOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReturnServiceServer).CreateReturnOrder(ctx, req.(*CreateReturnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReturnService_ListReturnOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReturnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReturnServiceServer).ListReturnOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReturnService.ReturnService/ListReturnOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReturnServiceServer).ListReturnOrder(ctx, req.(*ListReturnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReturnService_ListReturnableOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReturnableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReturnServiceServer).ListReturnableOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReturnService.ReturnService/ListReturnableOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReturnServiceServer).ListReturnableOrder(ctx, req.(*ListReturnableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReturnService_UpdateReturnStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReturnStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReturnServiceServer).UpdateReturnStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReturnService.ReturnService/UpdateReturnStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReturnServiceServer).UpdateReturnStatus(ctx, req.(*UpdateReturnStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReturnService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ReturnService.ReturnService",
	HandlerType: (*ReturnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReturnOrder",
			Handler:    _ReturnService_CreateReturnOrder_Handler,
		},
		{
			MethodName: "ListReturnOrder",
			Handler:    _ReturnService_ListReturnOrder_Handler,
		},
		{
			MethodName: "ListReturnableOrder",
			Handler:    _ReturnService_ListReturnableOrder_Handler,
		},
		{
			MethodName: "UpdateReturnStatus",
			Handler:    _ReturnService_UpdateReturnStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ReturnService.proto",
}
