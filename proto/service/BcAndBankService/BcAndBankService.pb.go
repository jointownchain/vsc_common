// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: BcAndBankService.proto

// 外挂用 - 综合 bankSDK 和 fabricSDK 调用
// blockchain and bank plugin

package BcAndBankService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Symbols defined in public import of google/protobuf/timestamp.proto.

type Timestamp = timestamppb.Timestamp

type QueryTxIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxID string `protobuf:"bytes,1,opt,name=TxID,proto3" json:"TxID"`
	Key  string `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key"`
}

func (x *QueryTxIDReq) Reset() {
	*x = QueryTxIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTxIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTxIDReq) ProtoMessage() {}

func (x *QueryTxIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTxIDReq.ProtoReflect.Descriptor instead.
func (*QueryTxIDReq) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{0}
}

func (x *QueryTxIDReq) GetTxID() string {
	if x != nil {
		return x.TxID
	}
	return ""
}

func (x *QueryTxIDReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type QueryTxIDRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rst      string                 `protobuf:"bytes,1,opt,name=Rst,proto3" json:"Rst"`
	CreateAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreateAt,proto3" json:"CreateAt"`
}

func (x *QueryTxIDRsp) Reset() {
	*x = QueryTxIDRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTxIDRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTxIDRsp) ProtoMessage() {}

func (x *QueryTxIDRsp) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTxIDRsp.ProtoReflect.Descriptor instead.
func (*QueryTxIDRsp) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{1}
}

func (x *QueryTxIDRsp) GetRst() string {
	if x != nil {
		return x.Rst
	}
	return ""
}

func (x *QueryTxIDRsp) GetCreateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateAt
	}
	return nil
}

// 通用单个上链信息返回(hash)
type BcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash"`
}

func (x *BcResponse) Reset() {
	*x = BcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BcResponse) ProtoMessage() {}

func (x *BcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BcResponse.ProtoReflect.Descriptor instead.
func (*BcResponse) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{2}
}

func (x *BcResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

// 通用上链信息返回(hashs)
type BcResponses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []string `protobuf:"bytes,1,rep,name=hash,proto3" json:"hash"`
}

func (x *BcResponses) Reset() {
	*x = BcResponses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BcResponses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BcResponses) ProtoMessage() {}

func (x *BcResponses) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BcResponses.ProtoReflect.Descriptor instead.
func (*BcResponses) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{3}
}

func (x *BcResponses) GetHash() []string {
	if x != nil {
		return x.Hash
	}
	return nil
}

type UploadChainType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastHash         string `protobuf:"bytes,1,opt,name=lastHash,proto3" json:"lastHash"`
	UploadNode       string `protobuf:"bytes,2,opt,name=uploadNode,proto3" json:"uploadNode"`
	UploaderName     string `protobuf:"bytes,3,opt,name=uploaderName,proto3" json:"uploaderName"`
	UploaderRole     string `protobuf:"bytes,4,opt,name=uploaderRole,proto3" json:"uploaderRole"`
	UploaderRoleName string `protobuf:"bytes,5,opt,name=uploaderRoleName,proto3" json:"uploaderRoleName"`
	UploaderAccount  string `protobuf:"bytes,6,opt,name=uploaderAccount,proto3" json:"uploaderAccount"`
}

func (x *UploadChainType) Reset() {
	*x = UploadChainType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainType) ProtoMessage() {}

func (x *UploadChainType) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainType.ProtoReflect.Descriptor instead.
func (*UploadChainType) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{4}
}

func (x *UploadChainType) GetLastHash() string {
	if x != nil {
		return x.LastHash
	}
	return ""
}

func (x *UploadChainType) GetUploadNode() string {
	if x != nil {
		return x.UploadNode
	}
	return ""
}

func (x *UploadChainType) GetUploaderName() string {
	if x != nil {
		return x.UploaderName
	}
	return ""
}

func (x *UploadChainType) GetUploaderRole() string {
	if x != nil {
		return x.UploaderRole
	}
	return ""
}

func (x *UploadChainType) GetUploaderRoleName() string {
	if x != nil {
		return x.UploaderRoleName
	}
	return ""
}

func (x *UploadChainType) GetUploaderAccount() string {
	if x != nil {
		return x.UploaderAccount
	}
	return ""
}

type UploadChainForges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainForge []*UploadChainForge `protobuf:"bytes,1,rep,name=uploadChainForge,proto3" json:"uploadChainForge"`
}

func (x *UploadChainForges) Reset() {
	*x = UploadChainForges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainForges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainForges) ProtoMessage() {}

func (x *UploadChainForges) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainForges.ProtoReflect.Descriptor instead.
func (*UploadChainForges) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{5}
}

func (x *UploadChainForges) GetUploadChainForge() []*UploadChainForge {
	if x != nil {
		return x.UploadChainForge
	}
	return nil
}

type UploadChainForge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadChainType   *UploadChainType       `protobuf:"bytes,1,opt,name=uploadChainType,proto3" json:"uploadChainType"`
	Title             string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	FileUrl           string                 `protobuf:"bytes,3,opt,name=fileUrl,proto3" json:"fileUrl"`
	FileMd5           string                 `protobuf:"bytes,4,opt,name=fileMd5,proto3" json:"fileMd5"`
	CompetitionItemId int64                  `protobuf:"varint,5,opt,name=competitionItemId,proto3" json:"competitionItemId"`
	CompetitorId      int64                  `protobuf:"varint,6,opt,name=competitorId,proto3" json:"competitorId"`
	ForgeItemId       int64                  `protobuf:"varint,7,opt,name=forgeItemId,proto3" json:"forgeItemId"`
	Summary           string                 `protobuf:"bytes,8,opt,name=summary,proto3" json:"summary"`
	Description       string                 `protobuf:"bytes,9,opt,name=description,proto3" json:"description"`
	Copies            string                 `protobuf:"bytes,10,opt,name=copies,proto3" json:"copies"`
	Copyright         string                 `protobuf:"bytes,11,opt,name=copyright,proto3" json:"copyright"`
	ShelvesStatus     string                 `protobuf:"bytes,12,opt,name=shelvesStatus,proto3" json:"shelvesStatus"`
	ShelvesAt         *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=shelvesAt,proto3" json:"shelvesAt"`
	Memo              string                 `protobuf:"bytes,14,opt,name=memo,proto3" json:"memo"` // repeated UploadDocumentInfo uploadDocument = 15;
}

func (x *UploadChainForge) Reset() {
	*x = UploadChainForge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_BcAndBankService_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadChainForge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChainForge) ProtoMessage() {}

func (x *UploadChainForge) ProtoReflect() protoreflect.Message {
	mi := &file_BcAndBankService_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChainForge.ProtoReflect.Descriptor instead.
func (*UploadChainForge) Descriptor() ([]byte, []int) {
	return file_BcAndBankService_proto_rawDescGZIP(), []int{6}
}

func (x *UploadChainForge) GetUploadChainType() *UploadChainType {
	if x != nil {
		return x.UploadChainType
	}
	return nil
}

func (x *UploadChainForge) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UploadChainForge) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *UploadChainForge) GetFileMd5() string {
	if x != nil {
		return x.FileMd5
	}
	return ""
}

func (x *UploadChainForge) GetCompetitionItemId() int64 {
	if x != nil {
		return x.CompetitionItemId
	}
	return 0
}

func (x *UploadChainForge) GetCompetitorId() int64 {
	if x != nil {
		return x.CompetitorId
	}
	return 0
}

func (x *UploadChainForge) GetForgeItemId() int64 {
	if x != nil {
		return x.ForgeItemId
	}
	return 0
}

func (x *UploadChainForge) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *UploadChainForge) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UploadChainForge) GetCopies() string {
	if x != nil {
		return x.Copies
	}
	return ""
}

func (x *UploadChainForge) GetCopyright() string {
	if x != nil {
		return x.Copyright
	}
	return ""
}

func (x *UploadChainForge) GetShelvesStatus() string {
	if x != nil {
		return x.ShelvesStatus
	}
	return ""
}

func (x *UploadChainForge) GetShelvesAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ShelvesAt
	}
	return nil
}

func (x *UploadChainForge) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

var File_BcAndBankService_proto protoreflect.FileDescriptor

var file_BcAndBankService_proto_rawDesc = []byte{
	0x0a, 0x16, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34, 0x0a, 0x0c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x78, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x12,
	0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65,
	0x79, 0x22, 0x58, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x49, 0x44, 0x52, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x52, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x20, 0x0a, 0x0a, 0x42,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x21, 0x0a,
	0x0b, 0x42, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x63,
	0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x6f, 0x72,
	0x67, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x67,
	0x65, 0x52, 0x10, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x46, 0x6f,
	0x72, 0x67, 0x65, 0x22, 0x83, 0x04, 0x0a, 0x10, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x12,
	0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x67, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68,
	0x65, 0x6c, 0x76, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x73,
	0x68, 0x65, 0x6c, 0x76, 0x65, 0x73, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x68, 0x65, 0x6c,
	0x76, 0x65, 0x73, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x32, 0xb8, 0x01, 0x0a, 0x10, 0x42, 0x63,
	0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f,
	0x0a, 0x0d, 0x42, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x54, 0x78, 0x49, 0x44, 0x12,
	0x1e, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a,
	0x1e, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x78, 0x49, 0x44, 0x52, 0x73, 0x70, 0x12,
	0x53, 0x0a, 0x0d, 0x42, 0x63, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x67, 0x65,
	0x12, 0x23, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x46,
	0x6f, 0x72, 0x67, 0x65, 0x73, 0x1a, 0x1d, 0x2e, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x42, 0x2b, 0x5a, 0x29, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x3b, 0x42, 0x63, 0x41, 0x6e, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_BcAndBankService_proto_rawDescOnce sync.Once
	file_BcAndBankService_proto_rawDescData = file_BcAndBankService_proto_rawDesc
)

func file_BcAndBankService_proto_rawDescGZIP() []byte {
	file_BcAndBankService_proto_rawDescOnce.Do(func() {
		file_BcAndBankService_proto_rawDescData = protoimpl.X.CompressGZIP(file_BcAndBankService_proto_rawDescData)
	})
	return file_BcAndBankService_proto_rawDescData
}

var file_BcAndBankService_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_BcAndBankService_proto_goTypes = []interface{}{
	(*QueryTxIDReq)(nil),          // 0: BcAndBankService.QueryTxIDReq
	(*QueryTxIDRsp)(nil),          // 1: BcAndBankService.QueryTxIDRsp
	(*BcResponse)(nil),            // 2: BcAndBankService.BcResponse
	(*BcResponses)(nil),           // 3: BcAndBankService.BcResponses
	(*UploadChainType)(nil),       // 4: BcAndBankService.UploadChainType
	(*UploadChainForges)(nil),     // 5: BcAndBankService.UploadChainForges
	(*UploadChainForge)(nil),      // 6: BcAndBankService.UploadChainForge
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_BcAndBankService_proto_depIdxs = []int32{
	7, // 0: BcAndBankService.QueryTxIDRsp.CreateAt:type_name -> google.protobuf.Timestamp
	6, // 1: BcAndBankService.UploadChainForges.uploadChainForge:type_name -> BcAndBankService.UploadChainForge
	4, // 2: BcAndBankService.UploadChainForge.uploadChainType:type_name -> BcAndBankService.UploadChainType
	7, // 3: BcAndBankService.UploadChainForge.shelvesAt:type_name -> google.protobuf.Timestamp
	0, // 4: BcAndBankService.BcAndBankService.BcQueryByTxID:input_type -> BcAndBankService.QueryTxIDReq
	5, // 5: BcAndBankService.BcAndBankService.BcUploadForge:input_type -> BcAndBankService.UploadChainForges
	1, // 6: BcAndBankService.BcAndBankService.BcQueryByTxID:output_type -> BcAndBankService.QueryTxIDRsp
	3, // 7: BcAndBankService.BcAndBankService.BcUploadForge:output_type -> BcAndBankService.BcResponses
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_BcAndBankService_proto_init() }
func file_BcAndBankService_proto_init() {
	if File_BcAndBankService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_BcAndBankService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTxIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTxIDRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BcResponses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainForges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_BcAndBankService_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadChainForge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_BcAndBankService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_BcAndBankService_proto_goTypes,
		DependencyIndexes: file_BcAndBankService_proto_depIdxs,
		MessageInfos:      file_BcAndBankService_proto_msgTypes,
	}.Build()
	File_BcAndBankService_proto = out.File
	file_BcAndBankService_proto_rawDesc = nil
	file_BcAndBankService_proto_goTypes = nil
	file_BcAndBankService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BcAndBankServiceClient is the client API for BcAndBankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BcAndBankServiceClient interface {
	// 根据 txID 查询 链上交易, 返回 解密后的 json.Marshal 字符串
	BcQueryByTxID(ctx context.Context, in *QueryTxIDReq, opts ...grpc.CallOption) (*QueryTxIDRsp, error)
	//铸造上链
	BcUploadForge(ctx context.Context, in *UploadChainForges, opts ...grpc.CallOption) (*BcResponses, error)
}

type bcAndBankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBcAndBankServiceClient(cc grpc.ClientConnInterface) BcAndBankServiceClient {
	return &bcAndBankServiceClient{cc}
}

func (c *bcAndBankServiceClient) BcQueryByTxID(ctx context.Context, in *QueryTxIDReq, opts ...grpc.CallOption) (*QueryTxIDRsp, error) {
	out := new(QueryTxIDRsp)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcQueryByTxID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcAndBankServiceClient) BcUploadForge(ctx context.Context, in *UploadChainForges, opts ...grpc.CallOption) (*BcResponses, error) {
	out := new(BcResponses)
	err := c.cc.Invoke(ctx, "/BcAndBankService.BcAndBankService/BcUploadForge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BcAndBankServiceServer is the server API for BcAndBankService service.
type BcAndBankServiceServer interface {
	// 根据 txID 查询 链上交易, 返回 解密后的 json.Marshal 字符串
	BcQueryByTxID(context.Context, *QueryTxIDReq) (*QueryTxIDRsp, error)
	//铸造上链
	BcUploadForge(context.Context, *UploadChainForges) (*BcResponses, error)
}

// UnimplementedBcAndBankServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBcAndBankServiceServer struct {
}

func (*UnimplementedBcAndBankServiceServer) BcQueryByTxID(context.Context, *QueryTxIDReq) (*QueryTxIDRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcQueryByTxID not implemented")
}
func (*UnimplementedBcAndBankServiceServer) BcUploadForge(context.Context, *UploadChainForges) (*BcResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BcUploadForge not implemented")
}

func RegisterBcAndBankServiceServer(s *grpc.Server, srv BcAndBankServiceServer) {
	s.RegisterService(&_BcAndBankService_serviceDesc, srv)
}

func _BcAndBankService_BcQueryByTxID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTxIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcQueryByTxID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcQueryByTxID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcQueryByTxID(ctx, req.(*QueryTxIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcAndBankService_BcUploadForge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChainForges)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcAndBankServiceServer).BcUploadForge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BcAndBankService.BcAndBankService/BcUploadForge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcAndBankServiceServer).BcUploadForge(ctx, req.(*UploadChainForges))
	}
	return interceptor(ctx, in, info, handler)
}

var _BcAndBankService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BcAndBankService.BcAndBankService",
	HandlerType: (*BcAndBankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BcQueryByTxID",
			Handler:    _BcAndBankService_BcQueryByTxID_Handler,
		},
		{
			MethodName: "BcUploadForge",
			Handler:    _BcAndBankService_BcUploadForge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "BcAndBankService.proto",
}
